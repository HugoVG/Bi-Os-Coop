commit 9f9aa190293c875a4c562fdb89e6edaf5372c08a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Jun 9 12:55:32 2021 +0200

    Pwettyfy
---
 Class/Zalen.cs     |  5 ++++-
 Json/MainMenu.json | 12 ++++++------
 2 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 5b8e985..b797768 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -346,14 +346,17 @@ namespace Bi_Os_Coop.Class
                     else if (stoel.Price == Stoel.price.LOW)
                     {
                         Console.BackgroundColor = ConsoleColor.Blue;
+                        Console.ForegroundColor = ConsoleColor.White;
                     }
                     else if (stoel.Price == Stoel.price.MEDIUM)
                     {
-                        Console.BackgroundColor = ConsoleColor.Yellow;
+                        Console.BackgroundColor = ConsoleColor.DarkGreen;
+                        Console.ForegroundColor = ConsoleColor.White;
                     }
                     else if (stoel.Price == Stoel.price.HIGH)
                     {
                         Console.BackgroundColor = ConsoleColor.DarkYellow;
+                        Console.ForegroundColor = ConsoleColor.White;
                     }
                 }
                 if (counter <= 8)
diff --git a/Json/MainMenu.json b/Json/MainMenu.json
index bd459e1..5110544 100644
--- a/Json/MainMenu.json
+++ b/Json/MainMenu.json
@@ -1,15 +1,15 @@
 {
   "user": {
     "id": 1,
-    "name": "Hugo",
-    "email": "coolste@min.com",
-    "password": "nietzoveilig",
-    "age": "05/01/1991",
-    "phonenumber": "06123456789",
+    "name": "hugo",
+    "email": "mijnfakeemail@test.com",
+    "password": "H3nk123",
+    "age": "16/05/2000",
+    "phonenumber": null,
     "BookedMovies": null
   },
   "sort": "name",
   "reverse": false,
-  "login": "Admin",
+  "login": "Person",
   "language": "Nederlands"
 }
\ No newline at end of file

commit 860fc0a02dc6af1e90f90ba458e5d4a5a39d5015
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon Jun 7 12:36:37 2021 +0200

    sexs
---
 Class/MainMenu.cs  |  18 +--
 Class/MovieMenu.cs | 460 +++++++++++++++++++++++++++++++++++------------------
 Class/Zalen.cs     |   4 +-
 3 files changed, 317 insertions(+), 165 deletions(-)

diff --git a/Class/MainMenu.cs b/Class/MainMenu.cs
index c1e96c0..eda2cdd 100644
--- a/Class/MainMenu.cs
+++ b/Class/MainMenu.cs
@@ -58,7 +58,7 @@ namespace Bi_Os_Coop.Class
         public static List<int> SortByName()
         {
             // Maakt een dictionary van films uit jsonFilms met de movieid en naam.
-            Films jsonFilms = GetFilmList();
+            MovieMenu.Films jsonFilms = GetFilmList();
             var movielistname = jsonFilms.movieList.ToDictionary(movieid => movieid.movieid, name => name.name);
 
             // Checkt of er niet een film is zonder naam.
@@ -86,10 +86,10 @@ namespace Bi_Os_Coop.Class
         /// <summary>
         /// Deze method returnt de films uit de json.
         /// </summary>
-        public static Films GetFilmList()
+        public static MovieMenu.Films GetFilmList()
         {
             string json = Json.ReadJson("Films");
-            return JsonSerializer.Deserialize<Films>(json);
+            return JsonSerializer.Deserialize<MovieMenu.Films>(json);
         }
 
         /// <summary>
@@ -98,7 +98,7 @@ namespace Bi_Os_Coop.Class
         public static List<int> SortByRelease()
         {
             // Maakt een dictionary van films uit jsonFilms met de movieid en releasedate.
-            Films jsonFilms = GetFilmList();
+            MovieMenu.Films jsonFilms = GetFilmList();
             var movielistrelease = jsonFilms.movieList.ToDictionary(movieid => movieid.movieid, releasedate => releasedate.releasedate);
 
             // Vergelijkt elke datum met elkaar en plaatst deze in de lijst newlist met de movie id en publicatiedatum.
@@ -177,7 +177,7 @@ namespace Bi_Os_Coop.Class
         public static List<int> SortByRating()
         {
             // Maakt een dictionary van films uit jsonFilms met de movieid en naam.
-            Films jsonFilms = GetFilmList();
+            MovieMenu.Films jsonFilms = GetFilmList();
             var movielistrating = jsonFilms.movieList.ToDictionary(movieid => movieid.movieid, beoordeling => beoordeling.beoordeling);
 
             // Checkt of er een film is zonder beoordeling.
@@ -199,7 +199,7 @@ namespace Bi_Os_Coop.Class
         public static List<string> ReturnAllFilms(List<int> printablelist)
         {
             // Pakt de films uit de json.
-            Films jsonFilms = GetFilmList();
+            MovieMenu.Films jsonFilms = GetFilmList();
 
             // Zet alle films uit de json in een lijst en returnt deze.
             List<string> listthing = new List<string>();
@@ -207,7 +207,7 @@ namespace Bi_Os_Coop.Class
             {
                 try
                 {
-                    MovieInterpreter mov = jsonFilms.movieList.Single(movie1 => movie1.movieid == printablelist[i - 1]);
+                    MovieMenu.MovieInterpreter mov = jsonFilms.movieList.Single(movie1 => movie1.movieid == printablelist[i - 1]);
                     listthing.Add(mov.name);
                 }
                 catch { break; }
@@ -221,7 +221,7 @@ namespace Bi_Os_Coop.Class
         public static List<string> PrintList(List<int> printablelist, int index)
         {
             // Pakt de films uit de json.
-            Films jsonFilms = GetFilmList();
+            MovieMenu.Films jsonFilms = GetFilmList();
 
             // Berekent eerst de start en stop index. Daarna print het de naam, publicatiedatum en minimumleeftijd van de films tussen de start en stop index.
             for (int i = ((index * 10 + 1) - 10); i < (index * 10 + 1); i++)
@@ -229,7 +229,7 @@ namespace Bi_Os_Coop.Class
                 try
                 {
                     // Verkrijgt de informatie over de film door te vragen naar een film met movieid.
-                    MovieInterpreter mov = jsonFilms.movieList.Single(movie1 => movie1.movieid == printablelist[i - 1]);
+                    MovieMenu.MovieInterpreter mov = jsonFilms.movieList.Single(movie1 => movie1.movieid == printablelist[i - 1]);
 
                     // Zorgt ervoor dat namen die te lang zijn worden afgekort met '...'.
                     string name;
diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 23e4f42..2438d47 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -41,19 +41,23 @@ namespace Bi_Os_Coop.Class
             string indexstring = Console.ReadLine();
             if (indexstring.ToLower() == "r" && mainmenuthings.sort != "name")
             {
-                MainMenu.JsonMainMenuSave(mainmenuthings.user, "name", mainmenuthings.reverse, mainmenuthings.login, mainmenuthings.language);
+                MainMenu.JsonMainMenuSave(mainmenuthings.user, "name", mainmenuthings.reverse, mainmenuthings.login,
+                    mainmenuthings.language);
             }
             else if (indexstring.ToLower() == "t" && mainmenuthings.sort != "rating")
             {
-                MainMenu.JsonMainMenuSave(mainmenuthings.user, "rating", mainmenuthings.reverse, mainmenuthings.login, mainmenuthings.language);
+                MainMenu.JsonMainMenuSave(mainmenuthings.user, "rating", mainmenuthings.reverse, mainmenuthings.login,
+                    mainmenuthings.language);
             }
             else if (indexstring.ToLower() == "y" && mainmenuthings.sort != "release")
             {
-                MainMenu.JsonMainMenuSave(mainmenuthings.user, "release", mainmenuthings.reverse, mainmenuthings.login, mainmenuthings.language);
+                MainMenu.JsonMainMenuSave(mainmenuthings.user, "release", mainmenuthings.reverse, mainmenuthings.login,
+                    mainmenuthings.language);
             }
             else if (indexstring.ToLower() == "p")
             {
-                MainMenu.JsonMainMenuSave(mainmenuthings.user, mainmenuthings.sort, !mainmenuthings.reverse, mainmenuthings.login, mainmenuthings.language);
+                MainMenu.JsonMainMenuSave(mainmenuthings.user, mainmenuthings.sort, !mainmenuthings.reverse,
+                    mainmenuthings.login, mainmenuthings.language);
                 Console.Clear();
             }
             else if (indexstring.ToLower() == "s" || indexstring.ToLower() == "search")
@@ -102,8 +106,10 @@ namespace Bi_Os_Coop.Class
 
             mainPagina(index);
         }
+
         //functie die de ingetypte film zoekt in de JSON met alle films
-        public static Tuple<bool, int> search(string searchmov, List<string> mainmenulist = null, bool InMovieMenu = true)
+        public static Tuple<bool, int> search(string searchmov, List<string> mainmenulist = null,
+            bool InMovieMenu = true)
         {
             string json = Json.ReadJson("Films");
             Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
@@ -178,7 +184,8 @@ namespace Bi_Os_Coop.Class
         }
 
         //functie om alle kenmerken van een film te laten zien
-        public static Tuple<string, bool, int, string, List<string>> showmov(string movsearch, List<string> mainmenulist = null)
+        public static Tuple<string, bool, int, string, List<string>> showmov(string movsearch,
+            List<string> mainmenulist = null)
         {
             string json = Json.ReadJson("Films");
             Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
@@ -277,7 +284,9 @@ namespace Bi_Os_Coop.Class
 
                     Console.Write("\n");
                 }
-                return Tuple.Create(trailer, hastrailer, jsonFilms.movieList[tempMovie].movieid, movsearch, mainmenulist);
+
+                return Tuple.Create(trailer, hastrailer, jsonFilms.movieList[tempMovie].movieid, movsearch,
+                    mainmenulist);
             }
             else
             {
@@ -288,19 +297,23 @@ namespace Bi_Os_Coop.Class
                 return null;
             }
         }
+
         public static void inputcheck(string movsearch, List<string> mainmenulist = null)
         {
             Tuple<string, bool, int, string, List<string>> MovieInformation = showmov(movsearch, mainmenulist);
             if (MovieInformation != null)
             {
-                MovieInterpreter chosenmovie = Films.FromJson().movieList.Single(movie => movie.movieid == MovieInformation.Item3);
+                MovieInterpreter chosenmovie =
+                    Films.FromJson().movieList.Single(movie => movie.movieid == MovieInformation.Item3);
                 MainMenuThings things = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson("MainMenu"));
                 bool oldenough = Registerscreen.AgeVerify(things.user.age, chosenmovie.leeftijd);
                 bool hastrailer = MovieInformation.Item2;
                 string trailer = MovieInformation.Item1;
                 string moviename = chosenmovie.name;
                 //hierna moet als er ja geselecteerd is het resrvatie scherm komen!
-                IEnumerable<Zaal> selectedzalen = Zalen.FromJson().zalenList.Where(movie => movie.film.name.ToLower() == moviename.ToLower() && DateTime.Parse(movie.date) >= DateTime.Today); //fixt ook de out dated films
+                IEnumerable<Zaal> selectedzalen = Zalen.FromJson().zalenList.Where(movie =>
+                    movie.film.name.ToLower() == moviename.ToLower() &&
+                    DateTime.Parse(movie.date) >= DateTime.Today); //fixt ook de out dated films
                 if (things.login == "Admin")
                 {
                     Console.ForegroundColor = ConsoleColor.Red;
@@ -323,7 +336,7 @@ namespace Bi_Os_Coop.Class
                     Console.Write($"Vraag aan een medewerker voor een nieuwe screening voor {moviename}\n");
                     Console.ForegroundColor = ConsoleColor.White;
                 }
-                else if (selectedzalen.Count() != 0 && oldenough)
+                else if (selectedzalen.Count() != 0 && oldenough && things.user != null)
                 {
                     Console.ForegroundColor = ConsoleColor.White;
                     Console.Write("\nWilt u deze film reserveren? (");
@@ -342,6 +355,7 @@ namespace Bi_Os_Coop.Class
                     Console.Write($"Je kan niet reserveren voor {moviename}\n");
                     Console.ForegroundColor = ConsoleColor.White;
                 }
+
                 ConsoleKey keypressed = Console.ReadKey(true).Key;
                 if (hastrailer)
                 {
@@ -359,96 +373,103 @@ namespace Bi_Os_Coop.Class
                             inputcheck(movsearch, mainmenulist);
                         }
                     } // Idiot Esception
-                }
-                MainMenuThings mmt = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson("MainMenu"));
-                if (selectedzalen.Count() != 0 && mmt.user.id > 0 && mmt.user.isPerson())
-                {
-                    //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
-                    if (keypressed == ConsoleKey.J)
+
+                    if (selectedzalen.Count() != 0 && things.user != null)
                     {
-                        Zalen zalen = Zalen.FromJson();
-                        Tuple<bool, List<Zaal>> zalenMetNaam = zalen.selectZalen(moviename);
-                        if (zalenMetNaam.Item1)
+                        //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
+                        if (keypressed == ConsoleKey.J)
                         {
-                            zalen.menu(zalenMetNaam.Item2);
-                            var json = zalen.ToJson();
-                            Json.WriteJson(Json.Zalen, json);
+                            Zalen zalen = Zalen.FromJson();
+                            Tuple<bool, List<Zaal>> zalenMetNaam = zalen.selectZalen(moviename);
+                            if (zalenMetNaam.Item1)
+                            {
+                                zalen.menu(zalenMetNaam.Item2);
+                                var json = zalen.ToJson();
+                                Json.WriteJson(Json.Zalen, json);
+                            }
                         }
                     }
                 }
             }
         }
-    }
-    public class MovieInterpreter
-    {
-        public int movieid { get; set; }
-        public string name { get; set; }
-        public string releasedate { get; set; }
-        public List<string> genres { get; set; }
-        public int leeftijd { get; set; }
-        public double beoordeling { get; set; }
-        public List<string> acteurs { get; set; }
-        public string taal { get; set; }
-        public string beschrijving { get; set; }
-        public string trailer { get; set; }
-        public int MovieTime { get; set; }
-
-        public void setFilm(int movieid, string name, string releasedate, List<string> genres, int leeftijd,
-            double beoordeling, List<string> acteurs, int movieTime = 0, string taal = null, string beschrijving = null,
-            string trailer = null)
-        {
-            this.movieid = movieid;
-            this.name = name;
-            this.releasedate = releasedate;
-            this.genres = genres.ToList();
-            this.leeftijd = leeftijd;
-            this.beoordeling = beoordeling;
-            this.acteurs = acteurs.ToList();
-            this.taal = taal;
-            this.beschrijving = beschrijving;
-            this.trailer = trailer;
-            this.MovieTime = movieTime;
-        }
-    }
-    public class Films
-    {
-        public List<MovieInterpreter> movieList { get; set; }
-        public void addFilm(MovieInterpreter newMovie)
+
+        public class MovieInterpreter
         {
-            if (movieList == null)
+            public int movieid { get; set; }
+            public string name { get; set; }
+            public string releasedate { get; set; }
+            public List<string> genres { get; set; }
+            public int leeftijd { get; set; }
+            public double beoordeling { get; set; }
+            public List<string> acteurs { get; set; }
+            public string taal { get; set; }
+            public string beschrijving { get; set; }
+            public string trailer { get; set; }
+            public int MovieTime { get; set; }
+
+            public void setFilm(int movieid, string name, string releasedate, List<string> genres, int leeftijd,
+                double beoordeling, List<string> acteurs, int movieTime = 0, string taal = null,
+                string beschrijving = null,
+                string trailer = null)
             {
-                List<MovieInterpreter> newMovieList = new List<MovieInterpreter>();
-                newMovieList.Add(newMovie);
-                movieList = newMovieList;
-            }
-            else
-            {
-                movieList.Add(newMovie);
+                this.movieid = movieid;
+                this.name = name;
+                this.releasedate = releasedate;
+                this.genres = genres.ToList();
+                this.leeftijd = leeftijd;
+                this.beoordeling = beoordeling;
+                this.acteurs = acteurs.ToList();
+                this.taal = taal;
+                this.beschrijving = beschrijving;
+                this.trailer = trailer;
+                this.MovieTime = movieTime;
             }
         }
-        public string ToJson(bool write = false)
+
+        public class Films
         {
-            if (write)
+            public List<MovieInterpreter> movieList { get; set; }
+
+            public void addFilm(MovieInterpreter newMovie)
             {
-                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
-                string json = JsonSerializer.Serialize(this, opt);
-                Json.WriteJson("Films", json);
-                return null;
+                if (movieList == null)
+                {
+                    List<MovieInterpreter> newMovieList = new List<MovieInterpreter>();
+                    newMovieList.Add(newMovie);
+                    movieList = newMovieList;
+                }
+                else
+                {
+                    movieList.Add(newMovie);
+                }
             }
-            else
+
+            public string ToJson(bool write = false)
             {
-                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
-                return JsonSerializer.Serialize(this, opt);
+                if (write)
+                {
+                    JsonSerializerOptions opt = new JsonSerializerOptions() {WriteIndented = true};
+                    string json = JsonSerializer.Serialize(this, opt);
+                    Json.WriteJson("Films", json);
+                    return null;
+                }
+                else
+                {
+                    JsonSerializerOptions opt = new JsonSerializerOptions() {WriteIndented = true};
+                    return JsonSerializer.Serialize(this, opt);
+                }
+            }
+
+            public static Films FromJson(string json) => JsonSerializer.Deserialize<Films>(json);
+
+            public static Films FromJson()
+            {
+                string json = Json.ReadJson("Films");
+                return JsonSerializer.Deserialize<Films>(json);
             }
         }
-        public static Films FromJson(string json) => JsonSerializer.Deserialize<Films>(json);
-        public static Films FromJson()
-        {
-            string json = Json.ReadJson("Films");
-            return JsonSerializer.Deserialize<Films>(json);
-        }
-    }
-    public class MovieMethods
+
+        public class MovieMethods
         {
             public static void UpdateMovieMenu(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
@@ -466,8 +487,8 @@ namespace Bi_Os_Coop.Class
                     Console.WriteLine("6. Beoordeling aanpassen");
                     Console.WriteLine("7. Taal aanpassen");
                     Console.WriteLine("8. Beschrijving aanpassen");
-                    Console.WriteLine("A. Tijdsduur aanpassen"); 
-    
+                    Console.WriteLine("A. Tijdsduur aanpassen");
+
                     ConsoleKeyInfo keyReaded = Console.ReadKey();
 
                     switch (keyReaded.Key)
@@ -491,12 +512,26 @@ namespace Bi_Os_Coop.Class
                         case ConsoleKey.D5:
                             MainMenu.ClearAndShowLogoPlusEsc("Update");
                             Tuple<string, Films, MovieInterpreter> e = UpdateMinimumAge(json, jsonFilms, tempMovie);
-                            if (e.Item1 == "fail") { while (e.Item1 == "fail") { e = UpdateMinimumAge(json, jsonFilms, tempMovie); } }
+                            if (e.Item1 == "fail")
+                            {
+                                while (e.Item1 == "fail")
+                                {
+                                    e = UpdateMinimumAge(json, jsonFilms, tempMovie);
+                                }
+                            }
+
                             break;
                         case ConsoleKey.D6:
                             MainMenu.ClearAndShowLogoPlusEsc("Update");
                             Tuple<string, Films, MovieInterpreter> f = UpdateReviewScore(json, jsonFilms, tempMovie);
-                            if (f.Item1 == "fail") { while (f.Item1 == "fail") { f = UpdateReviewScore(json, jsonFilms, tempMovie); } }
+                            if (f.Item1 == "fail")
+                            {
+                                while (f.Item1 == "fail")
+                                {
+                                    f = UpdateReviewScore(json, jsonFilms, tempMovie);
+                                }
+                            }
+
                             break;
                         case ConsoleKey.D7:
                             MainMenu.ClearAndShowLogoPlusEsc("Update");
@@ -513,8 +548,15 @@ namespace Bi_Os_Coop.Class
                         case ConsoleKey.A:
                             MainMenu.ClearAndShowLogoPlusEsc("Update");
                             Tuple<string, Films, MovieInterpreter> g = UpdateMovieTime(json, jsonFilms, tempMovie);
-                            if (g.Item1 == "fail") { while (g.Item1 == "fail") { g = UpdateMovieTime(json, jsonFilms, tempMovie); } }
-                        break;
+                            if (g.Item1 == "fail")
+                            {
+                                while (g.Item1 == "fail")
+                                {
+                                    g = UpdateMovieTime(json, jsonFilms, tempMovie);
+                                }
+                            }
+
+                            break;
 
                         case ConsoleKey.Escape:
                             done = true;
@@ -557,20 +599,30 @@ namespace Bi_Os_Coop.Class
             {
                 string json = Json.ReadJson("Films");
                 Films MovieLibrary = JsonSerializer.Deserialize<Films>(json);
-    
+
                 Console.WriteLine("\nVoeg hier een nieuwe film toe.");
                 Console.WriteLine("Naam film:");
                 string naamFilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-                if (naamFilm == "1go2to3main4menu5") { goto exit; }
+                if (naamFilm == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
 
                 Console.WriteLine("Releasedatum film: (dd/mm/yyyy)");
                 string releasedatumFilm = loginscherm.getdate();
-                if (releasedatumFilm == "1go2to3main4menu5") { goto exit; }
+                if (releasedatumFilm == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
 
                 Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
                 Console.WriteLine("Genres film:");
                 string genres = loginscherm.newwayoftyping();
-                if (genres == "1go2to3main4menu5") { goto exit; }
+                if (genres == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 List<string> genresFilm = genres.Split(',').Select(p => p.Trim()).ToList();
 
                 for (int i = 0; i < genresFilm.Count; i++)
@@ -578,11 +630,16 @@ namespace Bi_Os_Coop.Class
                     genresFilm[i] = loginscherm.FirstCharToUpper(genresFilm[i]);
                 }
 
-                Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
+                Console.WriteLine(
+                    "Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
                 Console.WriteLine("Acteurs film:");
                 string acteurs = loginscherm.newwayoftyping();
 
-                if (acteurs == "1go2to3main4menu5") { goto exit; }
+                if (acteurs == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 List<string> acteursFilm = acteurs.Split(',').Select(p => p.Trim()).ToList();
 
                 for (int i = 0; i < acteursFilm.Count; i++)
@@ -592,50 +649,70 @@ namespace Bi_Os_Coop.Class
                     {
                         tempActeur[j] = loginscherm.FirstCharToUpper(tempActeur[j]);
                     }
+
                     acteursFilm[i] = string.Join(" ", tempActeur);
                 }
 
                 Console.WriteLine("Minimumleeftijd film:");
                 var minimumleeftijd = CPeople.converttoint(loginscherm.newwayoftyping());
                 int minimumLeeftijd;
-                if (minimumleeftijd is string) { goto exit; }
+                if (minimumleeftijd is string)
+                {
+                    goto exit;
+                }
 
                 minimumLeeftijd = minimumleeftijd;
 
                 Console.WriteLine("Beoordeling film: (bijv. 8.0)");
                 var beoordelingFilm2 = CPeople.converttodouble(loginscherm.newwayoftyping());
                 double beoordelingFilm;
-                if (beoordelingFilm2 is string) { goto exit; }
+                if (beoordelingFilm2 is string)
+                {
+                    goto exit;
+                }
 
                 beoordelingFilm = beoordelingFilm2;
 
                 Console.WriteLine("Taal film:");
                 string taalfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-                if (taalfilm == "1go2to3main4menu5") { goto exit; }
+                if (taalfilm == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
 
                 Console.WriteLine("Tijdsduur film in minuten:");
                 var movietime = CPeople.converttoint(loginscherm.newwayoftyping());
                 int movieTime;
-                if (movietime is string) { goto exit; }
+                if (movietime is string)
+                {
+                    goto exit;
+                }
 
                 movieTime = movietime;
 
                 Console.WriteLine("Beschrijving film:");
                 string beschrijvingfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-                if (beschrijvingfilm == "1go2to3main4menu5") { goto exit; }
+                if (beschrijvingfilm == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
 
                 Console.WriteLine("Trailer film:");
                 string trailerfilm = loginscherm.newwayoftyping();
-                if (trailerfilm == "1go2to3main4menu5") { goto exit; }
+                if (trailerfilm == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
 
                 if (MovieLibrary.movieList.Count > 0)
                 {
                     var lastMovieInList = MovieLibrary.movieList[MovieLibrary.movieList.Count - 1];
                     MovieInterpreter Movie = new MovieInterpreter();
-                    Movie.setFilm(lastMovieInList.movieid + 1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
+                    Movie.setFilm(lastMovieInList.movieid + 1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd,
+                        beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
 
                     MovieLibrary.addFilm(Movie);
-                    JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                    JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                     json = JsonSerializer.Serialize(MovieLibrary, opt);
 
                     Json.WriteJson("Films", json);
@@ -651,10 +728,11 @@ namespace Bi_Os_Coop.Class
                 else
                 {
                     MovieInterpreter Movie = new MovieInterpreter();
-                    Movie.setFilm(1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
+                    Movie.setFilm(1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm,
+                        acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
 
                     MovieLibrary.addFilm(Movie);
-                    JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                    JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                     json = JsonSerializer.Serialize(MovieLibrary, opt);
 
                     Json.WriteJson("Films", json);
@@ -668,21 +746,27 @@ namespace Bi_Os_Coop.Class
                     return Movie;
                 }
 
-            exit:
+                exit:
                 MovieInterpreter Movie2 = new MovieInterpreter();
-                Movie2.setFilm(234733, "1go2to3main4menu5", "", new List<string>(), 999, 888, new List<string>(), 777, "", "");
+                Movie2.setFilm(234733, "1go2to3main4menu5", "", new List<string>(), 999, 888, new List<string>(), 777,
+                    "", "");
                 return Movie2;
             }
 
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateNameMovie(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateNameMovie(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe naam van de film {tempMovie.name}?");
                 string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-                if (newName == "1go2to3main4menu5") { goto exit; }
+                if (newName == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 tempMovie.name = newName;
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -692,18 +776,23 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateReleaseDate(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateReleaseDate(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe releasedatum van de film {tempMovie.name}?");
                 string newReleaseDate = loginscherm.getdate();
-                if (newReleaseDate == "1go2to3main4menu5") { goto exit; }
+                if (newReleaseDate == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 tempMovie.releasedate = newReleaseDate;
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -713,18 +802,22 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateGenres(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateGenres(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is/zijn de nieuwe genre(s) van de film {tempMovie.name}?");
                 Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
                 Console.WriteLine("Genres film:");
                 string genres = loginscherm.newwayoftyping();
 
-                if (genres == "1go2to3main4menu5") { goto exit; }
+                if (genres == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
 
                 List<string> newGenres = genres.Split(',').Select(p => p.Trim()).ToList();
                 for (int i = 0; i < newGenres.Count; i++)
@@ -734,7 +827,7 @@ namespace Bi_Os_Coop.Class
 
                 tempMovie.genres = newGenres;
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -744,18 +837,23 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateActors(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateActors(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wie zijn de nieuwe acteurs van de film {tempMovie.name}?");
-                Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
+                Console.WriteLine(
+                    "Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
                 Console.WriteLine("Acteurs film:");
                 string actors = loginscherm.newwayoftyping();
 
-                if (actors == "1go2to3main4menu5") { goto exit; }
+                if (actors == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
 
                 List<string> newActors = actors.Split(',').Select(p => p.Trim()).ToList();
                 for (int i = 0; i < newActors.Count; i++)
@@ -765,12 +863,13 @@ namespace Bi_Os_Coop.Class
                     {
                         tempActeur[j] = loginscherm.FirstCharToUpper(tempActeur[j]);
                     }
+
                     newActors[i] = string.Join(" ", tempActeur);
                 }
 
                 tempMovie.acteurs = newActors;
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -780,7 +879,7 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
@@ -789,15 +888,24 @@ namespace Bi_Os_Coop.Class
                 return "2a";
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateMinimumAge(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateMinimumAge(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe minimum leeftijd van de film {tempMovie.name}? (0-18)");
                 string newMinimumAge = loginscherm.newwayoftyping();
-                if (newMinimumAge == "1go2to3main4menu5") { return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie); }
+                if (newMinimumAge == "1go2to3main4menu5")
+                {
+                    return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+                }
+
                 try
                 {
                     int ageing = Convert.ToInt32(newMinimumAge);
-                    if (ageing < 0 || ageing > 18) { Convert.ToInt32(ErrorMaker()); }
+                    if (ageing < 0 || ageing > 18)
+                    {
+                        Convert.ToInt32(ErrorMaker());
+                    }
+
                     tempMovie.leeftijd = ageing;
                 }
                 catch (FormatException)
@@ -809,7 +917,7 @@ namespace Bi_Os_Coop.Class
                     return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
                 }
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -821,15 +929,24 @@ namespace Bi_Os_Coop.Class
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateReviewScore(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateReviewScore(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe beoordeling van de film {tempMovie.name}? (0-10.0)");
                 string newScore = loginscherm.newwayoftyping();
-                if (newScore == "1go2to3main4menu5") { goto exit; }
+                if (newScore == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 try
                 {
                     double ageing = Convert.ToDouble(newScore);
-                    if (ageing < 0 || ageing > 10) { Convert.ToInt32(ErrorMaker()); }
+                    if (ageing < 0 || ageing > 10)
+                    {
+                        Convert.ToInt32(ErrorMaker());
+                    }
+
                     tempMovie.beoordeling = ageing;
                 }
                 catch (FormatException)
@@ -841,7 +958,7 @@ namespace Bi_Os_Coop.Class
                     return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
                 }
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -851,18 +968,23 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateDescription(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateDescription(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe beschrijving van de film {tempMovie.name}?");
                 string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-                if (newName == "1go2to3main4menu5") { goto exit; }
+                if (newName == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 tempMovie.beschrijving = newName;
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -872,18 +994,24 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-            public static Tuple<string, Films, MovieInterpreter> UpdateLanguage(string json, Films jsonFilms, MovieInterpreter tempMovie)
+
+            public static Tuple<string, Films, MovieInterpreter> UpdateLanguage(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.Write("Terug naar het Update Menu (Esc)\n\n");
                 Console.WriteLine($"Wat is de nieuwe taal van de film {tempMovie.name}?");
                 string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-                if (newName == "1go2to3main4menu5") { goto exit; }
+                if (newName == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 tempMovie.taal = newName;
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -893,20 +1021,25 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateTrailer(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateTrailer(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.Clear();
                 Console.Write("Terug naar het Update Menu (Esc)\n\n");
                 Console.WriteLine($"Wat is de nieuwe trailer van de film {tempMovie.name}?");
                 string newTrailer = loginscherm.newwayoftyping();
-                if (newTrailer == "1go2to3main4menu5") { goto exit; }
+                if (newTrailer == "1go2to3main4menu5")
+                {
+                    goto exit;
+                }
+
                 tempMovie.trailer = newTrailer;
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -916,19 +1049,28 @@ namespace Bi_Os_Coop.Class
                 Console.ForegroundColor = ConsoleColor.Gray;
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-            exit:
+                exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-            public static Tuple<string, Films, MovieInterpreter> UpdateMovieTime(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            public static Tuple<string, Films, MovieInterpreter> UpdateMovieTime(string json, Films jsonFilms,
+                MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de tijdsduur van de film {tempMovie.name}?");
                 string newMinimumAge = loginscherm.newwayoftyping();
-                if (newMinimumAge == "1go2to3main4menu5") { return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie); }
+                if (newMinimumAge == "1go2to3main4menu5")
+                {
+                    return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+                }
+
                 try
                 {
                     int newMovieTime = Convert.ToInt32(newMinimumAge);
-                    if (newMovieTime < 0) { Convert.ToInt32(ErrorMaker()); }
+                    if (newMovieTime < 0)
+                    {
+                        Convert.ToInt32(ErrorMaker());
+                    }
+
                     tempMovie.MovieTime = newMovieTime;
                 }
                 catch (FormatException)
@@ -940,7 +1082,7 @@ namespace Bi_Os_Coop.Class
                     return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
                 }
 
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
 
@@ -952,12 +1094,13 @@ namespace Bi_Os_Coop.Class
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
 
-    
+
             public static void DeleteMovie(string json, Films jsonFilms, string movieToRemove)
             {
                 CPeople.Admin admin = new CPeople.Admin();
 
-                int index = jsonFilms.movieList.FindIndex(movie => loginscherm.RemoveSpecialCharacters(movie.name) == movieToRemove);
+                int index = jsonFilms.movieList.FindIndex(movie =>
+                    loginscherm.RemoveSpecialCharacters(movie.name) == movieToRemove);
                 if (index == -1)
                 {
                     Console.ForegroundColor = ConsoleColor.Yellow;
@@ -979,11 +1122,16 @@ namespace Bi_Os_Coop.Class
                     {
                         keypressed = Console.ReadKey(true).Key;
                     }
-                    if (keypressed == ConsoleKey.Escape) { goto exit; }
+
+                    if (keypressed == ConsoleKey.Escape)
+                    {
+                        goto exit;
+                    }
+
                     if (keypressed == ConsoleKey.J)
                     {
                         jsonFilms.movieList.RemoveAt(index);
-                        JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                        JsonSerializerOptions opt = new JsonSerializerOptions {WriteIndented = true};
                         json = JsonSerializer.Serialize(jsonFilms, opt);
                         Json.WriteJson("Films", json);
 
@@ -998,9 +1146,11 @@ namespace Bi_Os_Coop.Class
                         Console.Clear();
                         adminMenu.hoofdPagina();
                     }
-                exit: ; //?
+
+                    exit: ; //?
                 }
             }
+
             /// <summary>
             /// Berekent hoeveel pauzes er tijdens een film gehouden moeten worden. Bij een film die 150 duurt, wordt 1 pauze gehouden, voor elk uur wat daar bovenop komt wordt een extra pauze gehouden.
             /// Returnt een integer die het aantal pauzes weergeeft.
@@ -1014,7 +1164,9 @@ namespace Bi_Os_Coop.Class
                 {
                     amountOfBreaks = (movieTime - 150) / 60 + 1;
                 }
+
                 return amountOfBreaks;
             }
         }
+    }
 }
\ No newline at end of file
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 36d6d7e..00aa999 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -192,10 +192,10 @@ namespace Bi_Os_Coop.Class
         private int stoelWidth { get; set; }
         public string date { get; set; }
         public string time { get; set; }
-        public MovieInterpreter film { get; set; } //Film film {get; set;}
+        public MovieMenu.MovieInterpreter film { get; set; } //Film film {get; set;}
         public List<Stoel> stoelen { get; set; }
 
-        public void setZaal(string date, string time, int totalStools, MovieInterpreter film = null)
+        public void setZaal(string date, string time, int totalStools, MovieMenu.MovieInterpreter film = null)
         {
             this.date = date;
             this.time = time;

commit 26558c2ca98cf8af84d21d5121445c4358612018
Merge: d6fbeff b98d05a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon Jun 7 12:27:37 2021 +0200

    bruh

commit d6fbeff2ccadbd89808ffbac87012ec237f8b418
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon Jun 7 12:23:27 2021 +0200

    Henk
---
 Class/MovieMenu.cs | 125 +++++++++++++++++++++++++++--------------------------
 Class/Zalen.cs     |   6 +--
 Json/Zalen.json    |   2 +-
 3 files changed, 67 insertions(+), 66 deletions(-)

diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index a6a9bea..f0f8d4d 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -105,7 +105,7 @@ namespace Bi_Os_Coop.Class
         //functie die de ingetypte film zoekt in de JSON met alle films
         public static Tuple<bool, int> search(string searchmov, List<string> mainmenulist = null, bool InMovieMenu = true)
         {
-            string json = Json.ReadJson("Films"); 
+            string json = Json.ReadJson("Films");
             Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
             List<string> moviesearchlist = new List<string>();
             if (InMovieMenu)
@@ -336,7 +336,8 @@ namespace Bi_Os_Coop.Class
                         }
                     } // Idiot Esception
                 }
-                if (selectedzalen.Count() != 0)
+                MainMenuThings mmt = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson("MainMenu"));
+                if (selectedzalen.Count() != 0 && mmt.user.id > 0 && mmt.user.isPerson())
                 {
                     //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
                     if (keypressed == ConsoleKey.J)
@@ -442,9 +443,9 @@ namespace Bi_Os_Coop.Class
                     Console.WriteLine("7. Taal aanpassen");
                     Console.WriteLine("8. Beschrijving aanpassen");
                     Console.WriteLine("9. Trailer aanpassen");
-    
+
                     ConsoleKeyInfo keyReaded = Console.ReadKey();
-    
+
                     switch (keyReaded.Key)
                     {
                         case ConsoleKey.D1:
@@ -514,46 +515,46 @@ namespace Bi_Os_Coop.Class
                     {
                         return Tuple.Create(false, noMovie);
                     }
-    
+
                 }
                 catch (Exception)
                 {
                     return Tuple.Create(false, noMovie);
                 }
             }
-    
+
             public static MovieInterpreter AddMovie()
             {
                 string json = Json.ReadJson("Films");
                 Films MovieLibrary = JsonSerializer.Deserialize<Films>(json);
-    
+
                 Console.WriteLine("Voeg hier een nieuwe film toe.");
                 Console.WriteLine("Naam film:");
                 string naamFilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
                 if (naamFilm == "1go2to3main4menu5") { goto exit; }
-    
+
                 Console.WriteLine("Releasedatum film: (dd/mm/yyyy)");
                 string releasedatumFilm = loginscherm.getdate();
                 if (releasedatumFilm == "1go2to3main4menu5") { goto exit; }
-    
+
                 Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
                 Console.WriteLine("Genres film:");
                 string genres = loginscherm.newwayoftyping();
                 if (genres == "1go2to3main4menu5") { goto exit; }
                 List<string> genresFilm = genres.Split(',').Select(p => p.Trim()).ToList();
-    
+
                 for (int i = 0; i < genresFilm.Count; i++)
                 {
                     genresFilm[i] = loginscherm.FirstCharToUpper(genresFilm[i]);
                 }
-    
+
                 Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
                 Console.WriteLine("Acteurs film:");
                 string acteurs = loginscherm.newwayoftyping();
-    
+
                 if (acteurs == "1go2to3main4menu5") { goto exit; }
                 List<string> acteursFilm = acteurs.Split(',').Select(p => p.Trim()).ToList();
-    
+
                 for (int i = 0; i < acteursFilm.Count; i++)
                 {
                     List<string> tempActeur = acteursFilm[i].Split(' ').ToList();
@@ -563,7 +564,7 @@ namespace Bi_Os_Coop.Class
                     }
                     acteursFilm[i] = string.Join(" ", tempActeur);
                 }
-    
+
                 Console.WriteLine("Minimumleeftijd film:");
                 var minimumleeftijd = CPeople.converttoint(loginscherm.newwayoftyping());
                 int minimumLeeftijd;
@@ -581,7 +582,7 @@ namespace Bi_Os_Coop.Class
                 Console.WriteLine("Taal film:");
                 string taalfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
                 if (taalfilm == "1go2to3main4menu5") { goto exit; }
-    
+
                 Console.WriteLine("Tijdsduur film in minuten:");
                 var movietime = CPeople.converttoint(loginscherm.newwayoftyping());
                 int movieTime;
@@ -592,23 +593,23 @@ namespace Bi_Os_Coop.Class
                 Console.WriteLine("Beschrijving film:");
                 string beschrijvingfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
                 if (beschrijvingfilm == "1go2to3main4menu5") { goto exit; }
-    
+
                 Console.WriteLine("Trailer film:");
                 string trailerfilm = loginscherm.newwayoftyping();
                 if (trailerfilm == "1go2to3main4menu5") { goto exit; }
-    
+
                 if (MovieLibrary.movieList.Count > 0)
                 {
                     var lastMovieInList = MovieLibrary.movieList[MovieLibrary.movieList.Count - 1];
                     MovieInterpreter Movie = new MovieInterpreter();
                     Movie.setFilm(lastMovieInList.movieid + 1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
-    
+
                     MovieLibrary.addFilm(Movie);
                     JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                     json = JsonSerializer.Serialize(MovieLibrary, opt);
-    
+
                     Json.WriteJson("Films", json);
-    
+
                     Console.Clear();
                     MainMenu.Logo();
                     Console.ForegroundColor = ConsoleColor.Green;
@@ -621,13 +622,13 @@ namespace Bi_Os_Coop.Class
                 {
                     MovieInterpreter Movie = new MovieInterpreter();
                     Movie.setFilm(1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
-    
+
                     MovieLibrary.addFilm(Movie);
                     JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                     json = JsonSerializer.Serialize(MovieLibrary, opt);
-    
+
                     Json.WriteJson("Films", json);
-    
+
                     Console.Clear();
                     MainMenu.Logo();
                     Console.ForegroundColor = ConsoleColor.Green;
@@ -636,25 +637,25 @@ namespace Bi_Os_Coop.Class
                     Console.ForegroundColor = ConsoleColor.Gray;
                     return Movie;
                 }
-    
+
             exit:
                 MovieInterpreter Movie2 = new MovieInterpreter();
                 Movie2.setFilm(234733, "1go2to3main4menu5", "", new List<string>(), 999, 888, new List<string>(), 777, "", "");
                 return Movie2;
             }
-    
-    
+
+
             public static Tuple<string, Films, MovieInterpreter> UpdateNameMovie(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe naam van de film {tempMovie.name}?");
                 string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
                 if (newName == "1go2to3main4menu5") { goto exit; }
                 tempMovie.name = newName;
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("Film naam is succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -664,18 +665,18 @@ namespace Bi_Os_Coop.Class
             exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static Tuple<string, Films, MovieInterpreter> UpdateReleaseDate(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe releasedatum van de film {tempMovie.name}?");
                 string newReleaseDate = loginscherm.getdate();
                 if (newReleaseDate == "1go2to3main4menu5") { goto exit; }
                 tempMovie.releasedate = newReleaseDate;
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("De releasedatum is succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -685,28 +686,28 @@ namespace Bi_Os_Coop.Class
             exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static Tuple<string, Films, MovieInterpreter> UpdateGenres(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is/zijn de nieuwe genre(s) van de film {tempMovie.name}?");
                 Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
                 Console.WriteLine("Genres film:");
                 string genres = loginscherm.newwayoftyping();
-    
+
                 if (genres == "1go2to3main4menu5") { goto exit; }
-    
+
                 List<string> newGenres = genres.Split(',').Select(p => p.Trim()).ToList();
                 for (int i = 0; i < newGenres.Count; i++)
                 {
                     newGenres[i] = loginscherm.FirstCharToUpper(newGenres[i]);
                 }
-    
+
                 tempMovie.genres = newGenres;
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("De genre(s) is/zijn succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -716,16 +717,16 @@ namespace Bi_Os_Coop.Class
             exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static Tuple<string, Films, MovieInterpreter> UpdateActors(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wie zijn de nieuwe acteurs van de film {tempMovie.name}?");
                 Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
                 Console.WriteLine("Acteurs film:");
                 string actors = loginscherm.newwayoftyping();
-    
+
                 if (actors == "1go2to3main4menu5") { goto exit; }
-    
+
                 List<string> newActors = actors.Split(',').Select(p => p.Trim()).ToList();
                 for (int i = 0; i < newActors.Count; i++)
                 {
@@ -736,13 +737,13 @@ namespace Bi_Os_Coop.Class
                     }
                     newActors[i] = string.Join(" ", tempActeur);
                 }
-    
+
                 tempMovie.acteurs = newActors;
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("De acteur(s) is/zijn succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -752,12 +753,12 @@ namespace Bi_Os_Coop.Class
             exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static dynamic ErrorMaker()
             {
                 return "2a";
             }
-    
+
             public static Tuple<string, Films, MovieInterpreter> UpdateMinimumAge(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe minimum leeftijd van de film {tempMovie.name}? (0-18)");
@@ -777,11 +778,11 @@ namespace Bi_Os_Coop.Class
                     Console.ForegroundColor = ConsoleColor.Gray;
                     return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
                 }
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("De minimumleeftijd is succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -789,7 +790,7 @@ namespace Bi_Os_Coop.Class
                 Console.Clear();
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static Tuple<string, Films, MovieInterpreter> UpdateReviewScore(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe beoordeling van de film {tempMovie.name}? (0-10.0)");
@@ -809,11 +810,11 @@ namespace Bi_Os_Coop.Class
                     Console.ForegroundColor = ConsoleColor.Gray;
                     return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
                 }
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("De beoordeling is succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -823,18 +824,18 @@ namespace Bi_Os_Coop.Class
             exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static Tuple<string, Films, MovieInterpreter> UpdateDescription(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.WriteLine($"Wat is de nieuwe beschrijving van de film {tempMovie.name}?");
                 string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
                 if (newName == "1go2to3main4menu5") { goto exit; }
                 tempMovie.beschrijving = newName;
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("Film beschrijving is succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -851,11 +852,11 @@ namespace Bi_Os_Coop.Class
                 string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
                 if (newName == "1go2to3main4menu5") { goto exit; }
                 tempMovie.taal = newName;
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("Film taal is succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -865,7 +866,7 @@ namespace Bi_Os_Coop.Class
             exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static Tuple<string, Films, MovieInterpreter> UpdateTrailer(string json, Films jsonFilms, MovieInterpreter tempMovie)
             {
                 Console.Clear();
@@ -874,11 +875,11 @@ namespace Bi_Os_Coop.Class
                 string newTrailer = loginscherm.newwayoftyping();
                 if (newTrailer == "1go2to3main4menu5") { goto exit; }
                 tempMovie.trailer = newTrailer;
-    
+
                 JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                 json = JsonSerializer.Serialize(jsonFilms, opt);
                 Json.WriteJson("Films", json);
-    
+
                 Console.ForegroundColor = ConsoleColor.Green;
                 Console.WriteLine("Film trailer is succesvol gewijzigd.");
                 Thread.Sleep(1000);
@@ -888,11 +889,11 @@ namespace Bi_Os_Coop.Class
             exit:
                 return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
             }
-    
+
             public static void DeleteMovie(string json, Films jsonFilms, string movieToRemove)
             {
                 CPeople.Admin admin = new CPeople.Admin();
-    
+
                 int index = jsonFilms.movieList.FindIndex(movie => loginscherm.RemoveSpecialCharacters(movie.name) == movieToRemove);
                 if (index == -1)
                 {
@@ -909,7 +910,7 @@ namespace Bi_Os_Coop.Class
                     Console.ForegroundColor = ConsoleColor.Red;
                     Console.WriteLine("Weet u zeker dat u hem wilt verwijderen? (j/n)");
                     Console.ForegroundColor = ConsoleColor.Gray;
-    
+
                     ConsoleKey keypressed = Console.ReadKey(true).Key;
                     while (keypressed != ConsoleKey.J && keypressed != ConsoleKey.N && keypressed != ConsoleKey.Escape)
                     {
@@ -922,7 +923,7 @@ namespace Bi_Os_Coop.Class
                         JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
                         json = JsonSerializer.Serialize(jsonFilms, opt);
                         Json.WriteJson("Films", json);
-    
+
                         Console.ForegroundColor = ConsoleColor.Green;
                         Console.WriteLine("Film is succesvol verwijderd.");
                         Thread.Sleep(1000);
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 3e90109..36d6d7e 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -12,7 +12,7 @@ namespace Bi_Os_Coop.Class
         public void menu(List<Zaal> selected)
         {
             writeZalen(selected);
-            if (selected.Count != 0)
+            if (selected.Count == 0)
             {
                 return;
             }
@@ -158,7 +158,7 @@ namespace Bi_Os_Coop.Class
             indexs[0] = index;
             zaal.occupyStool(indexs, orderer);
         }
-        
+
         public void Reserveseats(int[] index, CPeople.Person orderer, Zaal zaal)
         {
             zaal.occupyStool(index, orderer);
@@ -401,7 +401,7 @@ namespace Bi_Os_Coop.Class
                 this.isOccupied = false;
                 this.Price = prijs;
             }
-            
+
         }
 
         public price stoolworth(int index, int size)
diff --git a/Json/Zalen.json b/Json/Zalen.json
index a5cd137..c1072ec 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -1,7 +1,7 @@
 {
   "zalenList": [
     {
-      "date": "26/05/2021",
+      "date": "26/06/2021",
       "time": "17:00",
       "film": {
         "movieid": 1,

commit 14f97d6d78f6a3f4799c90ec95209478509c310b
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu May 27 10:23:49 2021 +0200

    UI
---
 Bi-Os-Coop.sln | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/Bi-Os-Coop.sln b/Bi-Os-Coop.sln
index 7860626..dacd5f2 100644
--- a/Bi-Os-Coop.sln
+++ b/Bi-Os-Coop.sln
@@ -5,6 +5,8 @@ VisualStudioVersion = 16.0.30804.86
 MinimumVisualStudioVersion = 10.0.40219.1
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Bi-Os-Coop", "Bi-Os-Coop.csproj", "{817449BE-5140-4D69-8EE0-5BD9EF65B05F}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Bi-Os-Coop-UI", "..\Bi-Os-Coop-UI\Bi-Os-Coop-UI.csproj", "{55C27C8C-C72F-44C7-AFFE-1FB1C591D423}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -15,6 +17,10 @@ Global
 		{817449BE-5140-4D69-8EE0-5BD9EF65B05F}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{817449BE-5140-4D69-8EE0-5BD9EF65B05F}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{817449BE-5140-4D69-8EE0-5BD9EF65B05F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{55C27C8C-C72F-44C7-AFFE-1FB1C591D423}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{55C27C8C-C72F-44C7-AFFE-1FB1C591D423}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{55C27C8C-C72F-44C7-AFFE-1FB1C591D423}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{55C27C8C-C72F-44C7-AFFE-1FB1C591D423}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE

commit 99d2c671e0e9fa52498683208bf897caee1bf08f
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed May 26 16:57:52 2021 +0200

    FIX VOOR INFINTE LOOP
---
 Class/MovieMenu.cs | 54 +++++++++++++++++++++++++++++++++---------------------
 Class/Zalen.cs     | 15 +++++++++++++--
 2 files changed, 46 insertions(+), 23 deletions(-)

diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 7cc3467..a6a9bea 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -288,7 +288,6 @@ namespace Bi_Os_Coop.Class
                 return null;
             }
         }
-
         public static void inputcheck(string movsearch, List<string> mainmenulist = null)
         {
             Tuple<string, bool, string, string, List<string>> MovieInformation = showmov(movsearch, mainmenulist);
@@ -298,17 +297,27 @@ namespace Bi_Os_Coop.Class
                 string trailer = MovieInformation.Item1;
                 string moviename = MovieInformation.Item3;
                 //hierna moet als er ja geselecteerd is het resrvatie scherm komen!
-                Console.ForegroundColor = ConsoleColor.White;
-                Console.Write("\nWilt u deze film reserveren? (");
-                Console.ForegroundColor = ConsoleColor.Green;
-                Console.Write("J");
-                Console.ForegroundColor = ConsoleColor.White;
-                Console.Write("/");
-                Console.ForegroundColor = ConsoleColor.Red;
-                Console.Write("N");
-                Console.ForegroundColor = ConsoleColor.White;
-                Console.Write(")\n");
+                IEnumerable<Zaal> selectedzalen = Zalen.FromJson().zalenList.Where(movie => movie.film.name.ToLower() == moviename.ToLower() && DateTime.Parse(movie.date) >= DateTime.Today); //fixt ook de out dated films
+                if (selectedzalen.Count() != 0)
+                {
 
+                    Console.ForegroundColor = ConsoleColor.White;
+                    Console.Write("\nWilt u deze film reserveren? (");
+                    Console.ForegroundColor = ConsoleColor.Green;
+                    Console.Write("J");
+                    Console.ForegroundColor = ConsoleColor.White;
+                    Console.Write("/");
+                    Console.ForegroundColor = ConsoleColor.Red;
+                    Console.Write("N");
+                    Console.ForegroundColor = ConsoleColor.White;
+                    Console.Write(")\n");
+                }
+                else
+                {
+                    Console.ForegroundColor = ConsoleColor.Red;
+                    Console.Write($"Ask an Admin to make a new showing for {moviename}\n");
+                    Console.ForegroundColor = ConsoleColor.White;
+                }
                 ConsoleKey keypressed = Console.ReadKey(true).Key;
                 if (hastrailer)
                 {
@@ -327,21 +336,24 @@ namespace Bi_Os_Coop.Class
                         }
                     } // Idiot Esception
                 }
-
-                //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
-                if (keypressed == ConsoleKey.J)
+                if (selectedzalen.Count() != 0)
                 {
-                    string json = Json.ReadJson("Zalen");
-                    Zalen zalen = Zalen.FromJson(json);
-                    Tuple<bool, List<Zaal>> zalenMetNaam = zalen.selectZalen(moviename);
-                    zalen.menu(zalenMetNaam.Item2);
-                    json = zalen.ToJson();
-                    Json.WriteJson("Zalen", json);
+                    //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
+                    if (keypressed == ConsoleKey.J)
+                    {
+                        Zalen zalen = Zalen.FromJson();
+                        Tuple<bool, List<Zaal>> zalenMetNaam = zalen.selectZalen(moviename);
+                        if (zalenMetNaam.Item1)
+                        {
+                            zalen.menu(zalenMetNaam.Item2);
+                            var json = zalen.ToJson();
+                            Json.WriteJson(Json.Zalen, json);
+                        }
+                    }
                 }
             }
         }
     }
-
     public class MovieInterpreter
     {
         public int movieid { get; set; }
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 8925824..3e90109 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -12,6 +12,10 @@ namespace Bi_Os_Coop.Class
         public void menu(List<Zaal> selected)
         {
             writeZalen(selected);
+            if (selected.Count != 0)
+            {
+                return;
+            }
             Console.WriteLine("\nselect the number of the timeframe and date you want to order");
             string temp = Console.ReadLine();
             try
@@ -99,7 +103,9 @@ namespace Bi_Os_Coop.Class
             //List<Zaal> showingzaal = this.zalenList;
             foreach (Zaal zaal in selected)
             {
+                Console.ForegroundColor = ConsoleColor.Red;
                 Console.Write($"\n{counter} \t");
+                Console.ForegroundColor = ConsoleColor.White;
                 Console.Write($"date:{zaal.date} \t");
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film.name} \t");
@@ -126,7 +132,12 @@ namespace Bi_Os_Coop.Class
             JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
             return JsonSerializer.Serialize(this, opt);
         }
-
+        public static Zalen FromJson()
+        {
+            string json = Json.ReadJson(Json.Zalen);
+            Zalen temp = JsonSerializer.Deserialize<Zalen>(json);
+            return temp;
+        }
         public static Zalen FromJson(string json) => JsonSerializer.Deserialize<Zalen>(json);
         public void Reserveseats(int[] indexes, CPeople.Person orderer, string date, string time)
         {
@@ -159,7 +170,7 @@ namespace Bi_Os_Coop.Class
         /// <returns></returns>
         public Tuple<bool, List<Zaal>> selectZalen(string naam)
         {
-            IEnumerable<Zaal> selectedzalen = zalenList.Where(movie => movie.film.name.ToLower() == naam.ToLower() && DateTime.Parse(movie.date) >= DateTime.Now); //fixt ook de out dated films
+            IEnumerable<Zaal> selectedzalen = zalenList.Where(movie => movie.film.name.ToLower() == naam.ToLower() && DateTime.Parse(movie.date) >= DateTime.Today); //fixt ook de out dated films
             if (selectedzalen.Count() != 0)
                 return Tuple.Create(true, selectedzalen.ToList());
             else

commit 5b63e6898db55170c8d8896016518a2e43c8fe4b
Merge: 11b7ebc f0fa8d4
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed May 26 15:51:07 2021 +0200

    Merge remote-tracking branch 'origin/master'

commit 11b7ebc2b71e70d4ab5a79cb573a9498cabd4912
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed May 26 15:50:50 2021 +0200

    aaaaaaaaaaaaaaaaaaah
---
 Class/Zalen.cs | 2 +-
 Program.cs     | 4 ----
 2 files changed, 1 insertion(+), 5 deletions(-)

diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 1dfbf18..8925824 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -48,7 +48,7 @@ namespace Bi_Os_Coop.Class
                 string json1 = this.ToJson();
                 Json.WriteJson("Zalen", json1);
             }
-            catch (FormatException) { Console.WriteLine("Invalid Number"); menu(selected); }
+            catch (Exception ex) { Console.WriteLine("Invalid Number"); menu(selected); }
 
 
         }
diff --git a/Program.cs b/Program.cs
index 472a5c5..b810a99 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,10 +1,6 @@
 #define DEBUG
 #undef DEBUG
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Bi_Os_Coop.Class;
 using static Bi_Os_Coop.Class.WatchLists;
 

commit c703bf4fe920ddb471af96401703a31ccf852327
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed May 26 10:17:11 2021 +0200

    pleaseeeeee end me
---
 Bi-Os-Coop.csproj   |  2 ++
 Class/Json.cs       |  5 ++++
 Class/MovieMenu.cs  | 25 +++++++++++++++--
 Class/WatchList.cs  | 77 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 Json/WatchList.json | 12 +++++++++
 Program.cs          |  8 ++++--
 6 files changed, 125 insertions(+), 4 deletions(-)

diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index d7a0196..d12d72a 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -83,6 +83,7 @@
     <Compile Include="Class\MovieMenu.cs" />
     <Compile Include="Class\LevenshteinDistance.cs" />
     <Compile Include="Class\ViewReservations.cs" />
+    <Compile Include="Class\WatchList.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="Class\Registerscreen.cs" />
@@ -100,6 +101,7 @@
   </ItemGroup>
   <ItemGroup>
     <Content Include="Bi_Os_Coop_groot_.ico" />
+    <Content Include="Json\WatchList.json" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
   <ProjectExtensions />
diff --git a/Class/Json.cs b/Class/Json.cs
index eb43c85..2fc87e0 100644
--- a/Class/Json.cs
+++ b/Class/Json.cs
@@ -5,6 +5,11 @@ namespace Bi_Os_Coop.Class
 {
     class Json
     {
+        public const string accounts = "Accounts";
+        public const string Films = "Films";
+        public const string MainMenu = "MainMenu";
+        public const string WatchList = "WatchList";
+        public const string Zalen = "Zalen";
         /*
          * How to use Json class
          * for reading and writing you only need the name of the file in Json folder
diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 8788d33..93f7f99 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -106,7 +106,7 @@ namespace Bi_Os_Coop.Class
 
             mainPagina(index);
         }
-
+#error please fucking fix dit, waarom een VOID laat het de film returnen
         //functie die de ingetypte film zoekt in de JSON met alle films
         public static void search(string searchmov, List<string> mainmenulist = null)
         {
@@ -120,7 +120,7 @@ namespace Bi_Os_Coop.Class
             }
             catch (Exception)
             {
-
+                // ignored
             }
 
             searchmov = searchmov.ToLower().Replace(" ", "");
@@ -375,6 +375,27 @@ namespace Bi_Os_Coop.Class
                 movieList.Add(newMovie);
             }
         }
+        public string ToJson(bool write = false)
+        {
+            if (write)
+            {
+                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+                string json = JsonSerializer.Serialize(this, opt);
+                Json.WriteJson("Films", json);
+                return null;
+            }
+            else
+            {
+                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+                return JsonSerializer.Serialize(this, opt);
+            }
+        }
+        public static Films FromJson(string json) => JsonSerializer.Deserialize<Films>(json);
+        public static Films FromJson()
+        {
+            string json = Json.ReadJson("Films");
+            return JsonSerializer.Deserialize<Films>(json);
+        }
     }
     public class MovieMethods
         {
diff --git a/Class/WatchList.cs b/Class/WatchList.cs
new file mode 100644
index 0000000..c125f42
--- /dev/null
+++ b/Class/WatchList.cs
@@ -0,0 +1,77 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text.Json;
+
+namespace Bi_Os_Coop.Class
+{
+    public class WatchLists
+    {
+        public List<WatchList> allWatchLists { get; set; }
+        
+        public void AddList()
+        {
+            
+            
+            Console.WriteLine("Welke film toevoegen aan je lijst?");
+            string naam = Console.ReadLine();
+            
+        }
+
+        public void AddList(string name)
+        {
+            MainMenuThings mmt = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson(Json.MainMenu)); //mmt.user; // is the current user
+            MovieInterpreter filmbijnaam = Films.FromJson().movieList.Single(movie => name != null && movie.name.ToLower() == name.ToLower());
+            if (mmt != null)
+            {
+                WatchList wl = new WatchList() {UserID = mmt.user.id, filmID = filmbijnaam.movieid};
+                AddList(wl);
+            }
+        }
+        public void AddList(WatchList wl)
+        {
+            if (allWatchLists == null)
+            {
+                List<WatchList> nlist = new List<WatchList> { wl };
+                allWatchLists = nlist;
+            }
+            else
+            {
+                allWatchLists.Add(wl);
+            }
+        }
+        /// <summary>
+        /// If write is true it will write object to json already
+        /// </summary>
+        /// <param name="write"></param>
+        /// <returns>null if write is true else it will return the json string</returns>
+        public string ToJson(bool write = false)
+        {
+            if (write)
+            {
+                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+                string json = JsonSerializer.Serialize(this, opt);
+                Json.WriteJson(Json.WatchList, json);
+                return null;
+            }
+            else
+            {
+                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+                return JsonSerializer.Serialize(this, opt);
+            }
+        }
+
+        public static WatchLists FromJson(string json) => JsonSerializer.Deserialize<WatchLists>(json);
+        public static WatchLists FromJson()
+        {
+            string json = Json.ReadJson(Json.WatchList);
+            WatchLists temp = JsonSerializer.Deserialize<WatchLists>(json);
+            return temp;
+        }
+    }
+    public class WatchList
+    {
+        public int UserID { get; set; }
+        public int filmID { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/Json/WatchList.json b/Json/WatchList.json
new file mode 100644
index 0000000..a9b7aa0
--- /dev/null
+++ b/Json/WatchList.json
@@ -0,0 +1,12 @@
+{
+  "allWatchLists": [
+    {
+      "UserID": 1,
+      "filmID": 1
+    },
+    {
+      "UserID": 1,
+      "filmID": 4
+    }
+  ]
+}
\ No newline at end of file
diff --git a/Program.cs b/Program.cs
index cc2fad5..472a5c5 100644
--- a/Program.cs
+++ b/Program.cs
@@ -6,6 +6,7 @@ using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
 using Bi_Os_Coop.Class;
+using static Bi_Os_Coop.Class.WatchLists;
 
 // dertigste test - Hajar
 
@@ -16,8 +17,11 @@ namespace Bi_Os_Coop
         static void Main(string[] args)
         {
             Console.WriteLine(ViewReservations.CheckWhichHall(342));
-            
-            
+
+            WatchLists wls  = FromJson();
+            wls.AddList();
+            wls.ToJson(true);
+            Console.ReadKey(true);
 #if (DEBUG)
 
             //#error Hold there Criminal scum

commit 8952cb8196a13d31d1a9e0d4b889de9a153b1d8d
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 16:42:09 2021 +0200

    someone fucked up and i wasn't it this time
---
 Json/MainMenu.json |    2 +-
 Json/Zalen.json    | 2753 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 2711 insertions(+), 44 deletions(-)

diff --git a/Json/MainMenu.json b/Json/MainMenu.json
index 897c585..7222085 100644
--- a/Json/MainMenu.json
+++ b/Json/MainMenu.json
@@ -8,7 +8,7 @@
     "phonenumber": "06123456789",
     "BookedMovies": null
   },
-  "sort": "name",
+  "sort": "rating",
   "reverse": false,
   "login": "Admin",
   "language": "Nederlands"
diff --git a/Json/Zalen.json b/Json/Zalen.json
index 91d5b17..a5cd137 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -1,10 +1,48 @@
 {
   "zalenList": [
     {
-      "stoelWidth": 10,
-      "date": "30-01-2021",
-      "time": "13:00",
+      "date": "26/05/2021",
+      "time": "17:00",
+      "film": {
+        "movieid": 1,
+        "name": "JsonBjorn",
+        "releasedate": "14/04/2021",
+        "genres": [
+          "Actie",
+          " Thriller"
+        ],
+        "leeftijd": 13,
+        "beoordeling": 8,
+        "acteurs": [
+          "Json Bjorn",
+          "Henkie Henk"
+        ],
+        "taal": "Engels",
+        "beschrijving": "De gevaarlijkste voormalige piloot van de KLM wordt uit zijn schuilplaats gehaald om meer explosieve waarheden over zijn verleden te ontdekken.",
+        "trailer": "https://www.youtube.com/watch?v=v71ce1Dqqns",
+        "MovieTime": 0
+      },
       "stoelen": [
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -51,8 +89,8 @@
           "Price": 10
         },
         {
-          "isOccupied": true,
-          "isOccupiedBy": 69,
+          "isOccupied": false,
+          "isOccupiedBy": 1,
           "Price": 10
         },
         {
@@ -115,6 +153,41 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -148,62 +221,62 @@
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
@@ -235,6 +308,36 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -263,72 +366,72 @@
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
@@ -355,6 +458,36 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -383,52 +516,72 @@
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
         },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
-          "Price": 10
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
         },
         {
           "isOccupied": false,
@@ -455,6 +608,36 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -475,6 +658,86 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -495,6 +758,31 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -504,9 +792,2388 @@
           "isOccupied": false,
           "isOccupiedBy": 1,
           "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
         }
-      ],
-      "film": "Miauwer"
+      ]
     }
   ]
 }
\ No newline at end of file

commit 9dc045ce635d71c9d8f8cc0e6b0777e13ce6fde1
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 16:07:12 2021 +0200

    Beautify
---
 Class/CPeople.cs         |  8 +++-----
 Class/MovieMenu.cs       |  3 +--
 Class/PasswordMethods.cs |  6 ++----
 Class/Registerscreen.cs  | 12 ++++--------
 Class/Zalen.cs           | 39 +++------------------------------------
 Class/adminMenu.cs       |  6 ++----
 Class/loginscherm.cs     |  3 +--
 7 files changed, 16 insertions(+), 61 deletions(-)

diff --git a/Class/CPeople.cs b/Class/CPeople.cs
index 79ce048..f43d146 100644
--- a/Class/CPeople.cs
+++ b/Class/CPeople.cs
@@ -376,7 +376,7 @@ namespace Bi_Os_Coop.Class
                     }
                 }
 
-                MovieInterpreter film = new MovieInterpreter();
+                MovieInterpreter film;
                 while (true)
                 {
                     Console.WriteLine("Welke film wilt u dat er op dit tijdstip draait?");
@@ -409,10 +409,8 @@ namespace Bi_Os_Coop.Class
                 string time = Console.ReadLine();
 
                 zaal.setZaal(date, time, totalChairs, film); // someone has to fix this
-                Zalen zalen = new Zalen();
-                zalen = zalen.FromJson(Json.ReadJson("Zalen"));
+                Zalen zalen = Zalen.FromJson(Json.ReadJson("Zalen"));
                 zalen.AddZaal(zaal);
-
                 Json.WriteJson("Zalen", zalen.ToJson());
             exit:
                 return;
@@ -533,7 +531,7 @@ namespace Bi_Os_Coop.Class
                 JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
                 return JsonSerializer.Serialize(this, opt);
             }
-            public People FromJson(string json)
+            public static People FromJson(string json)
             {
                 return JsonSerializer.Deserialize<People>(json);
             }
diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 1eb7e38..8788d33 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -318,9 +318,8 @@ namespace Bi_Os_Coop.Class
             //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
             if (keypressed == ConsoleKey.J)
             {
-                Zalen zalen = new Zalen();
                 string json = Json.ReadJson("Zalen");
-                zalen = zalen.FromJson(json);
+                Zalen zalen = Zalen.FromJson(json);
                 Tuple<bool, List<Zaal>> zalenMetNaam = zalen.selectZalen(moviename);
                 zalen.menu(zalenMetNaam.Item2);
                 json = zalen.ToJson();
diff --git a/Class/PasswordMethods.cs b/Class/PasswordMethods.cs
index 9eb00ed..ed919db 100644
--- a/Class/PasswordMethods.cs
+++ b/Class/PasswordMethods.cs
@@ -102,8 +102,7 @@ namespace Bi_Os_Coop.Class
         public static bool MailLeeftijdCheck(string username, string age)
         {
             string account = Json.ReadJson("Accounts");
-            CPeople.People accounts = new CPeople.People();
-            accounts = accounts.FromJson(account);
+            CPeople.People accounts = CPeople.People.FromJson(account);
             try
             {
                 CPeople.Person persoon = accounts.peopleList.Single(person => person.email == username && person.age == age);
@@ -118,8 +117,7 @@ namespace Bi_Os_Coop.Class
         public static bool MailWachtwoordCheck(string username, string password)
         {
             string account = Json.ReadJson("Accounts");
-            CPeople.People accounts = new CPeople.People();
-            accounts = accounts.FromJson(account);
+            CPeople.People accounts = CPeople.People.FromJson(account);
             try
             {
                 CPeople.Person persoon = accounts.peopleList.Single(person => person.email == username && person.password == password);
diff --git a/Class/Registerscreen.cs b/Class/Registerscreen.cs
index cfc346a..7ed6d7b 100644
--- a/Class/Registerscreen.cs
+++ b/Class/Registerscreen.cs
@@ -14,8 +14,7 @@ namespace Bi_Os_Coop.Class
         {
             //In de 4 regels hieronder wordt alle info uit Accounts.json gehaald en in de variabele jsonPeople gestopt.
             string json = Json.ReadJson("Accounts");
-            CPeople.People jsonPeople = new CPeople.People();
-            jsonPeople = jsonPeople.FromJson(json);
+            CPeople.People jsonPeople = CPeople.People.FromJson(json);
             Console.WriteLine("Terug naar hoofdmenu (Esc)");
 
             //De if statements hieronder checken of de input van de gebruiker volgens format is en of het e-mailadres of het telefoonnummer al gekoppeld is aa een account.
@@ -62,8 +61,7 @@ namespace Bi_Os_Coop.Class
         public static int createID()
         {
             string json = Json.ReadJson("Accounts");
-            CPeople.People jsonPeople = new CPeople.People();
-            jsonPeople = jsonPeople.FromJson(json);
+            CPeople.People jsonPeople = CPeople.People.FromJson(json);
             string ret = "";
             Random randint = new Random();
 
@@ -151,8 +149,7 @@ namespace Bi_Os_Coop.Class
         public static bool emailCheck(string input)
         {
             string json = Json.ReadJson("Accounts");
-            CPeople.People jsonPeople = new CPeople.People();
-            jsonPeople = jsonPeople.FromJson(json);
+            CPeople.People jsonPeople = CPeople.People.FromJson(json);
             bool at = false;
             bool dot = false;
             if (lengthCheck(input)){
@@ -211,8 +208,7 @@ namespace Bi_Os_Coop.Class
         public static bool phoneCheck(string input)
         {
             string json = Json.ReadJson("Accounts");
-            CPeople.People jsonPeople = new CPeople.People();
-            jsonPeople = jsonPeople.FromJson(json);
+            CPeople.People jsonPeople = CPeople.People.FromJson(json);
             int value;
             if (input.Length == 10){
                 if (input.Substring(0, 2) == "06"){
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 8e0cbbc..1dfbf18 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -5,36 +5,6 @@ using System.Text.Json;
 
 namespace Bi_Os_Coop.Class
 {
-    internal static class ZalenExtender
-    {
-        public static void writeZalen(List<Zaal> selected)
-        {
-            //List<Zaal> showingzaal = this.zalenList;
-            int counter = 1;
-            foreach (Zaal zaal in selected)
-            {
-                Console.Write($"\n{counter} \t");
-                Console.Write($"date:{zaal.date} \t");
-                Console.Write($"time:{zaal.time} \t");
-                Console.Write($"movie:{zaal.film.name} \t");
-                Console.Write($"release Date:{zaal.film.releasedate} \t");
-                Console.Write($"Score:{zaal.film.beoordeling}\t");
-                if (zaal.stoelen.Count == 630)
-                {
-                    Console.Write("Zaal: 1\t");
-                }
-                else if (zaal.stoelen.Count == 342)
-                {
-                    Console.Write("Zaal: 2\t");
-                }
-                else
-                {
-                    Console.Write("Zaal: 3\t");
-                }
-                counter++;
-            }
-        }
-    }
     internal class Zalen
     {
         public List<Zaal> zalenList { get; set; }
@@ -157,11 +127,7 @@ namespace Bi_Os_Coop.Class
             return JsonSerializer.Serialize(this, opt);
         }
 
-        public Zalen FromJson(string json)
-        {
-            return JsonSerializer.Deserialize<Zalen>(json);
-        }
-
+        public static Zalen FromJson(string json) => JsonSerializer.Deserialize<Zalen>(json);
         public void Reserveseats(int[] indexes, CPeople.Person orderer, string date, string time)
         {
             Zaal gekozenzaal = zalenList.Single(movie => movie.date == date && movie.time == time);
@@ -181,12 +147,13 @@ namespace Bi_Os_Coop.Class
             indexs[0] = index;
             zaal.occupyStool(indexs, orderer);
         }
+        
         public void Reserveseats(int[] index, CPeople.Person orderer, Zaal zaal)
         {
             zaal.occupyStool(index, orderer);
         }
         /// <summary>
-        /// returned de zalen waar de film draai met x naam
+        /// returned tuple met True en de zalen waarbij de film draait met x naam
         /// </summary>
         /// <param name="naam"></param>
         /// <returns></returns>
diff --git a/Class/adminMenu.cs b/Class/adminMenu.cs
index b81dd83..d928258 100644
--- a/Class/adminMenu.cs
+++ b/Class/adminMenu.cs
@@ -110,9 +110,8 @@ namespace Bi_Os_Coop.Class
         {
             public bool coronaCheck()
             {
-                Zalen zalen = new Zalen();
                 string jsonZalen = Json.ReadJson("Zalen");
-                zalen = zalen.FromJson(jsonZalen);
+                Zalen zalen = Zalen.FromJson(jsonZalen);
                 foreach (Zaal zaal in zalen.zalenList)
                 {
                     List<Stoel> stoel = zaal.stoelen;
@@ -313,9 +312,8 @@ namespace Bi_Os_Coop.Class
 
         public void CoronaFilter(bool isCoronaFilter)
         {
-            Zalen zalen = new Zalen();
             string jsonZalen = Json.ReadJson("Zalen");
-            zalen = zalen.FromJson(jsonZalen);
+            Zalen zalen = Zalen.FromJson(jsonZalen);
             if (!isCoronaFilter)
             {
                 foreach (Zaal zaal in zalen.zalenList)
diff --git a/Class/loginscherm.cs b/Class/loginscherm.cs
index 72f3f0e..057f595 100644
--- a/Class/loginscherm.cs
+++ b/Class/loginscherm.cs
@@ -14,8 +14,7 @@ namespace Bi_Os_Coop.Class
         public static dynamic mailwachtvragen(string username, string password)
         {
             string account = Json.ReadJson("Accounts");
-            CPeople.People accounts = new CPeople.People();
-            accounts = accounts.FromJson(account);
+            CPeople.People accounts = CPeople.People.FromJson(account);
             try
             {
                 CPeople.Person persoon = accounts.peopleList.Single(henk => henk.email.ToLower() == username.ToLower() && henk.password == password);

commit f8c84723f10f6310950e0b48fddcc367b4b10389
Merge: da7f537 e3d1a4f
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 15:46:49 2021 +0200

    Merge remote-tracking branch 'origin/master'

commit da7f537e93f894ee2c9575f967d393c2cb8f0cf7
Merge: f7c82bf d6996f1
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 15:46:32 2021 +0200

    huge clean up

commit f7c82bf8de45a7a8f758225da660ce3cbf68a398
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 14:26:21 2021 +0200

    shit opgeruimd
---
 Bi-Os-Coop.csproj         |   4 -
 Class/AdminMethods.cs     | 305 ------------------------
 Class/MainMenu.cs         |  16 ++
 Class/MainMenuThings.cs   |  19 --
 Class/MovieInterpreter.cs |  51 -----
 Class/MovieMenu.cs        | 572 ++++++++++++++++++++++++++++++++++++++++++++++
 Class/MovieMethods.cs     | 535 -------------------------------------------
 Class/adminMenu.cs        | 300 ++++++++++++++++++++++++
 8 files changed, 888 insertions(+), 914 deletions(-)

diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index ce0ded5..d7a0196 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -76,13 +76,10 @@
   </ItemGroup>
   <ItemGroup>
     <Compile Include="Class\adminMenu.cs" />
-    <Compile Include="Class\AdminMethods.cs" />
     <Compile Include="Class\CPeople.cs" />
     <Compile Include="Class\Json.cs" />
     <Compile Include="Class\loginscherm.cs" />
     <Compile Include="Class\MainMenu.cs" />
-    <Compile Include="Class\MainMenuThings.cs" />
-    <Compile Include="Class\MovieInterpreter.cs" />
     <Compile Include="Class\MovieMenu.cs" />
     <Compile Include="Class\LevenshteinDistance.cs" />
     <Compile Include="Class\ViewReservations.cs" />
@@ -91,7 +88,6 @@
     <Compile Include="Class\Registerscreen.cs" />
     <Compile Include="Class\Zalen.cs" />
     <Compile Include="Class\PasswordMethods.cs" />
-    <Compile Include="Class\MovieMethods.cs" />
     <Compile Include="Class\UserProfile.cs" />
   </ItemGroup>
   <ItemGroup>
diff --git a/Class/AdminMethods.cs b/Class/AdminMethods.cs
deleted file mode 100644
index 64457d9..0000000
--- a/Class/AdminMethods.cs
+++ /dev/null
@@ -1,305 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-
-namespace Bi_Os_Coop.Class
-{
-        public class adminMethods
-        {
-            public bool coronaCheck()
-            {
-                Zalen zalen = new Zalen();
-                string jsonZalen = Json.ReadJson("Zalen");
-                zalen = zalen.FromJson(jsonZalen);
-                foreach (Zaal zaal in zalen.zalenList)
-                {
-                    List<Stoel> stoel = zaal.stoelen;
-                    foreach (Stoel stoel2 in stoel)
-                    {
-                        if (stoel2.isOccupied == true && stoel2.Price == 0 && stoel2.isOccupiedBy == 0)
-                        {
-                            return true;
-                        }
-                    }
-                }
-                return false;
-            }
-            //public void CoronaFilter(bool isCoronaFilter)
-            //{
-            //    Zalen zalen = new Zalen();
-            //    string jsonZalen = Json.ReadJson("Zalen");
-            //    zalen = zalen.FromJson(jsonZalen);
-            //    if (!isCoronaFilter)
-            //    {
-            //        foreach (Zaal zaal in zalen.zalenList)
-            //        {
-            //            int count = 0;
-            //            List<Stoel> stoel = zaal.stoelen;
-            //            foreach (Stoel stoel2 in stoel)
-            //            {
-            //                if (stoel2.isOccupied == true)
-            //                {
-            //                    count += 1;
-            //                }
-            //            }
-            //            Tuple<bool, int, int, int>[] occupiedStoelen = new Tuple<bool, int, int, int>[count];
-            //            int tempIndex = 0;
-            //            foreach (Stoel stoel2 in stoel)
-            //            {
-            //                if (stoel2.isOccupied == true && tempIndex < count)
-            //                {
-            //                    occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel.stoel2.price, stoel.FindIndex(a => a == stoel2));
-            //                }
-            //            }
-            //            zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
-            //            for (int j = 0, i = 0; j < 100; j++)
-            //            {
-            //                if (j % 3 == 0)
-            //                {
-            //                    zaal.stoelen[j].isOccupied = false;
-            //                    zaal.stoelen[j].isOccupiedBy = 1;
-            //                    zaal.stoelen[j].Price = 10;
-            //                }
-            //                else
-            //                {
-            //                    zaal.stoelen[j].isOccupied = true;
-            //                    zaal.stoelen[j].isOccupiedBy = 0;
-            //                    zaal.stoelen[j].Price = 0;
-            //                }
-            //                int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
-            //                if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
-            //                {
-            //                    zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
-            //                    zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
-            //                    zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
-            //                    i++;
-            //                }
-            //            }
-            //            Json.WriteJson("Zalen", zalen.ToJson());
-            //        }
-            //    }
-            //    else
-            //    {
-            //        foreach (Zaal zaal in zalen.zalenList)
-            //        {
-            //            int count = 0;
-            //            List<Stoel> stoel = zaal.stoelen;
-            //            foreach (Stoel stoel2 in stoel)
-            //            {
-            //                if (stoel2.isOccupied == true && stoel2.Price != 0)
-            //                {
-            //                    count += 1;
-            //                }
-            //            }
-            //            Tuple<bool, int, double, int>[] occupiedStoelen = new Tuple<bool, int, double, int>[count];
-            //            int tempIndex = 0;
-            //            foreach (Stoel stoel2 in stoel)
-            //            {
-            //                if (stoel2.isOccupied == true && stoel2.Price != 0 && tempIndex < count)
-            //                {
-            //                    occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
-            //                }
-            //            }
-            //            zaal.setZaal(10, zaal.date, zaal.time, 100, zaal.film);
-            //            for (int j = 0, i = 0; j < 100; j++)
-            //            {
-            //                int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
-            //                if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
-            //                {
-            //                    zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
-            //                    zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
-            //                    zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
-            //                    i++;
-            //                }
-            //            }
-            //            Json.WriteJson("Zalen", zalen.ToJson());
-            //        }
-            //    }
-            //}
-
-            //public Tuple<int, bool[]> CountCinemaHalls()
-            //{
-            //    int zalenAmount = 0;
-            //    Zalen zalen = new Zalen();
-            //    string jsonZalen = Json.ReadJson("Zalen");
-            //    zalen = zalen.FromJson(jsonZalen);
-            //    foreach (Zaal zaal in zalen.zalenList)
-            //    {
-            //        zalenAmount++;
-            //    }
-            //    if (zalenAmount == 0) { return null; }
-            //    bool[] delete = new bool[zalenAmount];
-            //    int index = 0;
-            //    foreach (Zaal zaal in zalen.zalenList)
-            //    {
-            //        List<Stoel> stoel = zaal.stoelen;
-            //        foreach (Stoel stoel2 in stoel)
-            //        {
-            //            if (stoel2.isOccupied == true && stoel2.Price != 0 && index < delete.Length)
-            //            {
-            //                delete[index++] = false;
-            //            }
-            //        }
-            //    }
-            //    return Tuple.Create(zalenAmount, delete);
-            //}
-
-            //public void DeleteCinemaHall()
-            //{
-            //    Tuple<int, bool[]> zalenInfo = CountCinemaHalls();
-            //    Console.Clear();
-            //    if (zalenInfo != null)
-            //    {
-            //        bool asking = true;
-            //        while (asking)
-            //        {
-            //            Console.WriteLine($"Er zijn op dit moment {zalenInfo.Item1} zalen in de Bi-Os-Coop.\n Kies een zaal om te verwijderen: ");
-            //            try
-            //            {
-            //                asking = false;
-            //                int antwoord = Convert.ToInt32(Console.ReadLine());
-            //                if (antwoord < zalenInfo.Item1)
-            //                {
-            //                    int index = 1;
-            //                    Zalen zalen = new Zalen();
-            //                    string jsonZalen = Json.ReadJson("Zalen");
-            //                    zalen = zalen.FromJson(jsonZalen);
-            //                    foreach (Zaal zaal in zalen.zalenList)
-            //                    {
-            //                        if (index == antwoord)
-            //                        {
-            //                            if (zalenInfo.Item2[index - 1])
-            //                            {
-            //                                Console.WriteLine("lmao de code is nog niet af, sorry");
-            //                            }
-            //                            else
-            //                            {
-            //                                Console.WriteLine("Deze zaal kan niet verwijdert worden omdat er al stoelen zijn gereserveerd.");
-            //                            }
-            //                        }
-            //                        else { index++; }
-            //                    }
-            //                }
-            //            }
-            //            catch
-            //            {
-            //                string antwoord = Console.ReadLine();
-            //                Console.WriteLine($"De keuze {antwoord} is niet valide. Probeer het opnieuw");
-            //                asking = true;
-            //            }
-            //        }
-            //    }
-            //    else
-            //    {
-            //        Console.ForegroundColor = ConsoleColor.Red;
-            //        Console.WriteLine($"De zaal {zalenInfo.Item2} kan niet verwijdert worden.");
-            //        Console.ForegroundColor = ConsoleColor.Gray;
-            //        List<dynamic> mainmenuthings = new List<dynamic>() { null, "name", false, "None", "Nederlands" };
-            //        adminMenu.AM(mainmenuthings);
-            //    }
-            //    //nog niet af
-            //}
-
-            //public void AddAdmin()
-            //{
-            //    Console.WriteLine("Vul hier uw e-mailadres in: ");
-            //    string accountNaam = Console.ReadLine();
-            //    Console.WriteLine("Vul hier uw wachtwoord in: ");
-            //    string accountWachtwoord = Console.ReadLine();
-            //    //obv nog niet af
-            //}
-
-        public void CoronaFilter(bool isCoronaFilter)
-        {
-            Zalen zalen = new Zalen();
-            string jsonZalen = Json.ReadJson("Zalen");
-            zalen = zalen.FromJson(jsonZalen);
-            if (!isCoronaFilter)
-            {
-                foreach (Zaal zaal in zalen.zalenList)
-                {
-                    int count = 0;
-                    List<Stoel> stoel = zaal.stoelen;
-                    foreach (Stoel stoel2 in stoel)
-                    {
-                        if (stoel2.isOccupied == true)
-                        {
-                            count += 1;
-                        }
-                    }
-                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
-                    int tempIndex = 0;
-                    foreach (Stoel stoel2 in stoel)
-                    {
-                        if (stoel2.isOccupied == true && tempIndex < count)
-                        {
-                            occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
-                        }
-                    }
-
-                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
-                    for (int j = 0, i = 0; j < 100; j++)
-                    {
-                        if (j % 3 == 0)
-                        {
-                            zaal.stoelen[j].isOccupied = false;
-                            zaal.stoelen[j].isOccupiedBy = 1;
-                            zaal.stoelen[j].Price = Stoel.price.LOW;
-                        }
-                        else
-                        {
-                            zaal.stoelen[j].isOccupied = true;
-                            zaal.stoelen[j].isOccupiedBy = 0;
-                            zaal.stoelen[j].Price = 0;
-                        }
-                        int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
-                        if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
-                        {
-                            zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
-                            zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
-                            zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
-                            i++;
-                        }
-                    }
-                    Json.WriteJson("Zalen", zalen.ToJson());
-                }
-            }
-            else
-            {
-                foreach (Zaal zaal in zalen.zalenList)
-                {
-                    int count = 0;
-                    List<Stoel> stoel = zaal.stoelen;
-                    foreach (Stoel stoel2 in stoel)
-                    {
-                        if (stoel2.isOccupied == true && stoel2.Price != 0)
-                        {
-                            count += 1;
-                        }
-                    }
-                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
-                    int tempIndex = 0;
-                    foreach (Stoel stoel2 in stoel)
-                    {
-                        if (stoel2.isOccupied == true && stoel2.Price != 0 && tempIndex < count)
-                        {
-                            occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
-                        }
-                    }
-                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
-                    for (int j = 0, i = 0; j < 100; j++)
-                    {
-                        int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
-                        if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
-                        {
-                            zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
-                            zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
-                            zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
-                            i++;
-                        }
-                    }
-                    Json.WriteJson("Zalen", zalen.ToJson());
-                }
-            }
-        }
-    }
-}
diff --git a/Class/MainMenu.cs b/Class/MainMenu.cs
index 1ec909d..d8b862b 100644
--- a/Class/MainMenu.cs
+++ b/Class/MainMenu.cs
@@ -318,4 +318,20 @@ namespace Bi_Os_Coop.Class
             MainMenuShow();
         }
     }
+    class MainMenuThings
+    {
+        public CPeople.Person user { get; set; }
+        public string sort { get; set; }
+        public bool reverse { get; set; }
+        public string login { get; set; }
+        public string language { get; set; }
+        public void setlog(CPeople.Person user, string sort, bool reverse, string login, string language)
+        {
+            this.user = user;
+            this.sort = sort;
+            this.reverse = reverse;
+            this.login = login;
+            this.language = language;
+        }
+    }
 }
\ No newline at end of file
diff --git a/Class/MainMenuThings.cs b/Class/MainMenuThings.cs
deleted file mode 100644
index 5d3fe81..0000000
--- a/Class/MainMenuThings.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-﻿namespace Bi_Os_Coop.Class
-{
-    class MainMenuThings
-    {
-        public CPeople.Person user { get; set; }
-        public string sort { get; set; }
-        public bool reverse { get; set; }
-        public string login { get; set; }
-        public string language { get; set; }
-        public void setlog(CPeople.Person user, string sort, bool reverse, string login, string language)
-        {
-            this.user = user;
-            this.sort = sort;
-            this.reverse = reverse;
-            this.login = login;
-            this.language = language;
-        }
-    }
-}
diff --git a/Class/MovieInterpreter.cs b/Class/MovieInterpreter.cs
deleted file mode 100644
index 1fe51f1..0000000
--- a/Class/MovieInterpreter.cs
+++ /dev/null
@@ -1,51 +0,0 @@
-﻿using System.Collections.Generic;
-using System.Linq;
-
-namespace Bi_Os_Coop.Class
-{
-    public class MovieInterpreter
-    {
-        public int movieid { get; set; }
-        public string name { get; set; }
-        public string releasedate { get; set; }
-        public List<string> genres { get; set; }
-        public int leeftijd { get; set; }
-        public double beoordeling { get; set; }
-        public List<string> acteurs { get; set; }
-        public string taal { get; set; }
-        public string beschrijving { get; set; }
-        public string trailer { get; set; }
-        public int MovieTime { get; set; }
-        public void setFilm(int movieid, string name, string releasedate, List<string> genres, int leeftijd, double beoordeling, List<string> acteurs, int movieTime, string taal = null, string beschrijving = null, string trailer = null)
-        {
-            this.movieid = movieid;
-            this.name = name;
-            this.releasedate = releasedate;
-            this.genres = genres.ToList();
-            this.leeftijd = leeftijd;
-            this.beoordeling = beoordeling;
-            this.acteurs = acteurs.ToList();
-            this.taal = taal;
-            this.beschrijving = beschrijving;
-            this.trailer = trailer;
-            this.MovieTime = movieTime;
-        }
-    }
-    public class Films
-    {
-        public List<MovieInterpreter> movieList { get; set; }
-        public void addFilm(MovieInterpreter newMovie)
-        {
-            if (movieList == null)
-            {
-                List<MovieInterpreter> newMovieList = new List<MovieInterpreter>();
-                newMovieList.Add(newMovie);
-                movieList = newMovieList;
-            }
-            else
-            {
-                movieList.Add(newMovie);
-            }
-        }
-    }
-}
diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 0b536c0..0d9f011 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -301,4 +301,576 @@ namespace Bi_Os_Coop.Class
             }
         }
     }
+    public class MovieInterpreter
+    {
+        public int movieid { get; set; }
+        public string name { get; set; }
+        public string releasedate { get; set; }
+        public List<string> genres { get; set; }
+        public int leeftijd { get; set; }
+        public double beoordeling { get; set; }
+        public List<string> acteurs { get; set; }
+        public string taal { get; set; }
+        public string beschrijving { get; set; }
+        public string trailer { get; set; }
+        public int MovieTime { get; set; }
+        public void setFilm(int movieid, string name, string releasedate, List<string> genres, int leeftijd, double beoordeling, List<string> acteurs, int movieTime, string taal = null, string beschrijving = null, string trailer = null)
+        {
+            this.movieid = movieid;
+            this.name = name;
+            this.releasedate = releasedate;
+            this.genres = genres.ToList();
+            this.leeftijd = leeftijd;
+            this.beoordeling = beoordeling;
+            this.acteurs = acteurs.ToList();
+            this.taal = taal;
+            this.beschrijving = beschrijving;
+            this.trailer = trailer;
+            this.MovieTime = movieTime;
+        }
+    }
+    public class Films
+    {
+        public List<MovieInterpreter> movieList { get; set; }
+        public void addFilm(MovieInterpreter newMovie)
+        {
+            if (movieList == null)
+            {
+                List<MovieInterpreter> newMovieList = new List<MovieInterpreter>();
+                newMovieList.Add(newMovie);
+                movieList = newMovieList;
+            }
+            else
+            {
+                movieList.Add(newMovie);
+            }
+        }
+    }
+    public class MovieMethods
+        {
+            public static void UpdateMovieMenu(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                bool done = false;
+                while (done == false)
+                {
+                    MainMenu.ClearAndShowLogoPlusEsc("Admin");
+                    Console.WriteLine($"Gekozen Film: {tempMovie.name}\n");
+                    Console.WriteLine("======FILM AANPASSEN MENU======");
+                    Console.WriteLine("1. Naam aanpassen");
+                    Console.WriteLine("2. Releasedatum aanpassen");
+                    Console.WriteLine("3. Genres aanpassen");
+                    Console.WriteLine("4. Acteurs aanpassen");
+                    Console.WriteLine("5. Minimumleeftijd aanpassen");
+                    Console.WriteLine("6. Beoordeling aanpassen");
+                    Console.WriteLine("7. Taal aanpassen");
+                    Console.WriteLine("8. Beschrijving aanpassen");
+                    Console.WriteLine("9. Trailer aanpassen");
+    
+                    ConsoleKeyInfo keyReaded = Console.ReadKey();
+    
+                    switch (keyReaded.Key)
+                    {
+                        case ConsoleKey.D1:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            UpdateNameMovie(json, jsonFilms, tempMovie);
+                            break;
+                        case ConsoleKey.D2:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            UpdateReleaseDate(json, jsonFilms, tempMovie);
+                            break;
+                        case ConsoleKey.D3:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            UpdateGenres(json, jsonFilms, tempMovie);
+                            break;
+                        case ConsoleKey.D4:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            UpdateActors(json, jsonFilms, tempMovie);
+                            break;
+                        case ConsoleKey.D5:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            Tuple<string, Films, MovieInterpreter> e = UpdateMinimumAge(json, jsonFilms, tempMovie);
+                            if (e.Item1 == "fail") { while (e.Item1 == "fail") { e = UpdateMinimumAge(json, jsonFilms, tempMovie); } }
+                            break;
+                        case ConsoleKey.D6:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            Tuple<string, Films, MovieInterpreter> f = UpdateReviewScore(json, jsonFilms, tempMovie);
+                            if (f.Item1 == "fail") { while (f.Item1 == "fail") { f = UpdateReviewScore(json, jsonFilms, tempMovie); } }
+                            break;
+                        case ConsoleKey.D7:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            UpdateLanguage(json, jsonFilms, tempMovie);
+                            break;
+                        case ConsoleKey.D8:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            UpdateDescription(json, jsonFilms, tempMovie);
+                            break;
+                        case ConsoleKey.D9:
+                            MainMenu.ClearAndShowLogoPlusEsc("Update");
+                            UpdateTrailer(json, jsonFilms, tempMovie);
+                            break;
+                        case ConsoleKey.Escape:
+                            done = true;
+                            break;
+                    }
+                }
+            }
+            /// <summary>
+            /// Checks if movie exists in json, if found returns the movie
+            /// </summary>
+            /// <param name="name"></param>
+            /// <returns></returns>
+            public static Tuple<bool, MovieInterpreter> DoesMovieExist(string movname)
+            {
+                MovieInterpreter noMovie = new MovieInterpreter();
+                try
+                {
+                    string json = Json.ReadJson("Films");
+                    Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+                    try
+                    {
+                        MovieInterpreter tempMovie = new MovieInterpreter();
+                        tempMovie = jsonFilms.movieList.Single(movie => movie.name.ToLower() == movname.ToLower());
+                        return Tuple.Create(true, tempMovie);
+                    }
+                    catch (NullReferenceException)
+                    {
+                        return Tuple.Create(false, noMovie);
+                    }
+    
+                }
+                catch (Exception)
+                {
+                    return Tuple.Create(false, noMovie);
+                }
+            }
+    
+            public static MovieInterpreter AddMovie()
+            {
+                string json = Json.ReadJson("Films");
+                Films MovieLibrary = JsonSerializer.Deserialize<Films>(json);
+    
+                Console.WriteLine("Voeg hier een nieuwe film toe.");
+                Console.WriteLine("Naam film:");
+                string naamFilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
+                if (naamFilm == "1go2to3main4menu5") { goto exit; }
+    
+                Console.WriteLine("Releasedatum film: (dd/mm/yyyy)");
+                string releasedatumFilm = loginscherm.getdate();
+                if (releasedatumFilm == "1go2to3main4menu5") { goto exit; }
+    
+                Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
+                Console.WriteLine("Genres film:");
+                string genres = loginscherm.newwayoftyping();
+                if (genres == "1go2to3main4menu5") { goto exit; }
+                List<string> genresFilm = genres.Split(',').Select(p => p.Trim()).ToList();
+    
+                for (int i = 0; i < genresFilm.Count; i++)
+                {
+                    genresFilm[i] = loginscherm.FirstCharToUpper(genresFilm[i]);
+                }
+    
+                Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
+                Console.WriteLine("Acteurs film:");
+                string acteurs = loginscherm.newwayoftyping();
+    
+                if (acteurs == "1go2to3main4menu5") { goto exit; }
+                List<string> acteursFilm = acteurs.Split(',').Select(p => p.Trim()).ToList();
+    
+                for (int i = 0; i < acteursFilm.Count; i++)
+                {
+                    List<string> tempActeur = acteursFilm[i].Split(' ').ToList();
+                    for (int j = 0; j < tempActeur.Count; j++)
+                    {
+                        tempActeur[j] = loginscherm.FirstCharToUpper(tempActeur[j]);
+                    }
+                    acteursFilm[i] = string.Join(" ", tempActeur);
+                }
+    
+                Console.WriteLine("Minimumleeftijd film:");
+                var minimumleeftijd = CPeople.converttoint(loginscherm.newwayoftyping());
+                int minimumLeeftijd;
+                if (minimumleeftijd is string) { goto exit; }
+                else { minimumLeeftijd = minimumleeftijd; }
+    
+                Console.WriteLine("Beoordeling film: (bijv. 8.0)");
+                var beoordelingFilm2 = CPeople.converttodouble(loginscherm.newwayoftyping());
+                double beoordelingFilm;
+                if (beoordelingFilm2 is string) { goto exit; }
+                else { beoordelingFilm = beoordelingFilm2; }
+    
+                Console.WriteLine("Taal film:");
+                string taalfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
+                if (taalfilm == "1go2to3main4menu5") { goto exit; }
+    
+                Console.WriteLine("Tijdsduur film in minuten:");
+                var movietime = CPeople.converttoint(loginscherm.newwayoftyping());
+                int movieTime;
+                if (movietime is string) { goto exit; }
+                else { movieTime = movietime; }
+    
+                Console.WriteLine("Beschrijving film:");
+                string beschrijvingfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
+                if (beschrijvingfilm == "1go2to3main4menu5") { goto exit; }
+    
+                Console.WriteLine("Trailer film:");
+                string trailerfilm = loginscherm.newwayoftyping();
+                if (trailerfilm == "1go2to3main4menu5") { goto exit; }
+    
+                if (MovieLibrary.movieList.Count > 0)
+                {
+                    var lastMovieInList = MovieLibrary.movieList[MovieLibrary.movieList.Count - 1];
+                    MovieInterpreter Movie = new MovieInterpreter();
+                    Movie.setFilm(lastMovieInList.movieid + 1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
+    
+                    MovieLibrary.addFilm(Movie);
+                    JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                    json = JsonSerializer.Serialize(MovieLibrary, opt);
+    
+                    Json.WriteJson("Films", json);
+    
+                    Console.Clear();
+                    MainMenu.Logo();
+                    Console.ForegroundColor = ConsoleColor.Green;
+                    Console.WriteLine("Film succesvol toegevoegd aan het aanbod.");
+                    System.Threading.Thread.Sleep(1500);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    return Movie;
+                }
+                else
+                {
+                    MovieInterpreter Movie = new MovieInterpreter();
+                    Movie.setFilm(1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
+    
+                    MovieLibrary.addFilm(Movie);
+                    JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                    json = JsonSerializer.Serialize(MovieLibrary, opt);
+    
+                    Json.WriteJson("Films", json);
+    
+                    Console.Clear();
+                    MainMenu.Logo();
+                    Console.ForegroundColor = ConsoleColor.Green;
+                    Console.WriteLine("Film succesvol toegevoegd aan het aanbod.");
+                    System.Threading.Thread.Sleep(1500);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    return Movie;
+                }
+    
+            exit:
+                MovieInterpreter Movie2 = new MovieInterpreter();
+                Movie2.setFilm(234733, "1go2to3main4menu5", "", new List<string>(), 999, 888, new List<string>(), 777, "", "");
+                return Movie2;
+            }
+    
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateNameMovie(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.WriteLine($"Wat is de nieuwe naam van de film {tempMovie.name}?");
+                string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
+                if (newName == "1go2to3main4menu5") { goto exit; }
+                tempMovie.name = newName;
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("Film naam is succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateReleaseDate(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.WriteLine($"Wat is de nieuwe releasedatum van de film {tempMovie.name}?");
+                string newReleaseDate = loginscherm.getdate();
+                if (newReleaseDate == "1go2to3main4menu5") { goto exit; }
+                tempMovie.releasedate = newReleaseDate;
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("De releasedatum is succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateGenres(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.WriteLine($"Wat is/zijn de nieuwe genre(s) van de film {tempMovie.name}?");
+                Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
+                Console.WriteLine("Genres film:");
+                string genres = loginscherm.newwayoftyping();
+    
+                if (genres == "1go2to3main4menu5") { goto exit; }
+    
+                List<string> newGenres = genres.Split(',').Select(p => p.Trim()).ToList();
+                for (int i = 0; i < newGenres.Count; i++)
+                {
+                    newGenres[i] = loginscherm.FirstCharToUpper(newGenres[i]);
+                }
+    
+                tempMovie.genres = newGenres;
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("De genre(s) is/zijn succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateActors(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.WriteLine($"Wie zijn de nieuwe acteurs van de film {tempMovie.name}?");
+                Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
+                Console.WriteLine("Acteurs film:");
+                string actors = loginscherm.newwayoftyping();
+    
+                if (actors == "1go2to3main4menu5") { goto exit; }
+    
+                List<string> newActors = actors.Split(',').Select(p => p.Trim()).ToList();
+                for (int i = 0; i < newActors.Count; i++)
+                {
+                    List<string> tempActeur = newActors[i].Split(' ').ToList();
+                    for (int j = 0; j < tempActeur.Count; j++)
+                    {
+                        tempActeur[j] = loginscherm.FirstCharToUpper(tempActeur[j]);
+                    }
+                    newActors[i] = string.Join(" ", tempActeur);
+                }
+    
+                tempMovie.acteurs = newActors;
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("De acteur(s) is/zijn succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static dynamic errormaker()
+            {
+                return "2a";
+            }
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateMinimumAge(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.WriteLine($"Wat is de nieuwe minimum leeftijd van de film {tempMovie.name}? (0-18)");
+                string newMinimumAge = loginscherm.newwayoftyping();
+                if (newMinimumAge == "1go2to3main4menu5") { return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie); }
+                try
+                {
+                    int ageing = Convert.ToInt32(newMinimumAge);
+                    if (ageing < 0 || ageing > 18) { Convert.ToInt32(errormaker()); }
+                    tempMovie.leeftijd = ageing;
+                }
+                catch (FormatException)
+                {
+                    Console.ForegroundColor = ConsoleColor.Red;
+                    Console.WriteLine("Voer een getal tussen de 0 en 18 in.");
+                    System.Threading.Thread.Sleep(1000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
+                }
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("De minimumleeftijd is succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateReviewScore(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.WriteLine($"Wat is de nieuwe beoordeling van de film {tempMovie.name}? (0-10.0)");
+                string newScore = loginscherm.newwayoftyping();
+                if (newScore == "1go2to3main4menu5") { goto exit; }
+                try
+                {
+                    double ageing = Convert.ToDouble(newScore);
+                    if (ageing < 0 || ageing > 10) { Convert.ToInt32(errormaker()); }
+                    tempMovie.beoordeling = ageing;
+                }
+                catch (FormatException)
+                {
+                    Console.ForegroundColor = ConsoleColor.Red;
+                    Console.WriteLine("Voer een getal tussen de 0 en 10.0 in.");
+                    System.Threading.Thread.Sleep(1000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
+                }
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("De beoordeling is succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateDescription(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.WriteLine($"Wat is de nieuwe beschrijving van de film {tempMovie.name}?");
+                string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
+                if (newName == "1go2to3main4menu5") { goto exit; }
+                tempMovie.beschrijving = newName;
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("Film beschrijving is succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+            public static Tuple<string, Films, MovieInterpreter> UpdateLanguage(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.Write("Terug naar het Update Menu (Esc)\n\n");
+                Console.WriteLine($"Wat is de nieuwe taal van de film {tempMovie.name}?");
+                string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
+                if (newName == "1go2to3main4menu5") { goto exit; }
+                tempMovie.taal = newName;
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("Film taal is succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static Tuple<string, Films, MovieInterpreter> UpdateTrailer(string json, Films jsonFilms, MovieInterpreter tempMovie)
+            {
+                Console.Clear();
+                Console.Write("Terug naar het Update Menu (Esc)\n\n");
+                Console.WriteLine($"Wat is de nieuwe trailer van de film {tempMovie.name}?");
+                string newTrailer = loginscherm.newwayoftyping();
+                if (newTrailer == "1go2to3main4menu5") { goto exit; }
+                tempMovie.trailer = newTrailer;
+    
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(jsonFilms, opt);
+                Json.WriteJson("Films", json);
+    
+                Console.ForegroundColor = ConsoleColor.Green;
+                Console.WriteLine("Film trailer is succesvol gewijzigd.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Console.Clear();
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            exit:
+                return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
+            }
+    
+            public static void DeleteMovie(string json, Films jsonFilms, string movieToRemove)
+            {
+                CPeople.Admin admin = new CPeople.Admin();
+    
+                int index = jsonFilms.movieList.FindIndex(movie => loginscherm.RemoveSpecialCharacters(movie.name) == movieToRemove);
+                if (index == -1)
+                {
+                    Console.ForegroundColor = ConsoleColor.Yellow;
+                    Console.WriteLine("Film niet gevonden. Probeer het nog een keer.");
+                    System.Threading.Thread.Sleep(1000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    admin.DeleteMovies();
+                }
+                else
+                {
+                    Console.ForegroundColor = ConsoleColor.Green;
+                    Console.WriteLine("\nFilm gevonden.");
+                    Console.ForegroundColor = ConsoleColor.Red;
+                    Console.WriteLine("Weet u zeker dat u hem wilt verwijderen? (j/n)");
+                    Console.ForegroundColor = ConsoleColor.Gray;
+    
+                    ConsoleKey keypressed = Console.ReadKey(true).Key;
+                    while (keypressed != ConsoleKey.J && keypressed != ConsoleKey.N && keypressed != ConsoleKey.Escape)
+                    {
+                        keypressed = Console.ReadKey(true).Key;
+                    }
+                    if (keypressed == ConsoleKey.Escape) { goto exit; }
+                    if (keypressed == ConsoleKey.J)
+                    {
+                        jsonFilms.movieList.RemoveAt(index);
+                        JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                        json = JsonSerializer.Serialize(jsonFilms, opt);
+                        Json.WriteJson("Films", json);
+    
+                        Console.ForegroundColor = ConsoleColor.Green;
+                        Console.WriteLine("Film is succesvol verwijderd.");
+                        System.Threading.Thread.Sleep(1000);
+                        Console.ForegroundColor = ConsoleColor.Gray;
+                        Console.Clear();
+                    }
+                    else if (keypressed == ConsoleKey.N)
+                    {
+                        Console.Clear();
+                        adminMenu.hoofdPagina();
+                    }
+                exit:
+                    return;
+                }
+            }
+            /// <summary>
+            /// Berekent hoeveel pauzes er tijdens een film gehouden moeten worden. Bij een film die 150 duurt, wordt 1 pauze gehouden, voor elk uur wat daar bovenop komt wordt een extra pauze gehouden.
+            /// Returnt een integer die het aantal pauzes weergeeft.
+            /// </summary>
+            /// <param name="movieTime"></param>
+            /// <returns></returns>
+            public static int movieBreaksCalculator(int movieTime)
+            {
+                int amountOfBreaks = 0;
+                if (movieTime > 150)
+                {
+                    amountOfBreaks = (movieTime - 150) / 60 + 1;
+                }
+                return amountOfBreaks;
+            }
+        }
 }
diff --git a/Class/MovieMethods.cs b/Class/MovieMethods.cs
deleted file mode 100644
index bdcaf1f..0000000
--- a/Class/MovieMethods.cs
+++ /dev/null
@@ -1,535 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text.Json;
-
-namespace Bi_Os_Coop.Class
-{
-    public class MovieMethods
-    {
-        public static void UpdateMovieMenu(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            bool done = false;
-            while (done == false)
-            {
-                MainMenu.ClearAndShowLogoPlusEsc("Admin");
-                Console.WriteLine($"Gekozen Film: {tempMovie.name}\n");
-                Console.WriteLine("======FILM AANPASSEN MENU======");
-                Console.WriteLine("1. Naam aanpassen");
-                Console.WriteLine("2. Releasedatum aanpassen");
-                Console.WriteLine("3. Genres aanpassen");
-                Console.WriteLine("4. Acteurs aanpassen");
-                Console.WriteLine("5. Minimumleeftijd aanpassen");
-                Console.WriteLine("6. Beoordeling aanpassen");
-                Console.WriteLine("7. Taal aanpassen");
-                Console.WriteLine("8. Beschrijving aanpassen");
-                Console.WriteLine("9. Trailer aanpassen");
-
-                ConsoleKeyInfo keyReaded = Console.ReadKey();
-
-                switch (keyReaded.Key)
-                {
-                    case ConsoleKey.D1:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        UpdateNameMovie(json, jsonFilms, tempMovie);
-                        break;
-                    case ConsoleKey.D2:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        UpdateReleaseDate(json, jsonFilms, tempMovie);
-                        break;
-                    case ConsoleKey.D3:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        UpdateGenres(json, jsonFilms, tempMovie);
-                        break;
-                    case ConsoleKey.D4:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        UpdateActors(json, jsonFilms, tempMovie);
-                        break;
-                    case ConsoleKey.D5:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        Tuple<string, Films, MovieInterpreter> e = UpdateMinimumAge(json, jsonFilms, tempMovie);
-                        if (e.Item1 == "fail") { while (e.Item1 == "fail") { e = UpdateMinimumAge(json, jsonFilms, tempMovie); } }
-                        break;
-                    case ConsoleKey.D6:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        Tuple<string, Films, MovieInterpreter> f = UpdateReviewScore(json, jsonFilms, tempMovie);
-                        if (f.Item1 == "fail") { while (f.Item1 == "fail") { f = UpdateReviewScore(json, jsonFilms, tempMovie); } }
-                        break;
-                    case ConsoleKey.D7:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        UpdateLanguage(json, jsonFilms, tempMovie);
-                        break;
-                    case ConsoleKey.D8:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        UpdateDescription(json, jsonFilms, tempMovie);
-                        break;
-                    case ConsoleKey.D9:
-                        MainMenu.ClearAndShowLogoPlusEsc("Update");
-                        UpdateTrailer(json, jsonFilms, tempMovie);
-                        break;
-                    case ConsoleKey.Escape:
-                        done = true;
-                        break;
-                }
-            }
-        }
-        /// <summary>
-        /// Checks if movie exists in json, if found returns the movie
-        /// </summary>
-        /// <param name="name"></param>
-        /// <returns></returns>
-        public static Tuple<bool, MovieInterpreter> DoesMovieExist(string movname)
-        {
-            MovieInterpreter noMovie = new MovieInterpreter();
-            try
-            {
-                string json = Json.ReadJson("Films");
-                Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
-                try
-                {
-                    MovieInterpreter tempMovie = new MovieInterpreter();
-                    tempMovie = jsonFilms.movieList.Single(movie => movie.name.ToLower() == movname.ToLower());
-                    return Tuple.Create(true, tempMovie);
-                }
-                catch (NullReferenceException)
-                {
-                    return Tuple.Create(false, noMovie);
-                }
-
-            }
-            catch (Exception)
-            {
-                return Tuple.Create(false, noMovie);
-            }
-        }
-
-        public static MovieInterpreter AddMovie()
-        {
-            string json = Json.ReadJson("Films");
-            Films MovieLibrary = JsonSerializer.Deserialize<Films>(json);
-
-            Console.WriteLine("Voeg hier een nieuwe film toe.");
-            Console.WriteLine("Naam film:");
-            string naamFilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-            if (naamFilm == "1go2to3main4menu5") { goto exit; }
-
-            Console.WriteLine("Releasedatum film: (dd/mm/yyyy)");
-            string releasedatumFilm = loginscherm.getdate();
-            if (releasedatumFilm == "1go2to3main4menu5") { goto exit; }
-
-            Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
-            Console.WriteLine("Genres film:");
-            string genres = loginscherm.newwayoftyping();
-            if (genres == "1go2to3main4menu5") { goto exit; }
-            List<string> genresFilm = genres.Split(',').Select(p => p.Trim()).ToList();
-
-            for (int i = 0; i < genresFilm.Count; i++)
-            {
-                genresFilm[i] = loginscherm.FirstCharToUpper(genresFilm[i]);
-            }
-
-            Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
-            Console.WriteLine("Acteurs film:");
-            string acteurs = loginscherm.newwayoftyping();
-
-            if (acteurs == "1go2to3main4menu5") { goto exit; }
-            List<string> acteursFilm = acteurs.Split(',').Select(p => p.Trim()).ToList();
-
-            for (int i = 0; i < acteursFilm.Count; i++)
-            {
-                List<string> tempActeur = acteursFilm[i].Split(' ').ToList();
-                for (int j = 0; j < tempActeur.Count; j++)
-                {
-                    tempActeur[j] = loginscherm.FirstCharToUpper(tempActeur[j]);
-                }
-                acteursFilm[i] = string.Join(" ", tempActeur);
-            }
-
-            Console.WriteLine("Minimumleeftijd film:");
-            var minimumleeftijd = CPeople.converttoint(loginscherm.newwayoftyping());
-            int minimumLeeftijd;
-            if (minimumleeftijd is string) { goto exit; }
-            else { minimumLeeftijd = minimumleeftijd; }
-
-            Console.WriteLine("Beoordeling film: (bijv. 8.0)");
-            var beoordelingFilm2 = CPeople.converttodouble(loginscherm.newwayoftyping());
-            double beoordelingFilm;
-            if (beoordelingFilm2 is string) { goto exit; }
-            else { beoordelingFilm = beoordelingFilm2; }
-
-            Console.WriteLine("Taal film:");
-            string taalfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-            if (taalfilm == "1go2to3main4menu5") { goto exit; }
-
-            Console.WriteLine("Tijdsduur film in minuten:");
-            var movietime = CPeople.converttoint(loginscherm.newwayoftyping());
-            int movieTime;
-            if (movietime is string) { goto exit; }
-            else { movieTime = movietime; }
-
-            Console.WriteLine("Beschrijving film:");
-            string beschrijvingfilm = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-            if (beschrijvingfilm == "1go2to3main4menu5") { goto exit; }
-
-            Console.WriteLine("Trailer film:");
-            string trailerfilm = loginscherm.newwayoftyping();
-            if (trailerfilm == "1go2to3main4menu5") { goto exit; }
-
-            if (MovieLibrary.movieList.Count > 0)
-            {
-                var lastMovieInList = MovieLibrary.movieList[MovieLibrary.movieList.Count - 1];
-                MovieInterpreter Movie = new MovieInterpreter();
-                Movie.setFilm(lastMovieInList.movieid + 1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
-
-                MovieLibrary.addFilm(Movie);
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-                json = JsonSerializer.Serialize(MovieLibrary, opt);
-
-                Json.WriteJson("Films", json);
-
-                Console.Clear();
-                MainMenu.Logo();
-                Console.ForegroundColor = ConsoleColor.Green;
-                Console.WriteLine("Film succesvol toegevoegd aan het aanbod.");
-                System.Threading.Thread.Sleep(1500);
-                Console.ForegroundColor = ConsoleColor.Gray;
-                return Movie;
-            }
-            else
-            {
-                MovieInterpreter Movie = new MovieInterpreter();
-                Movie.setFilm(1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, movieTime, taalfilm, beschrijvingfilm, trailerfilm);
-
-                MovieLibrary.addFilm(Movie);
-                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-                json = JsonSerializer.Serialize(MovieLibrary, opt);
-
-                Json.WriteJson("Films", json);
-
-                Console.Clear();
-                MainMenu.Logo();
-                Console.ForegroundColor = ConsoleColor.Green;
-                Console.WriteLine("Film succesvol toegevoegd aan het aanbod.");
-                System.Threading.Thread.Sleep(1500);
-                Console.ForegroundColor = ConsoleColor.Gray;
-                return Movie;
-            }
-
-        exit:
-            MovieInterpreter Movie2 = new MovieInterpreter();
-            Movie2.setFilm(234733, "1go2to3main4menu5", "", new List<string>(), 999, 888, new List<string>(), 777, "", "");
-            return Movie2;
-        }
-
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateNameMovie(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.WriteLine($"Wat is de nieuwe naam van de film {tempMovie.name}?");
-            string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-            if (newName == "1go2to3main4menu5") { goto exit; }
-            tempMovie.name = newName;
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("Film naam is succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateReleaseDate(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.WriteLine($"Wat is de nieuwe releasedatum van de film {tempMovie.name}?");
-            string newReleaseDate = loginscherm.getdate();
-            if (newReleaseDate == "1go2to3main4menu5") { goto exit; }
-            tempMovie.releasedate = newReleaseDate;
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("De releasedatum is succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateGenres(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.WriteLine($"Wat is/zijn de nieuwe genre(s) van de film {tempMovie.name}?");
-            Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
-            Console.WriteLine("Genres film:");
-            string genres = loginscherm.newwayoftyping();
-
-            if (genres == "1go2to3main4menu5") { goto exit; }
-
-            List<string> newGenres = genres.Split(',').Select(p => p.Trim()).ToList();
-            for (int i = 0; i < newGenres.Count; i++)
-            {
-                newGenres[i] = loginscherm.FirstCharToUpper(newGenres[i]);
-            }
-
-            tempMovie.genres = newGenres;
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("De genre(s) is/zijn succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateActors(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.WriteLine($"Wie zijn de nieuwe acteurs van de film {tempMovie.name}?");
-            Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
-            Console.WriteLine("Acteurs film:");
-            string actors = loginscherm.newwayoftyping();
-
-            if (actors == "1go2to3main4menu5") { goto exit; }
-
-            List<string> newActors = actors.Split(',').Select(p => p.Trim()).ToList();
-            for (int i = 0; i < newActors.Count; i++)
-            {
-                List<string> tempActeur = newActors[i].Split(' ').ToList();
-                for (int j = 0; j < tempActeur.Count; j++)
-                {
-                    tempActeur[j] = loginscherm.FirstCharToUpper(tempActeur[j]);
-                }
-                newActors[i] = string.Join(" ", tempActeur);
-            }
-
-            tempMovie.acteurs = newActors;
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("De acteur(s) is/zijn succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static dynamic errormaker()
-        {
-            return "2a";
-        }
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateMinimumAge(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.WriteLine($"Wat is de nieuwe minimum leeftijd van de film {tempMovie.name}? (0-18)");
-            string newMinimumAge = loginscherm.newwayoftyping();
-            if (newMinimumAge == "1go2to3main4menu5") { return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie); }
-            try
-            {
-                int ageing = Convert.ToInt32(newMinimumAge);
-                if (ageing < 0 || ageing > 18) { Convert.ToInt32(errormaker()); }
-                tempMovie.leeftijd = ageing;
-            }
-            catch (FormatException)
-            {
-                Console.ForegroundColor = ConsoleColor.Red;
-                Console.WriteLine("Voer een getal tussen de 0 en 18 in.");
-                System.Threading.Thread.Sleep(1000);
-                Console.ForegroundColor = ConsoleColor.Gray;
-                return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
-            }
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("De minimumleeftijd is succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateReviewScore(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.WriteLine($"Wat is de nieuwe beoordeling van de film {tempMovie.name}? (0-10.0)");
-            string newScore = loginscherm.newwayoftyping();
-            if (newScore == "1go2to3main4menu5") { goto exit; }
-            try
-            {
-                double ageing = Convert.ToDouble(newScore);
-                if (ageing < 0 || ageing > 10) { Convert.ToInt32(errormaker()); }
-                tempMovie.beoordeling = ageing;
-            }
-            catch (FormatException)
-            {
-                Console.ForegroundColor = ConsoleColor.Red;
-                Console.WriteLine("Voer een getal tussen de 0 en 10.0 in.");
-                System.Threading.Thread.Sleep(1000);
-                Console.ForegroundColor = ConsoleColor.Gray;
-                return new Tuple<string, Films, MovieInterpreter>("fail", jsonFilms, tempMovie);
-            }
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("De beoordeling is succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateDescription(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.WriteLine($"Wat is de nieuwe beschrijving van de film {tempMovie.name}?");
-            string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-            if (newName == "1go2to3main4menu5") { goto exit; }
-            tempMovie.beschrijving = newName;
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("Film beschrijving is succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-        public static Tuple<string, Films, MovieInterpreter> UpdateLanguage(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.Write("Terug naar het Update Menu (Esc)\n\n");
-            Console.WriteLine($"Wat is de nieuwe taal van de film {tempMovie.name}?");
-            string newName = loginscherm.FirstCharToUpper(loginscherm.newwayoftyping());
-            if (newName == "1go2to3main4menu5") { goto exit; }
-            tempMovie.taal = newName;
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("Film taal is succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static Tuple<string, Films, MovieInterpreter> UpdateTrailer(string json, Films jsonFilms, MovieInterpreter tempMovie)
-        {
-            Console.Clear();
-            Console.Write("Terug naar het Update Menu (Esc)\n\n");
-            Console.WriteLine($"Wat is de nieuwe trailer van de film {tempMovie.name}?");
-            string newTrailer = loginscherm.newwayoftyping();
-            if (newTrailer == "1go2to3main4menu5") { goto exit; }
-            tempMovie.trailer = newTrailer;
-
-            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-            json = JsonSerializer.Serialize(jsonFilms, opt);
-            Json.WriteJson("Films", json);
-
-            Console.ForegroundColor = ConsoleColor.Green;
-            Console.WriteLine("Film trailer is succesvol gewijzigd.");
-            System.Threading.Thread.Sleep(1000);
-            Console.ForegroundColor = ConsoleColor.Gray;
-            Console.Clear();
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        exit:
-            return new Tuple<string, Films, MovieInterpreter>(json, jsonFilms, tempMovie);
-        }
-
-        public static void DeleteMovie(string json, Films jsonFilms, string movieToRemove)
-        {
-            CPeople.Admin admin = new CPeople.Admin();
-
-            int index = jsonFilms.movieList.FindIndex(movie => loginscherm.RemoveSpecialCharacters(movie.name) == movieToRemove);
-            if (index == -1)
-            {
-                Console.ForegroundColor = ConsoleColor.Yellow;
-                Console.WriteLine("Film niet gevonden. Probeer het nog een keer.");
-                System.Threading.Thread.Sleep(1000);
-                Console.ForegroundColor = ConsoleColor.Gray;
-                admin.DeleteMovies();
-            }
-            else
-            {
-                Console.ForegroundColor = ConsoleColor.Green;
-                Console.WriteLine("\nFilm gevonden.");
-                Console.ForegroundColor = ConsoleColor.Red;
-                Console.WriteLine("Weet u zeker dat u hem wilt verwijderen? (j/n)");
-                Console.ForegroundColor = ConsoleColor.Gray;
-
-                ConsoleKey keypressed = Console.ReadKey(true).Key;
-                while (keypressed != ConsoleKey.J && keypressed != ConsoleKey.N && keypressed != ConsoleKey.Escape)
-                {
-                    keypressed = Console.ReadKey(true).Key;
-                }
-                if (keypressed == ConsoleKey.Escape) { goto exit; }
-                if (keypressed == ConsoleKey.J)
-                {
-                    jsonFilms.movieList.RemoveAt(index);
-                    JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
-                    json = JsonSerializer.Serialize(jsonFilms, opt);
-                    Json.WriteJson("Films", json);
-
-                    Console.ForegroundColor = ConsoleColor.Green;
-                    Console.WriteLine("Film is succesvol verwijderd.");
-                    System.Threading.Thread.Sleep(1000);
-                    Console.ForegroundColor = ConsoleColor.Gray;
-                    Console.Clear();
-                }
-                else if (keypressed == ConsoleKey.N)
-                {
-                    Console.Clear();
-                    adminMenu.hoofdPagina();
-                }
-            exit:
-                return;
-            }
-        }
-        /// <summary>
-        /// Berekent hoeveel pauzes er tijdens een film gehouden moeten worden. Bij een film die 150 duurt, wordt 1 pauze gehouden, voor elk uur wat daar bovenop komt wordt een extra pauze gehouden.
-        /// Returnt een integer die het aantal pauzes weergeeft.
-        /// </summary>
-        /// <param name="movieTime"></param>
-        /// <returns></returns>
-        public static int movieBreaksCalculator(int movieTime)
-        {
-            int amountOfBreaks = 0;
-            if (movieTime > 150)
-            {
-                amountOfBreaks = (movieTime - 150) / 60 + 1;
-            }
-            return amountOfBreaks;
-        }
-    }
-}
diff --git a/Class/adminMenu.cs b/Class/adminMenu.cs
index 655eb4b..cf3465d 100644
--- a/Class/adminMenu.cs
+++ b/Class/adminMenu.cs
@@ -1,4 +1,5 @@
 ﻿using System;
+using System.Collections.Generic;
 
 namespace Bi_Os_Coop.Class
 {
@@ -106,4 +107,303 @@ namespace Bi_Os_Coop.Class
             return keuze;
         }
     }
+    public class adminMethods
+        {
+            public bool coronaCheck()
+            {
+                Zalen zalen = new Zalen();
+                string jsonZalen = Json.ReadJson("Zalen");
+                zalen = zalen.FromJson(jsonZalen);
+                foreach (Zaal zaal in zalen.zalenList)
+                {
+                    List<Stoel> stoel = zaal.stoelen;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true && stoel2.Price == 0 && stoel2.isOccupiedBy == 0)
+                        {
+                            return true;
+                        }
+                    }
+                }
+                return false;
+            }
+            //public void CoronaFilter(bool isCoronaFilter)
+            //{
+            //    Zalen zalen = new Zalen();
+            //    string jsonZalen = Json.ReadJson("Zalen");
+            //    zalen = zalen.FromJson(jsonZalen);
+            //    if (!isCoronaFilter)
+            //    {
+            //        foreach (Zaal zaal in zalen.zalenList)
+            //        {
+            //            int count = 0;
+            //            List<Stoel> stoel = zaal.stoelen;
+            //            foreach (Stoel stoel2 in stoel)
+            //            {
+            //                if (stoel2.isOccupied == true)
+            //                {
+            //                    count += 1;
+            //                }
+            //            }
+            //            Tuple<bool, int, int, int>[] occupiedStoelen = new Tuple<bool, int, int, int>[count];
+            //            int tempIndex = 0;
+            //            foreach (Stoel stoel2 in stoel)
+            //            {
+            //                if (stoel2.isOccupied == true && tempIndex < count)
+            //                {
+            //                    occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel.stoel2.price, stoel.FindIndex(a => a == stoel2));
+            //                }
+            //            }
+            //            zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
+            //            for (int j = 0, i = 0; j < 100; j++)
+            //            {
+            //                if (j % 3 == 0)
+            //                {
+            //                    zaal.stoelen[j].isOccupied = false;
+            //                    zaal.stoelen[j].isOccupiedBy = 1;
+            //                    zaal.stoelen[j].Price = 10;
+            //                }
+            //                else
+            //                {
+            //                    zaal.stoelen[j].isOccupied = true;
+            //                    zaal.stoelen[j].isOccupiedBy = 0;
+            //                    zaal.stoelen[j].Price = 0;
+            //                }
+            //                int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
+            //                if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
+            //                {
+            //                    zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
+            //                    zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
+            //                    zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
+            //                    i++;
+            //                }
+            //            }
+            //            Json.WriteJson("Zalen", zalen.ToJson());
+            //        }
+            //    }
+            //    else
+            //    {
+            //        foreach (Zaal zaal in zalen.zalenList)
+            //        {
+            //            int count = 0;
+            //            List<Stoel> stoel = zaal.stoelen;
+            //            foreach (Stoel stoel2 in stoel)
+            //            {
+            //                if (stoel2.isOccupied == true && stoel2.Price != 0)
+            //                {
+            //                    count += 1;
+            //                }
+            //            }
+            //            Tuple<bool, int, double, int>[] occupiedStoelen = new Tuple<bool, int, double, int>[count];
+            //            int tempIndex = 0;
+            //            foreach (Stoel stoel2 in stoel)
+            //            {
+            //                if (stoel2.isOccupied == true && stoel2.Price != 0 && tempIndex < count)
+            //                {
+            //                    occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
+            //                }
+            //            }
+            //            zaal.setZaal(10, zaal.date, zaal.time, 100, zaal.film);
+            //            for (int j = 0, i = 0; j < 100; j++)
+            //            {
+            //                int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
+            //                if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
+            //                {
+            //                    zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
+            //                    zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
+            //                    zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
+            //                    i++;
+            //                }
+            //            }
+            //            Json.WriteJson("Zalen", zalen.ToJson());
+            //        }
+            //    }
+            //}
+
+            //public Tuple<int, bool[]> CountCinemaHalls()
+            //{
+            //    int zalenAmount = 0;
+            //    Zalen zalen = new Zalen();
+            //    string jsonZalen = Json.ReadJson("Zalen");
+            //    zalen = zalen.FromJson(jsonZalen);
+            //    foreach (Zaal zaal in zalen.zalenList)
+            //    {
+            //        zalenAmount++;
+            //    }
+            //    if (zalenAmount == 0) { return null; }
+            //    bool[] delete = new bool[zalenAmount];
+            //    int index = 0;
+            //    foreach (Zaal zaal in zalen.zalenList)
+            //    {
+            //        List<Stoel> stoel = zaal.stoelen;
+            //        foreach (Stoel stoel2 in stoel)
+            //        {
+            //            if (stoel2.isOccupied == true && stoel2.Price != 0 && index < delete.Length)
+            //            {
+            //                delete[index++] = false;
+            //            }
+            //        }
+            //    }
+            //    return Tuple.Create(zalenAmount, delete);
+            //}
+
+            //public void DeleteCinemaHall()
+            //{
+            //    Tuple<int, bool[]> zalenInfo = CountCinemaHalls();
+            //    Console.Clear();
+            //    if (zalenInfo != null)
+            //    {
+            //        bool asking = true;
+            //        while (asking)
+            //        {
+            //            Console.WriteLine($"Er zijn op dit moment {zalenInfo.Item1} zalen in de Bi-Os-Coop.\n Kies een zaal om te verwijderen: ");
+            //            try
+            //            {
+            //                asking = false;
+            //                int antwoord = Convert.ToInt32(Console.ReadLine());
+            //                if (antwoord < zalenInfo.Item1)
+            //                {
+            //                    int index = 1;
+            //                    Zalen zalen = new Zalen();
+            //                    string jsonZalen = Json.ReadJson("Zalen");
+            //                    zalen = zalen.FromJson(jsonZalen);
+            //                    foreach (Zaal zaal in zalen.zalenList)
+            //                    {
+            //                        if (index == antwoord)
+            //                        {
+            //                            if (zalenInfo.Item2[index - 1])
+            //                            {
+            //                                Console.WriteLine("lmao de code is nog niet af, sorry");
+            //                            }
+            //                            else
+            //                            {
+            //                                Console.WriteLine("Deze zaal kan niet verwijdert worden omdat er al stoelen zijn gereserveerd.");
+            //                            }
+            //                        }
+            //                        else { index++; }
+            //                    }
+            //                }
+            //            }
+            //            catch
+            //            {
+            //                string antwoord = Console.ReadLine();
+            //                Console.WriteLine($"De keuze {antwoord} is niet valide. Probeer het opnieuw");
+            //                asking = true;
+            //            }
+            //        }
+            //    }
+            //    else
+            //    {
+            //        Console.ForegroundColor = ConsoleColor.Red;
+            //        Console.WriteLine($"De zaal {zalenInfo.Item2} kan niet verwijdert worden.");
+            //        Console.ForegroundColor = ConsoleColor.Gray;
+            //        List<dynamic> mainmenuthings = new List<dynamic>() { null, "name", false, "None", "Nederlands" };
+            //        adminMenu.AM(mainmenuthings);
+            //    }
+            //    //nog niet af
+            //}
+
+            //public void AddAdmin()
+            //{
+            //    Console.WriteLine("Vul hier uw e-mailadres in: ");
+            //    string accountNaam = Console.ReadLine();
+            //    Console.WriteLine("Vul hier uw wachtwoord in: ");
+            //    string accountWachtwoord = Console.ReadLine();
+            //    //obv nog niet af
+            //}
+
+        public void CoronaFilter(bool isCoronaFilter)
+        {
+            Zalen zalen = new Zalen();
+            string jsonZalen = Json.ReadJson("Zalen");
+            zalen = zalen.FromJson(jsonZalen);
+            if (!isCoronaFilter)
+            {
+                foreach (Zaal zaal in zalen.zalenList)
+                {
+                    int count = 0;
+                    List<Stoel> stoel = zaal.stoelen;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true)
+                        {
+                            count += 1;
+                        }
+                    }
+                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
+                    int tempIndex = 0;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true && tempIndex < count)
+                        {
+                            occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
+                        }
+                    }
+
+                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
+                    for (int j = 0, i = 0; j < 100; j++)
+                    {
+                        if (j % 3 == 0)
+                        {
+                            zaal.stoelen[j].isOccupied = false;
+                            zaal.stoelen[j].isOccupiedBy = 1;
+                            zaal.stoelen[j].Price = Stoel.price.LOW;
+                        }
+                        else
+                        {
+                            zaal.stoelen[j].isOccupied = true;
+                            zaal.stoelen[j].isOccupiedBy = 0;
+                            zaal.stoelen[j].Price = 0;
+                        }
+                        int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
+                        if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
+                        {
+                            zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
+                            zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
+                            zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
+                            i++;
+                        }
+                    }
+                    Json.WriteJson("Zalen", zalen.ToJson());
+                }
+            }
+            else
+            {
+                foreach (Zaal zaal in zalen.zalenList)
+                {
+                    int count = 0;
+                    List<Stoel> stoel = zaal.stoelen;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true && stoel2.Price != 0)
+                        {
+                            count += 1;
+                        }
+                    }
+                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
+                    int tempIndex = 0;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true && stoel2.Price != 0 && tempIndex < count)
+                        {
+                            occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
+                        }
+                    }
+                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
+                    for (int j = 0, i = 0; j < 100; j++)
+                    {
+                        int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
+                        if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
+                        {
+                            zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
+                            zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
+                            zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
+                            i++;
+                        }
+                    }
+                    Json.WriteJson("Zalen", zalen.ToJson());
+                }
+            }
+        }
+    }
 }
\ No newline at end of file

commit de51dcb49a9214fdc9264393543cb8313b16e381
Merge: a8e889a fa47263
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 12:45:25 2021 +0200

    Merge remote-tracking branch 'origin/master'

commit a8e889a2ead553bb57730da3c5db37701d604f3a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 12:45:15 2021 +0200

    je kan nu films reserveren en zalen toevoegen
---
 Class/MovieMenu.cs |   8 +-
 Class/Zalen.cs     |  29 +-
 Class/adminMenu.cs |  12 +-
 Json/Zalen.json    | 899 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 916 insertions(+), 32 deletions(-)

diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 48431bc..6cda720 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -283,7 +283,13 @@ namespace Bi_Os_Coop.Class
             //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
             if (keypressed == ConsoleKey.J)
             {
-                Console.WriteLine("succes");
+                Zalen zalen = new Zalen();
+                string json = Json.ReadJson("Zalen");
+                zalen = zalen.FromJson(json);
+                Tuple<bool, List<Zaal>> zalenMetNaam = zalen.selectZalen(moviename);
+                zalen.menu(zalenMetNaam.Item2);
+                json = zalen.ToJson();
+                Json.WriteJson("Zalen" ,json);
             }
         }
     }
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 74bcc32..a4c53b1 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -205,11 +205,8 @@ namespace Bi_Os_Coop.Class
                 Console.WriteLine($"Couldn't find any movie with name {naam}");
                 return Tuple.Create(false, selectedzalen.ToList());
             }
-
         }
-
     }
-
     internal class Zaal
     {
         public enum Size // https://imgur.com/gallery/FmTnf7e Size chart
@@ -317,21 +314,28 @@ namespace Bi_Os_Coop.Class
             {
                 foreach (int index in indexs)
                 {
-                    if (stoelen.ElementAt(index).isOccupied)
+                    if (stoelen.ElementAt(index).isOccupied || stoelen.ElementAt(index).Price == Stoel.price.NONE)
                     {
-                        Console.WriteLine($"{index} stool is already ");
+                        Console.WriteLine($"{index + 1} stool is already Occupied");
                         return -1;
                     }
+                }
+                foreach (int index in indexs)
+                {
                     stoelen.ElementAt(index).isOccupied = true;
                     //Console.WriteLine($"{index} is now occupied by {orderer.id}");
                     stoelen.ElementAt(index).isOccupiedBy = orderer.id;
                 }
                 return 1;
             }
-            catch (ArgumentOutOfRangeException)
+            catch (Exception ex)
             {
-                Console.WriteLine("\n\none of the chairs is not valid"); // Textbox.Hint
-                return 0;
+                if (ex is ArgumentException)
+                {
+                    Console.WriteLine("\n\none of the chairs is not valid"); // Textbox.Hint
+                    return 0;
+                }
+                else throw;
             }
         }
 
@@ -418,10 +422,13 @@ namespace Bi_Os_Coop.Class
                 this.isOccupied = true;
                 this.isOccupiedBy = 1;
                 this.Price = prijs;
-                return;
             }
-            this.isOccupied = false;
-            this.Price = prijs;
+            else
+            {
+                this.isOccupied = false;
+                this.Price = prijs;
+            }
+            
         }
 
         public price stoolworth(int index, int size)
diff --git a/Class/adminMenu.cs b/Class/adminMenu.cs
index 940f9f7..655eb4b 100644
--- a/Class/adminMenu.cs
+++ b/Class/adminMenu.cs
@@ -43,11 +43,11 @@ namespace Bi_Os_Coop.Class
                     MainMenu.ClearAndShowLogoPlusEsc("Admin");
                     admin.DeleteMovies();
                 }
-                //else if (keuze == ConsoleKey.D5)
-                //{
-                //    Console.Clear();
-                //    admin.AddCinemaHall();
-                //}
+                else if (keuze == ConsoleKey.D5)
+                {
+                    Console.Clear();
+                    admin.AddCinemaHall();
+                }
                 //else if (keuze == ConsoleKey.D6)
                 //{
                 //    Console.Clear();
@@ -95,7 +95,7 @@ namespace Bi_Os_Coop.Class
             Console.WriteLine("4) Film verwijderen");
             //if (zalenInfo.Item1 == 1) { Console.WriteLine($"5) Zaal toevoegen \t Er is {zalenInfo.Item1} zaal"); }
             //else if (zalenInfo.Item1 > 1) { Console.WriteLine($"5) Zaal toevoegen \t Er zijn {zalenInfo.Item1} zalen"); }
-            //else { Console.WriteLine($"5) Zaal toevoegen \t Er zijn geen zalen"); }
+            Console.WriteLine($"5) Zaal toevoegen");
             //Console.WriteLine("6) Zaal verwijderen");
             //Console.WriteLine("7) Admin Toevoegen");
             //Console.WriteLine($"8) Corona filter toepassen \t {adminMethod.coronaCheck()}");
diff --git a/Json/Zalen.json b/Json/Zalen.json
index 5ebb76d..c3ba122 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -17,31 +17,33 @@
           "Ryan Reynold"
         ],
         "taal": null,
-        "beschrijving": null
+        "beschrijving": null,
+        "trailer": null,
+        "MovieTime": 0
       },
       "stoelen": [
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 0
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 0
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 0
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 0
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 10
         },
@@ -81,7 +83,7 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 10
         },
@@ -2906,22 +2908,22 @@
           "Price": 0
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 0
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 10
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 10
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 10
         },
@@ -2976,7 +2978,7 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
+          "isOccupied": true,
           "isOccupiedBy": 1,
           "Price": 10
         },
@@ -3189,7 +3191,9 @@
           "Ryan Reynold"
         ],
         "taal": null,
-        "beschrijving": null
+        "beschrijving": null,
+        "trailer": null,
+        "MovieTime": 0
       },
       "stoelen": [
         {
@@ -4921,7 +4925,9 @@
           "Ryan Reynold"
         ],
         "taal": null,
-        "beschrijving": null
+        "beschrijving": null,
+        "trailer": null,
+        "MovieTime": 0
       },
       "stoelen": [
         {
@@ -5765,6 +5771,871 @@
           "Price": 0
         }
       ]
+    },
+    {
+      "date": "26/5/2021",
+      "time": "16:00",
+      "film": {
+        "movieid": 8,
+        "name": "Henk Fiction",
+        "releasedate": "03/01/1994",
+        "genres": [
+          "Actie",
+          "Avontuur"
+        ],
+        "leeftijd": 12,
+        "beoordeling": 7,
+        "acteurs": [
+          "Hajar",
+          "Hugo"
+        ],
+        "taal": "Engels",
+        "beschrijving": "De film vertelt vier verhalen, die in een niet-chronologische volgorde getoond worden. Elk verhaal afzonderlijk speelt zich wel chronologisch af. De vier verhalen zijn ook onderling verweven, waarbij Henk de enige is die in de vier verhalen een rol speelt.",
+        "trailer": null,
+        "MovieTime": 0
+      },
+      "stoelen": [
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 1,
+          "Price": 0
+        }
+      ]
     }
   ]
 }
\ No newline at end of file

commit 3b1b2c82f7a1bfb82cec63db787256040038def5
Merge: e3f5000 fa9ba1e
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 11:41:27 2021 +0200

    Merge remote-tracking branch 'origin/master'

commit e3f5000b22003cfa9d5d3ca137e6ec06f521109f
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 11:41:17 2021 +0200

    some slight edits
---
 Class/AdminMethods.cs |  3 +--
 Class/MovieMenu.cs    | 12 ++++++++++--
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/Class/AdminMethods.cs b/Class/AdminMethods.cs
index 96ce0d6..64457d9 100644
--- a/Class/AdminMethods.cs
+++ b/Class/AdminMethods.cs
@@ -235,7 +235,7 @@ namespace Bi_Os_Coop.Class
                             occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
                         }
                     }
-#warning "ik heb dit aangepast want de chairwidt is niet meer nodig"
+
                     zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
                     for (int j = 0, i = 0; j < 100; j++)
                     {
@@ -285,7 +285,6 @@ namespace Bi_Os_Coop.Class
                             occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
                         }
                     }
-#warning "ik heb dit aangepast want de chairwidt is niet meer nodig"
                     zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
                     for (int j = 0, i = 0; j < 100; j++)
                     {
diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 6d37a96..f8ab893 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -273,10 +273,18 @@ namespace Bi_Os_Coop.Class
             ConsoleKey keypressed = Console.ReadKey(true).Key;
             if (hastrailer == true)
             {
-                if (keypressed == ConsoleKey.T) { System.Diagnostics.Process.Start(trailer); Console.Clear(); showmov(tempMovie); }
+                if (keypressed == ConsoleKey.T)
+                {
+                    System.Diagnostics.Process.Start(trailer);
+                    Console.Clear();
+                    showmov(tempMovie);
+                } // Idiot Esception
             }
             //verander Console.WriteLine("succes"); naar het reserveer scherm van hogo
-            if (keypressed == ConsoleKey.J) { Console.WriteLine("succes"); }
+            if (keypressed == ConsoleKey.J)
+            {
+                Console.WriteLine("succes");
+            }
         }
     }
 }

commit b992dc4871871606bba8b894143219736bda2fb5
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 25 11:18:05 2021 +0200

    Code clean up time :) als je hier over gaat zeiken ga ik al je classes na en daar over zeiken
---
 Class/AdminMethods.cs        |   5 +-
 Class/CPeople.cs             |   7 +--
 Class/Json.cs                |   7 +--
 Class/LevenshteinDistance.cs |   6 +--
 Class/MainMenu.cs            |   6 +--
 Class/MainMenuThings.cs      |   8 +---
 Class/MovieInterpreter.cs    |   7 +--
 Class/MovieMenu.cs           |   5 +-
 Class/MovieMethods.cs        |   2 +-
 Class/PasswordMethods.cs     |   3 +-
 Class/Registerscreen.cs      |  18 +++----
 Class/UserProfile.cs         |   3 +-
 Class/ViewReservations.cs    |   6 +--
 Class/Zalen.cs               | 110 +++++++++++++------------------------------
 Class/adminMenu.cs           |   7 +--
 Class/loginscherm.cs         |   5 +-
 Program.cs                   |   2 +
 17 files changed, 61 insertions(+), 146 deletions(-)

diff --git a/Class/AdminMethods.cs b/Class/AdminMethods.cs
index f0ca9aa..96ce0d6 100644
--- a/Class/AdminMethods.cs
+++ b/Class/AdminMethods.cs
@@ -1,10 +1,7 @@
 ﻿using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
         public class adminMethods
         {
diff --git a/Class/CPeople.cs b/Class/CPeople.cs
index b1f4413..9eb8da7 100644
--- a/Class/CPeople.cs
+++ b/Class/CPeople.cs
@@ -1,13 +1,10 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using System.Text.Json;
-using System.IO;
 using System.Security;
+using System.Text.Json;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     public class PeopleTest
     {
diff --git a/Class/Json.cs b/Class/Json.cs
index fa5a46b..eb43c85 100644
--- a/Class/Json.cs
+++ b/Class/Json.cs
@@ -1,12 +1,7 @@
 ﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using System.Text.Json;
 using System.IO;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     class Json
     {
diff --git a/Class/LevenshteinDistance.cs b/Class/LevenshteinDistance.cs
index 1690414..aa97db0 100644
--- a/Class/LevenshteinDistance.cs
+++ b/Class/LevenshteinDistance.cs
@@ -1,10 +1,6 @@
 ﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     /// <summary>
     /// Deze class berekent hoeveel veranderingen er nodig zijn om een string gelijk te stellen aan een andere, des te lager de uitkomst des te meer het op de andere string lijkt.
diff --git a/Class/MainMenu.cs b/Class/MainMenu.cs
index 1238597..1ec909d 100644
--- a/Class/MainMenu.cs
+++ b/Class/MainMenu.cs
@@ -1,11 +1,9 @@
 ﻿using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using System.Text.Json;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     class MainMenu
     {
@@ -60,7 +58,7 @@ namespace Bi_Os_Coop
             if (reverse) { listing.Reverse(); }
             return listing;
         }
-        public static Bi_Os_Coop.Films getfilmlist()
+        public static Films getfilmlist()
         {
             string json = Json.ReadJson("Films");
             return JsonSerializer.Deserialize<Films>(json);
diff --git a/Class/MainMenuThings.cs b/Class/MainMenuThings.cs
index ff7bde7..5d3fe81 100644
--- a/Class/MainMenuThings.cs
+++ b/Class/MainMenuThings.cs
@@ -1,10 +1,4 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace Bi_Os_Coop
+﻿namespace Bi_Os_Coop.Class
 {
     class MainMenuThings
     {
diff --git a/Class/MovieInterpreter.cs b/Class/MovieInterpreter.cs
index c78c40c..1fe51f1 100644
--- a/Class/MovieInterpreter.cs
+++ b/Class/MovieInterpreter.cs
@@ -1,10 +1,7 @@
-﻿using System;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
 using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     public class MovieInterpreter
     {
diff --git a/Class/MovieMenu.cs b/Class/MovieMenu.cs
index 8f57678..6d37a96 100644
--- a/Class/MovieMenu.cs
+++ b/Class/MovieMenu.cs
@@ -1,13 +1,10 @@
 ﻿using System;
-using System.Windows.Input;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
 using System.Text.Json;
-using System.Threading.Tasks;
 using System.Threading;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     class MovieMenu
     {
diff --git a/Class/MovieMethods.cs b/Class/MovieMethods.cs
index b8adbd0..bdcaf1f 100644
--- a/Class/MovieMethods.cs
+++ b/Class/MovieMethods.cs
@@ -3,7 +3,7 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text.Json;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     public class MovieMethods
     {
diff --git a/Class/PasswordMethods.cs b/Class/PasswordMethods.cs
index c420955..ec23732 100644
--- a/Class/PasswordMethods.cs
+++ b/Class/PasswordMethods.cs
@@ -1,9 +1,8 @@
 ﻿using System;
 using System.Linq;
 using System.Text.Json;
-using System.Collections.Generic;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     public class PasswordMethods
     {
diff --git a/Class/Registerscreen.cs b/Class/Registerscreen.cs
index 49d2d7d..f9dbd83 100644
--- a/Class/Registerscreen.cs
+++ b/Class/Registerscreen.cs
@@ -1,14 +1,10 @@
 ﻿using System;
-using System.Collections.Generic;
 using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using System.Text.Json;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     class Registerscreen
-    {   
+    {
 
         /// <summary>
         /// CreateAccount is een functie waarin alle functies uit de class registerscreen achter elkaar worden uitgevoerd. Als je dus een heel nieuw account wilt maken moet je deze functie uitvoeren.
@@ -36,7 +32,7 @@ namespace Bi_Os_Coop
                 string password = validCheck("wachtwoord", lengthCheck);
                 if (password == "1go2to3main4menu5") { return; }
 
-                //In de volgende code worden alle inputs van de gebruiker opgeslagen 
+                //In de volgende code worden alle inputs van de gebruiker opgeslagen
                 CPeople.Person customer = new CPeople.Person();
                 customer.setPerson(id, naam, email.ToLower(), password, birthdate, phoneNumber);
                 jsonPeople.AddPerson(customer);
@@ -138,7 +134,7 @@ namespace Bi_Os_Coop
                     }
                     if (function(input))
                         valid = true;
-                }               
+                }
             }
 
 
@@ -300,7 +296,7 @@ namespace Bi_Os_Coop
 
         /// <summary>
         /// AgeVerify berekent de leeftijd aan de hand van variabele 'birthdate'. Je kunt ook een minimumleeftijd instellen, als je die niet meestuurt is het by default '0'.
-        /// 'birthdate' moet als format dd/mm/jjjj. Het maakt niet uit wat er op index 2 en 5 staat, zolang de volgorde maar dag/maand/jaar is en zolang de data 
+        /// 'birthdate' moet als format dd/mm/jjjj. Het maakt niet uit wat er op index 2 en 5 staat, zolang de volgorde maar dag/maand/jaar is en zolang de data
         /// maar op index [0,1][3,4][6,7,8,9] staan.
         /// Als de berekende leeftijd hetzelfde, of hoger, is dan de minimumleeftijd, dan returnt de functie 'true'. Anders returtn de functie 'false'
         /// </summary>
@@ -309,7 +305,7 @@ namespace Bi_Os_Coop
         /// <returns></returns>
         public static bool AgeVerify(string birthdate, int minimumAge = 0)
         {
-            
+
             //Hieronder wordt de huidige datum gecheckt en wordt de datum uit de 'birthdate' variabele gehaald.
             DateTime todaysDate = DateTime.Now.Date;
             int currentDay = todaysDate.Day;
@@ -319,7 +315,7 @@ namespace Bi_Os_Coop
             int month = int.Parse(birthdate.Substring(3, 2));
             int day = int.Parse(birthdate.Substring(0, 2));
             int age = currentYear - birthYear;
-            
+
             //Hieronder wordt berekend wat de leeftijd is.
             if (month > currentMonth)
             {
diff --git a/Class/UserProfile.cs b/Class/UserProfile.cs
index e023b9d..7d13620 100644
--- a/Class/UserProfile.cs
+++ b/Class/UserProfile.cs
@@ -1,9 +1,8 @@
 ﻿using System;
-using System.Collections.Generic;
 using System.Linq;
 using System.Text.Json;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     public class UserProfile
     {
diff --git a/Class/ViewReservations.cs b/Class/ViewReservations.cs
index fe14e3d..c59892e 100644
--- a/Class/ViewReservations.cs
+++ b/Class/ViewReservations.cs
@@ -1,11 +1,9 @@
 ﻿using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
 using System.Text.Json;
-using System.Threading.Tasks;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     class ViewReservations
     {
@@ -202,7 +200,7 @@ namespace Bi_Os_Coop
             string json = Json.ReadJson("Films");
             Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
             int tempMovie = 0;
-        
+
             for (int i = 0; i < jsonFilms.movieList.Count(); i++)
             {
                 if (jsonFilms.movieList[i].movieid == movieid)
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 6b3eb1c..74bcc32 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -3,62 +3,8 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text.Json;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
-    public class ZAALTESTERNIETGEBRUIKEN
-    {
-        public void Test()
-        {
-            Zalen zalen = new Zalen();
-            zalen = zalen.FromJson(Json.ReadJson("Zalen"));
-            var a = zalen.selectZalen("JsonBjorn");
-            //ZalenExtender.reserveren(a.Item2);
-
-            //DateTime today = new DateTime(2021, 6, 15);
-            ///Console.WriteLine(today.ToString());
-            //string todaystring = $"0{today.Day}/0{today.Month}/{today.Year}";
-            //Console.WriteLine(todaystring);
-            //Zalen testzaal = new Zalen();
-            //Zaal tijdelijkeZaal = new Zaal();
-            ////tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100);
-            //tijdelijkeZaal.showStool();
-            //CPeople.Person Henk = new CPeople.Person();
-            //Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
-            ////tijdelijkeZaal.Reser(-5, Henk);
-            //Console.ReadKey();
-            //testzaal.AddZaal(tijdelijkeZaal);
-            //testzaal.writeZalen();
-            //string json = testzaal.ToJson();
-            //Json.WriteJson("Zalen", json);
-            //Console.ReadKey();
-            Zalen testzaal2 = new Zalen();
-            string json2 = Json.ReadJson("Zalen");
-            testzaal2 = testzaal2.FromJson(json2);
-            //int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
-            //int gfdjhfskd = 30;
-            //testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
-            //testzaal2.writeZalen();
-            Console.WriteLine("Name a film you want to search");
-            string henk = Console.ReadLine();
-            //foreach (Zaal zaal in testzaal2.zalenList)
-            //{
-            //    zaal.showStool();
-            //    Console.ReadKey();
-            //}
-
-            Tuple<bool, List<Zaal>> temp = testzaal2.selectZalen(henk);
-            //ZalenExtender.menu(temp.Item2);
-            json2 = testzaal2.ToJson();
-            Json.WriteJson("Zalen", json2);
-            testzaal2 = testzaal2.FromJson(json2);
-            foreach (Zaal zaal in testzaal2.zalenList)
-            {
-                zaal.showStool();
-                Console.ReadKey(true);
-            }
-            //Console.WriteLine("");
-        }
-    }
     internal static class ZalenExtender
     {
         public static void writeZalen(List<Zaal> selected)
@@ -75,15 +21,15 @@ namespace Bi_Os_Coop
                 Console.Write($"Score:{zaal.film.beoordeling}\t");
                 if (zaal.stoelen.Count == 630)
                 {
-                    Console.Write($"Zaal:{1}\t");
+                    Console.Write("Zaal: 1\t");
                 }
                 else if (zaal.stoelen.Count == 342)
                 {
-                    Console.Write($"Zaal:{2}\t");
+                    Console.Write("Zaal: 2\t");
                 }
                 else
                 {
-                    Console.Write($"Zaal:{3}\t");
+                    Console.Write("Zaal: 3\t");
                 }
                 counter++;
             }
@@ -110,20 +56,30 @@ namespace Bi_Os_Coop
                 choosenone.showStool();
                 Console.WriteLine("\nSelect the seats you want to reserve add an ',' between the stools ");
                 string henk = Console.ReadLine();
-                henk = henk.Trim();
-                string[] henkerino = henk.Split(',');
-                List<int> allIndexes = new List<int>();
-                foreach (string i in henkerino)
+                if (henk != null)
                 {
-                    if (Convert.ToInt32(i) == 0)
+                    henk = henk.Trim();
+                    string[] henkerino = henk.Split(',');
+                    List<int> allIndexes = new List<int>();
+                    foreach (string i in henkerino)
                     {
-                        Console.WriteLine("input was not a number");
+                        if (Convert.ToInt32(i) == 0)
+                        {
+                            Console.WriteLine("input was not a number");
+                        }
+
+                        allIndexes.Add(Convert.ToInt32(i) - 1);
                     }
-                    allIndexes.Add(Convert.ToInt32(i) -1 );
+
+                    MainMenuThings mmt = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson("MainMenu"));
+                    int[] indexes = allIndexes.ToArray();
+                    if (mmt != null) choosenone.occupyStool(indexes, mmt.user);
                 }
-                MainMenuThings mmt = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson("MainMenu"));
-                int[] indexes = allIndexes.ToArray();
-                choosenone.occupyStool(indexes, mmt.user);
+                else
+                {
+                    return;
+                }
+
                 string json1 = this.ToJson();
                 Json.WriteJson("Zalen", json1);
             }
@@ -159,15 +115,15 @@ namespace Bi_Os_Coop
                 Console.Write($"Score:{zaal.film.beoordeling}\t");
                 if (zaal.stoelen.Count == 630)
                 {
-                    Console.Write($"Zaal:{1}\t");
+                    Console.Write("Zaal: 1\t");
                 }
                 else if (zaal.stoelen.Count == 342)
                 {
-                    Console.Write($"Zaal:{2}\t");
+                    Console.Write("Zaal: 2\t");
                 }
                 else
                 {
-                    Console.Write($"Zaal:{3}\t");
+                    Console.Write("Zaal: 3\t");
                 }
                 counter++;
             }
@@ -186,15 +142,15 @@ namespace Bi_Os_Coop
                 Console.Write($"Score:{zaal.film.beoordeling}\t");
                 if (zaal.stoelen.Count == 630)
                 {
-                    Console.Write($"Zaal:{1}\t");
+                    Console.Write("Zaal: 1\t");
                 }
                 else if (zaal.stoelen.Count == 342)
                 {
-                    Console.Write($"Zaal:{2}\t");
+                    Console.Write("Zaal: 2\t");
                 }
                 else
                 {
-                    Console.Write($"Zaal:{3}\t");
+                    Console.Write("Zaal: 3\t");
                 }
                 counter++;
             }
@@ -256,7 +212,7 @@ namespace Bi_Os_Coop
 
     internal class Zaal
     {
-        public enum Size : int // https://imgur.com/gallery/FmTnf7e Size chart
+        public enum Size // https://imgur.com/gallery/FmTnf7e Size chart
         {
             MegaChonker = 500,
             heftyChonk = 300,
@@ -374,7 +330,7 @@ namespace Bi_Os_Coop
             }
             catch (ArgumentOutOfRangeException)
             {
-                Console.WriteLine($"\n\none of the chairs is not valid"); // Textbox.Hint
+                Console.WriteLine("\n\none of the chairs is not valid"); // Textbox.Hint
                 return 0;
             }
         }
@@ -444,7 +400,7 @@ namespace Bi_Os_Coop
 
     internal class Stoel
     {
-        public enum price : int
+        public enum price
         {
             HIGH = 20,
             MEDIUM = 15,
diff --git a/Class/adminMenu.cs b/Class/adminMenu.cs
index 3348a57..940f9f7 100644
--- a/Class/adminMenu.cs
+++ b/Class/adminMenu.cs
@@ -1,11 +1,6 @@
 ﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using System.Text.Json;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     public class adminMenu
     {
diff --git a/Class/loginscherm.cs b/Class/loginscherm.cs
index e00f080..3898903 100644
--- a/Class/loginscherm.cs
+++ b/Class/loginscherm.cs
@@ -1,11 +1,10 @@
 ﻿using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using System.Security;
+using System.Text;
 
-namespace Bi_Os_Coop
+namespace Bi_Os_Coop.Class
 {
     class loginscherm
     {
diff --git a/Program.cs b/Program.cs
index 44292ef..50b5820 100644
--- a/Program.cs
+++ b/Program.cs
@@ -5,6 +5,8 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
+using Bi_Os_Coop.Class;
+
 // dertigste test - Hajar
 
 namespace Bi_Os_Coop

commit 14f12196ecbaf8554ac2c86129dc8b94e7b93209
Merge: 43198f7 a4c81d3
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon May 24 15:03:35 2021 +0200

    Merge branch 'master' of https://github.com/HugoVG/Bi-Os-Coop

commit 43198f7b3344b64c397f2d141f24e7f307822d0b
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon May 24 15:03:26 2021 +0200

    will list which hall it is in
---
 Class/Zalen.cs | 42 +++++++++++++++++++++++++++++++++++++++---
 1 file changed, 39 insertions(+), 3 deletions(-)

diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index aed9a87..6b3eb1c 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -72,7 +72,19 @@ namespace Bi_Os_Coop
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film.name} \t");
                 Console.Write($"release Date:{zaal.film.releasedate} \t");
-                Console.Write($"Score:{zaal.film.beoordeling} ");
+                Console.Write($"Score:{zaal.film.beoordeling}\t");
+                if (zaal.stoelen.Count == 630)
+                {
+                    Console.Write($"Zaal:{1}\t");
+                }
+                else if (zaal.stoelen.Count == 342)
+                {
+                    Console.Write($"Zaal:{2}\t");
+                }
+                else
+                {
+                    Console.Write($"Zaal:{3}\t");
+                }
                 counter++;
             }
         }
@@ -144,7 +156,19 @@ namespace Bi_Os_Coop
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film.name} \t");
                 Console.Write($"release Date:{zaal.film.releasedate} \t");
-                Console.Write($"Score:{zaal.film.beoordeling} ");
+                Console.Write($"Score:{zaal.film.beoordeling}\t");
+                if (zaal.stoelen.Count == 630)
+                {
+                    Console.Write($"Zaal:{1}\t");
+                }
+                else if (zaal.stoelen.Count == 342)
+                {
+                    Console.Write($"Zaal:{2}\t");
+                }
+                else
+                {
+                    Console.Write($"Zaal:{3}\t");
+                }
                 counter++;
             }
         }
@@ -159,7 +183,19 @@ namespace Bi_Os_Coop
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film.name} \t");
                 Console.Write($"release Date:{zaal.film.releasedate} \t");
-                Console.Write($"Score:{zaal.film.beoordeling} ");
+                Console.Write($"Score:{zaal.film.beoordeling}\t");
+                if (zaal.stoelen.Count == 630)
+                {
+                    Console.Write($"Zaal:{1}\t");
+                }
+                else if (zaal.stoelen.Count == 342)
+                {
+                    Console.Write($"Zaal:{2}\t");
+                }
+                else
+                {
+                    Console.Write($"Zaal:{3}\t");
+                }
                 counter++;
             }
         }

commit 7304d189c69f3a20db106260b656c2f4514aef94
gpg: Signature made Thu May 20 12:18:36 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 0a226d9 0c04fd5
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu May 20 12:18:36 2021 +0200

    Merge pull request #63 from HugoVG/Reservering
    
    Done

commit 0c04fd5206e2fd1b71f70757e13721400f757d7b
gpg: Signature made Thu May 20 12:18:29 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: c49013f 0a226d9
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu May 20 12:18:29 2021 +0200

    Merge branch 'master' into Reservering

commit c49013f6489cdaab36e470e6c00cef4f315eb537
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu May 20 12:17:47 2021 +0200

    Done
---
 .gitignore       |  4 ++-
 Class/CPeople.cs |  5 ++-
 Class/Zalen.cs   | 77 ++++++++++++++++++++++++++++-------------------
 Json/Zalen.json  | 92 ++++++++++++++++++++++++++++----------------------------
 Program.cs       |  5 +--
 5 files changed, 102 insertions(+), 81 deletions(-)

diff --git a/.gitignore b/.gitignore
index 4ce6fdd..bf122eb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -337,4 +337,6 @@ ASALocalRun/
 .localhistory/
 
 # BeatPulse healthcheck temp database
-healthchecksdb
\ No newline at end of file
+healthchecksdb
+/commits.txt
+/commits.patch
diff --git a/Class/CPeople.cs b/Class/CPeople.cs
index 6d65fea..d76b6b0 100644
--- a/Class/CPeople.cs
+++ b/Class/CPeople.cs
@@ -239,7 +239,10 @@ namespace Bi_Os_Coop
 
             public void BookTicket()
             {
-
+                Zalen zalen = new Zalen();
+                zalen = zalen.FromJson(Json.ReadJson("Zalen"));
+                var a = zalen.selectZalen("JsonBjorn");
+                zalen.menu(a.Item2);
             }
 
             public void CancelTicket()
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index b722f4f..aed9a87 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -9,16 +9,21 @@ namespace Bi_Os_Coop
     {
         public void Test()
         {
-            DateTime today = new DateTime(2021, 6, 15);
-            Console.WriteLine(today.ToString());
-            string todaystring = $"0{today.Day}/0{today.Month}/{today.Year}";
-            Console.WriteLine(todaystring);
+            Zalen zalen = new Zalen();
+            zalen = zalen.FromJson(Json.ReadJson("Zalen"));
+            var a = zalen.selectZalen("JsonBjorn");
+            //ZalenExtender.reserveren(a.Item2);
+
+            //DateTime today = new DateTime(2021, 6, 15);
+            ///Console.WriteLine(today.ToString());
+            //string todaystring = $"0{today.Day}/0{today.Month}/{today.Year}";
+            //Console.WriteLine(todaystring);
             //Zalen testzaal = new Zalen();
             //Zaal tijdelijkeZaal = new Zaal();
             ////tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100);
             //tijdelijkeZaal.showStool();
-            CPeople.Person Henk = new CPeople.Person();
-            Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
+            //CPeople.Person Henk = new CPeople.Person();
+            //Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
             ////tijdelijkeZaal.Reser(-5, Henk);
             //Console.ReadKey();
             //testzaal.AddZaal(tijdelijkeZaal);
@@ -42,7 +47,7 @@ namespace Bi_Os_Coop
             //}
 
             Tuple<bool, List<Zaal>> temp = testzaal2.selectZalen(henk);
-            ZalenExtender.menu(temp.Item2);
+            //ZalenExtender.menu(temp.Item2);
             json2 = testzaal2.ToJson();
             Json.WriteJson("Zalen", json2);
             testzaal2 = testzaal2.FromJson(json2);
@@ -51,7 +56,7 @@ namespace Bi_Os_Coop
                 zaal.showStool();
                 Console.ReadKey(true);
             }
-            Console.WriteLine("");
+            //Console.WriteLine("");
         }
     }
     internal static class ZalenExtender
@@ -71,17 +76,27 @@ namespace Bi_Os_Coop
                 counter++;
             }
         }
-        public static Zaal menu(List<Zaal> selected)
+        /// <summary>
+        /// Put in a list of 'Zalen' in which it will choose from -> use this as a list of zalen wwitht the same movie
+        /// </summary>
+        /// <param name="selected"></param>
+        /// <returns></returns>
+    }
+    internal class Zalen
+    {
+        public List<Zaal> zalenList { get; set; }
+
+        public void menu(List<Zaal> selected)
         {
             writeZalen(selected);
-            Console.WriteLine("select the number of the timeframe and date you want to order");
-            string temp  = Console.ReadLine();
+            Console.WriteLine("\nselect the number of the timeframe and date you want to order");
+            string temp = Console.ReadLine();
             try
             {
-                int index = Convert.ToInt32(temp) - 1;
-                Zaal choosenone = selected.ElementAt(index);
+                int index = Convert.ToInt32(temp);
+                Zaal choosenone = selected.ElementAt(index-1);
                 choosenone.showStool();
-                Console.WriteLine("Select the seats you want to reserve add an ',' between the stools ");
+                Console.WriteLine("\nSelect the seats you want to reserve add an ',' between the stools ");
                 string henk = Console.ReadLine();
                 henk = henk.Trim();
                 string[] henkerino = henk.Split(',');
@@ -92,25 +107,19 @@ namespace Bi_Os_Coop
                     {
                         Console.WriteLine("input was not a number");
                     }
-                    allIndexes.Add(Convert.ToInt32(i));
+                    allIndexes.Add(Convert.ToInt32(i) -1 );
                 }
-                
                 MainMenuThings mmt = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson("MainMenu"));
-                //CPeople.Person person = new CPeople.Person {id= mmt.user.id};
-
                 int[] indexes = allIndexes.ToArray();
                 choosenone.occupyStool(indexes, mmt.user);
-                //choosenone.occupyStool();
-                //choosenone.showStool();
-
-                return choosenone;
+                string json1 = this.ToJson();
+                Json.WriteJson("Zalen", json1);
             }
-            catch (FormatException) { Console.WriteLine("Invalid Number"); return null; }
+            catch (FormatException) { Console.WriteLine("Invalid Number"); menu(selected); }
+
+
         }
-    }
-    internal class Zalen
-    {
-        public List<Zaal> zalenList { get; set; }
+
 
         public void AddZaal(Zaal zaal)
         {
@@ -127,25 +136,31 @@ namespace Bi_Os_Coop
 
         public void writeZalen()
         {
+            int counter = 1;
             foreach (Zaal zaal in this.zalenList)
             {
-                Console.Write($"\ndate:{zaal.date} \t");
+                Console.Write($"\n{counter} \t");
+                Console.Write($"date:{zaal.date} \t");
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film.name} \t");
                 Console.Write($"release Date:{zaal.film.releasedate} \t");
                 Console.Write($"Score:{zaal.film.beoordeling} ");
+                counter++;
             }
         }
         public void writeZalen(List<Zaal> selected)
         {
+            int counter = 1;
             //List<Zaal> showingzaal = this.zalenList;
             foreach (Zaal zaal in selected)
             {
-                Console.Write($"\ndate:{zaal.date} \t");
+                Console.Write($"\n{counter} \t");
+                Console.Write($"date:{zaal.date} \t");
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film.name} \t");
                 Console.Write($"release Date:{zaal.film.releasedate} \t");
                 Console.Write($"Score:{zaal.film.beoordeling} ");
+                counter++;
             }
         }
 
@@ -231,7 +246,7 @@ namespace Bi_Os_Coop
                 nstoelen.Add(stoel);
                 stoelen = nstoelen;
             }*/
-            /// De +130 // +42 // +18 is voor 
+            /// De +130 // +42 // +18 is voor
             /// de lege stoelen in de excel sheet
             if (totalStools == (int)Size.MegaChonker)
             {
@@ -316,7 +331,7 @@ namespace Bi_Os_Coop
                         return -1;
                     }
                     stoelen.ElementAt(index).isOccupied = true;
-                    Console.WriteLine($"{index} is now occupied by {orderer.id}");
+                    //Console.WriteLine($"{index} is now occupied by {orderer.id}");
                     stoelen.ElementAt(index).isOccupiedBy = orderer.id;
                 }
                 return 1;
diff --git a/Json/Zalen.json b/Json/Zalen.json
index b16ccde..5ebb76d 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -46,38 +46,38 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
@@ -86,38 +86,38 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
@@ -201,18 +201,18 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
@@ -351,18 +351,18 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 15
         },
         {
@@ -3393,18 +3393,18 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 15
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 15
         },
         {
diff --git a/Program.cs b/Program.cs
index 0454f49..1605878 100644
--- a/Program.cs
+++ b/Program.cs
@@ -20,12 +20,13 @@ namespace Bi_Os_Coop
             //Console.WriteLine(tempadm.isPerson());
 
             CPeople.Person tempperson = new CPeople.Person();
+            tempperson.BookTicket();
             //Console.WriteLine(tempperson.isAdmin());
             //Console.WriteLine(tempperson.isPerson());
             //tempadm.AddCinemaHall();
             //Hier in de testen
-            ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
-            test.Test();
+            //ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
+            //test.Test();
             //Test Gelukt
             //PeopleTest.newADMIN();
             //MainMenu.MainMenuShow();

commit 45c754f8bd777a6d64e15a41ab8cb23f6147c1f4
Merge: 77207b0 6f22028
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 18 12:50:57 2021 +0200

    Merge branch 'master' of https://github.com/HugoVG/Bi-Os-Coop

commit 77207b05a8296ef2511e67263a58f715fb518765
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 18 12:16:20 2021 +0200

    fhgsdjfnsdklfksdfds
---
 Class/Zalen.cs | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index b722f4f..2204e3b 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -74,14 +74,14 @@ namespace Bi_Os_Coop
         public static Zaal menu(List<Zaal> selected)
         {
             writeZalen(selected);
-            Console.WriteLine("select the number of the timeframe and date you want to order");
+            Console.WriteLine("\nselect the number of the timeframe and date you want to order");
             string temp  = Console.ReadLine();
             try
             {
                 int index = Convert.ToInt32(temp) - 1;
                 Zaal choosenone = selected.ElementAt(index);
                 choosenone.showStool();
-                Console.WriteLine("Select the seats you want to reserve add an ',' between the stools ");
+                Console.WriteLine("\nSelect the seats you want to reserve add an ',' between the stools ");
                 string henk = Console.ReadLine();
                 henk = henk.Trim();
                 string[] henkerino = henk.Split(',');

commit 704845e96bf6c76637a108166f2480e2bee4a788
gpg: Signature made Tue May 18 11:38:21 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 39f783b 2dcbdf6
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 18 11:38:21 2021 +0200

    Merge pull request #59 from HugoVG/Reservering
    
    Reservering

commit 2dcbdf65ec7c9d741a747853fdd14527a904c3f5
gpg: Signature made Tue May 18 11:38:15 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 93887b3 39f783b
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 18 11:38:15 2021 +0200

    Merge branch 'master' into Reservering

commit 93887b3ed931aa1234934770483607296a5ae0fc
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 18 11:37:01 2021 +0200

    We are big brain now
---
 Class/MainMenuThings.cs |  4 +--
 Class/Zalen.cs          | 71 ++++++++++++++++++++++++++++++++++++++-----------
 Json/MainMenu.json      | 14 +++++-----
 Json/Zalen.json         | 28 +++++++++----------
 4 files changed, 78 insertions(+), 39 deletions(-)

diff --git a/Class/MainMenuThings.cs b/Class/MainMenuThings.cs
index d17a2c8..ff7bde7 100644
--- a/Class/MainMenuThings.cs
+++ b/Class/MainMenuThings.cs
@@ -8,12 +8,12 @@ namespace Bi_Os_Coop
 {
     class MainMenuThings
     {
-        public dynamic user { get; set; }
+        public CPeople.Person user { get; set; }
         public string sort { get; set; }
         public bool reverse { get; set; }
         public string login { get; set; }
         public string language { get; set; }
-        public void setlog(dynamic user, string sort, bool reverse, string login, string language)
+        public void setlog(CPeople.Person user, string sort, bool reverse, string login, string language)
         {
             this.user = user;
             this.sort = sort;
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index 62378c6..b722f4f 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -32,7 +32,8 @@ namespace Bi_Os_Coop
             //int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
             //int gfdjhfskd = 30;
             //testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
-            testzaal2.writeZalen();
+            //testzaal2.writeZalen();
+            Console.WriteLine("Name a film you want to search");
             string henk = Console.ReadLine();
             //foreach (Zaal zaal in testzaal2.zalenList)
             //{
@@ -41,14 +42,16 @@ namespace Bi_Os_Coop
             //}
 
             Tuple<bool, List<Zaal>> temp = testzaal2.selectZalen(henk);
-            ZalenExtender.writeZalen(temp.Item2.OrderBy(movie => movie.date).OrderBy(movie => movie.time).ToList());
-            //json2 = testzaal2.ToJson();
-            //Json.WriteJson("Zalen", json2);
-            //testzaal2 = testzaal2.FromJson(json2);
-            //foreach (Zaal zaal in testzaal2.zalenList)
-            //{
-            //    zaal.showStool();
-            //}
+            ZalenExtender.menu(temp.Item2);
+            json2 = testzaal2.ToJson();
+            Json.WriteJson("Zalen", json2);
+            testzaal2 = testzaal2.FromJson(json2);
+            foreach (Zaal zaal in testzaal2.zalenList)
+            {
+                zaal.showStool();
+                Console.ReadKey(true);
+            }
+            Console.WriteLine("");
         }
     }
     internal static class ZalenExtender
@@ -59,8 +62,8 @@ namespace Bi_Os_Coop
             int counter = 1;
             foreach (Zaal zaal in selected)
             {
-                Console.Write($"\nSelecter:{counter} \t");
-                Console.Write($"\ndate:{zaal.date} \t");
+                Console.Write($"\n{counter} \t");
+                Console.Write($"date:{zaal.date} \t");
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film.name} \t");
                 Console.Write($"release Date:{zaal.film.releasedate} \t");
@@ -71,15 +74,38 @@ namespace Bi_Os_Coop
         public static Zaal menu(List<Zaal> selected)
         {
             writeZalen(selected);
-            Console.WriteLine("Choose timeframe you want to order a seat in");
+            Console.WriteLine("select the number of the timeframe and date you want to order");
             string temp  = Console.ReadLine();
             try
             {
                 int index = Convert.ToInt32(temp) - 1;
                 Zaal choosenone = selected.ElementAt(index);
+                choosenone.showStool();
+                Console.WriteLine("Select the seats you want to reserve add an ',' between the stools ");
+                string henk = Console.ReadLine();
+                henk = henk.Trim();
+                string[] henkerino = henk.Split(',');
+                List<int> allIndexes = new List<int>();
+                foreach (string i in henkerino)
+                {
+                    if (Convert.ToInt32(i) == 0)
+                    {
+                        Console.WriteLine("input was not a number");
+                    }
+                    allIndexes.Add(Convert.ToInt32(i));
+                }
+                
+                MainMenuThings mmt = JsonSerializer.Deserialize<MainMenuThings>(Json.ReadJson("MainMenu"));
+                //CPeople.Person person = new CPeople.Person {id= mmt.user.id};
+
+                int[] indexes = allIndexes.ToArray();
+                choosenone.occupyStool(indexes, mmt.user);
+                //choosenone.occupyStool();
+                //choosenone.showStool();
+
                 return choosenone;
             }
-            catch (Exception) { Console.WriteLine("Invalid Number"); return null; }
+            catch (FormatException) { Console.WriteLine("Invalid Number"); return null; }
         }
     }
     internal class Zalen
@@ -147,6 +173,16 @@ namespace Bi_Os_Coop
             indexs[0] = index;
             gekozenzaal.occupyStool(indexs, orderer);
         }
+        public void Reserveseats(int index, CPeople.Person orderer, Zaal zaal)
+        {
+            int[] indexs = new int[1];
+            indexs[0] = index;
+            zaal.occupyStool(indexs, orderer);
+        }
+        public void Reserveseats(int[] index, CPeople.Person orderer, Zaal zaal)
+        {
+            zaal.occupyStool(index, orderer);
+        }
         /// <summary>
         /// returned de zalen waar de film draai met x naam
         /// </summary>
@@ -195,6 +231,8 @@ namespace Bi_Os_Coop
                 nstoelen.Add(stoel);
                 stoelen = nstoelen;
             }*/
+            /// De +130 // +42 // +18 is voor 
+            /// de lege stoelen in de excel sheet
             if (totalStools == (int)Size.MegaChonker)
             {
                 totalStools = totalStools +130;
@@ -274,11 +312,12 @@ namespace Bi_Os_Coop
                 {
                     if (stoelen.ElementAt(index).isOccupied)
                     {
-                        Console.WriteLine($"{index - 1} stool is already ");
+                        Console.WriteLine($"{index} stool is already ");
                         return -1;
                     }
-                    stoelen.ElementAt(index - 1).isOccupied = true;
-                    stoelen.ElementAt(index - 1).isOccupiedBy = orderer.id;
+                    stoelen.ElementAt(index).isOccupied = true;
+                    Console.WriteLine($"{index} is now occupied by {orderer.id}");
+                    stoelen.ElementAt(index).isOccupiedBy = orderer.id;
                 }
                 return 1;
             }
diff --git a/Json/MainMenu.json b/Json/MainMenu.json
index a298a2d..b0777c8 100644
--- a/Json/MainMenu.json
+++ b/Json/MainMenu.json
@@ -1,14 +1,14 @@
 {
   "user": {
-    "id": 1,
-    "name": "Hugo",
-    "email": "coolste@min.com",
-    "password": "nietzoveilig",
-    "age": "30",
-    "phonenumber": "06123456789"
+    "id": 2,
+    "name": "Lilo",
+    "email": "lilo@stitch.com",
+    "password": "m@tress",
+    "age": "16/05/2000",
+    "phonenumber": null
   },
   "sort": "name",
   "reverse": false,
-  "login": "Admin",
+  "login": "Person",
   "language": "Nederlands"
 }
\ No newline at end of file
diff --git a/Json/Zalen.json b/Json/Zalen.json
index 8c3b86f..b16ccde 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -3208,18 +3208,18 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
@@ -3303,23 +3303,23 @@
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 10
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 15
         },
         {
-          "isOccupied": false,
-          "isOccupiedBy": 1,
+          "isOccupied": true,
+          "isOccupiedBy": 2,
           "Price": 15
         },
         {

commit bbad70fb0b4105496aefb618fb2b76ce19b92f50
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Fri May 14 14:47:33 2021 +0200

    gonna fix this later
---
 Bi-Os-Coop.csproj  |   1 +
 Class/CPeople.cs   |  16 +++++-
 Class/Json.cs      |   2 +-
 Class/Zalen.cs     | 144 ++++++++++++++++++++++++++++++++++++++++++-----------
 Json/MainMenu.json |  11 +++-
 Json/Zalen.json    |   2 +-
 Program.cs         |  15 ++++--
 7 files changed, 154 insertions(+), 37 deletions(-)

diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index 853240a..e6e4e0d 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -96,6 +96,7 @@
   <ItemGroup>
     <None Include="App.config" />
     <None Include="Json\Accounts.json" />
+    <None Include="Json\MainMenu.json" />
     <None Include="Json\Zalen.json" />
     <None Include="packages.config" />
     <None Include="Json\Films.json" />
diff --git a/Class/CPeople.cs b/Class/CPeople.cs
index 498cfc7..06b79e8 100644
--- a/Class/CPeople.cs
+++ b/Class/CPeople.cs
@@ -69,7 +69,21 @@ namespace Bi_Os_Coop
                 this.age = age;
                 this.phonenumber = phonenumber;
             }
-
+            public bool isPerson()
+            {
+                if (this.GetType().Equals(typeof(Person))) {
+                    return true;
+                }
+                else {return false; }
+            }
+            public bool isAdmin()
+            {
+                if (this.GetType().Equals(typeof(Admin)))
+                {
+                    return true;
+                }
+                else { return false; }
+            }
             // general methods
             public Person Login()
             {
diff --git a/Class/Json.cs b/Class/Json.cs
index 4d9bd71..fa5a46b 100644
--- a/Class/Json.cs
+++ b/Class/Json.cs
@@ -56,7 +56,7 @@ namespace Bi_Os_Coop
     [Serializable]
     public class IdiotException : Exception
     {
-        public IdiotException() { Console.WriteLine("some idiot fucked up"); }
+        public IdiotException() { Console.WriteLine("get Nae Naed"); }
         public IdiotException(string message) : base(message) { }
         public IdiotException(string message, Exception inner) : base(message, inner) { }
         protected IdiotException(
diff --git a/Class/Zalen.cs b/Class/Zalen.cs
index aab3438..62378c6 100644
--- a/Class/Zalen.cs
+++ b/Class/Zalen.cs
@@ -9,40 +9,79 @@ namespace Bi_Os_Coop
     {
         public void Test()
         {
-            Zalen testzaal = new Zalen();
-            Zaal tijdelijkeZaal = new Zaal();
-            //tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100);
-            tijdelijkeZaal.showStool();
+            DateTime today = new DateTime(2021, 6, 15);
+            Console.WriteLine(today.ToString());
+            string todaystring = $"0{today.Day}/0{today.Month}/{today.Year}";
+            Console.WriteLine(todaystring);
+            //Zalen testzaal = new Zalen();
+            //Zaal tijdelijkeZaal = new Zaal();
+            ////tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100);
+            //tijdelijkeZaal.showStool();
             CPeople.Person Henk = new CPeople.Person();
             Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
-            //tijdelijkeZaal.Reser(-5, Henk);
-            Console.ReadKey();
-            testzaal.AddZaal(tijdelijkeZaal);
-            testzaal.writeZalen();
-            string json = testzaal.ToJson();
-            Json.WriteJson("Zalen", json);
-            Console.ReadKey();
+            ////tijdelijkeZaal.Reser(-5, Henk);
+            //Console.ReadKey();
+            //testzaal.AddZaal(tijdelijkeZaal);
+            //testzaal.writeZalen();
+            //string json = testzaal.ToJson();
+            //Json.WriteJson("Zalen", json);
+            //Console.ReadKey();
             Zalen testzaal2 = new Zalen();
             string json2 = Json.ReadJson("Zalen");
             testzaal2 = testzaal2.FromJson(json2);
             //int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
-            int gfdjhfskd = 30;
-            testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
-            foreach (Zaal zaal in testzaal2.zalenList)
+            //int gfdjhfskd = 30;
+            //testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
+            testzaal2.writeZalen();
+            string henk = Console.ReadLine();
+            //foreach (Zaal zaal in testzaal2.zalenList)
+            //{
+            //    zaal.showStool();
+            //    Console.ReadKey();
+            //}
+
+            Tuple<bool, List<Zaal>> temp = testzaal2.selectZalen(henk);
+            ZalenExtender.writeZalen(temp.Item2.OrderBy(movie => movie.date).OrderBy(movie => movie.time).ToList());
+            //json2 = testzaal2.ToJson();
+            //Json.WriteJson("Zalen", json2);
+            //testzaal2 = testzaal2.FromJson(json2);
+            //foreach (Zaal zaal in testzaal2.zalenList)
+            //{
+            //    zaal.showStool();
+            //}
+        }
+    }
+    internal static class ZalenExtender
+    {
+        public static void writeZalen(List<Zaal> selected)
+        {
+            //List<Zaal> showingzaal = this.zalenList;
+            int counter = 1;
+            foreach (Zaal zaal in selected)
             {
-                zaal.showStool();
+                Console.Write($"\nSelecter:{counter} \t");
+                Console.Write($"\ndate:{zaal.date} \t");
+                Console.Write($"time:{zaal.time} \t");
+                Console.Write($"movie:{zaal.film.name} \t");
+                Console.Write($"release Date:{zaal.film.releasedate} \t");
+                Console.Write($"Score:{zaal.film.beoordeling} ");
+                counter++;
             }
-            Console.ReadKey();
-            json2 = testzaal2.ToJson();
-            Json.WriteJson("Zalen", json2);
-            testzaal2 = testzaal2.FromJson(json2);
-            foreach (Zaal zaal in testzaal2.zalenList)
+        }
+        public static Zaal menu(List<Zaal> selected)
+        {
+            writeZalen(selected);
+            Console.WriteLine("Choose timeframe you want to order a seat in");
+            string temp  = Console.ReadLine();
+            try
             {
-                zaal.showStool();
+                int index = Convert.ToInt32(temp) - 1;
+                Zaal choosenone = selected.ElementAt(index);
+                return choosenone;
             }
+            catch (Exception) { Console.WriteLine("Invalid Number"); return null; }
         }
     }
-
     internal class Zalen
     {
         public List<Zaal> zalenList { get; set; }
@@ -66,7 +105,21 @@ namespace Bi_Os_Coop
             {
                 Console.Write($"\ndate:{zaal.date} \t");
                 Console.Write($"time:{zaal.time} \t");
-                Console.Write($"movie:{zaal.film.name} \n");
+                Console.Write($"movie:{zaal.film.name} \t");
+                Console.Write($"release Date:{zaal.film.releasedate} \t");
+                Console.Write($"Score:{zaal.film.beoordeling} ");
+            }
+        }
+        public void writeZalen(List<Zaal> selected)
+        {
+            //List<Zaal> showingzaal = this.zalenList;
+            foreach (Zaal zaal in selected)
+            {
+                Console.Write($"\ndate:{zaal.date} \t");
+                Console.Write($"time:{zaal.time} \t");
+                Console.Write($"movie:{zaal.film.name} \t");
+                Console.Write($"release Date:{zaal.film.releasedate} \t");
+                Console.Write($"Score:{zaal.film.beoordeling} ");
             }
         }
 
@@ -94,6 +147,24 @@ namespace Bi_Os_Coop
             indexs[0] = index;
             gekozenzaal.occupyStool(indexs, orderer);
         }
+        /// <summary>
+        /// returned de zalen waar de film draai met x naam
+        /// </summary>
+        /// <param name="naam"></param>
+        /// <returns></returns>
+        public Tuple<bool, List<Zaal>> selectZalen(string naam)
+        {
+            IEnumerable<Zaal> selectedzalen = zalenList.Where(movie => movie.film.name.ToLower() == naam.ToLower() && DateTime.Parse(movie.date) >= DateTime.Now); //fixt ook de out dated films
+            if (selectedzalen.Count() != 0)
+                return Tuple.Create(true, selectedzalen.ToList());
+            else
+            {
+                Console.WriteLine($"Couldn't find any movie with name {naam}");
+                return Tuple.Create(false, selectedzalen.ToList());
+            }
+
+        }
+
     }
 
     internal class Zaal
@@ -163,6 +234,19 @@ namespace Bi_Os_Coop
             //showStool();
         }
 
+        public void writeZalen(List<Zaal> selected)
+        {
+            //List<Zaal> showingzaal = this.zalenList;
+            foreach (Zaal zaal in selected)
+            {
+                Console.Write($"\ndate:{zaal.date} \t");
+                Console.Write($"time:{zaal.time} \t");
+                Console.Write($"movie:{zaal.film.name} \t");
+                Console.Write($"release Date:{zaal.film.releasedate} \t");
+                Console.Write($"Score:{zaal.film.beoordeling} ");
+            }
+        }
+
         public void applyzaal()
         {
         }
@@ -213,12 +297,17 @@ namespace Bi_Os_Coop
             Console.Clear();
             int counter = 0;
             Console.ForegroundColor = ConsoleColor.White;
+            int stoelenPerRij;
+            if (this.stoelen.Count == 630) { stoelenPerRij = 30; }
+            else if (this.stoelen.Count == 342){ stoelenPerRij = 18; }
+            else if (this.stoelen.Count == 168) { stoelenPerRij = 12; }
+            else { throw new IdiotException(); }
             foreach (Stoel stoel in this.stoelen)
             {
-                if (counter % stoelWidth == 0)
+                if (counter % stoelenPerRij == 0)
                 {
                     if (counter < 10) { }
-                    else { Console.WriteLine("\n"); }
+                    else { Console.WriteLine(""); }
                 }
 
                 if (stoelen.ElementAt(counter).isOccupied)
@@ -281,10 +370,9 @@ namespace Bi_Os_Coop
             if (prijs == price.NONE)
             {
                 this.isOccupied = true;
-            }
-            else
-            {
                 this.isOccupiedBy = 1;
+                this.Price = prijs;
+                return;
             }
             this.isOccupied = false;
             this.Price = prijs;
diff --git a/Json/MainMenu.json b/Json/MainMenu.json
index d12e561..a298a2d 100644
--- a/Json/MainMenu.json
+++ b/Json/MainMenu.json
@@ -1,7 +1,14 @@
 {
-  "user": null,
+  "user": {
+    "id": 1,
+    "name": "Hugo",
+    "email": "coolste@min.com",
+    "password": "nietzoveilig",
+    "age": "30",
+    "phonenumber": "06123456789"
+  },
   "sort": "name",
   "reverse": false,
-  "login": "None",
+  "login": "Admin",
   "language": "Nederlands"
 }
\ No newline at end of file
diff --git a/Json/Zalen.json b/Json/Zalen.json
index bba241f..8c3b86f 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -1,7 +1,7 @@
 {
   "zalenList": [
     {
-      "date": "02/06/2021",
+      "date": "01/06/2021",
       "time": "05:02",
       "film": {
         "movieid": 1,
diff --git a/Program.cs b/Program.cs
index 12fe6ca..0454f49 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,5 +1,5 @@
 #define DEBUG
-#undef DEBUG
+//#undef DEBUG
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -14,11 +14,18 @@ namespace Bi_Os_Coop
         static void Main(string[] args)
         {
 #if (DEBUG)
+            //#error Hold there Criminal scum
             CPeople.Admin tempadm = new CPeople.Admin();
-            tempadm.AddCinemaHall();
+            //Console.WriteLine(tempadm.isAdmin());
+            //Console.WriteLine(tempadm.isPerson());
+
+            CPeople.Person tempperson = new CPeople.Person();
+            //Console.WriteLine(tempperson.isAdmin());
+            //Console.WriteLine(tempperson.isPerson());
+            //tempadm.AddCinemaHall();
             //Hier in de testen
-            //ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
-            //test.Test();
+            ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
+            test.Test();
             //Test Gelukt
             //PeopleTest.newADMIN();
             //MainMenu.MainMenuShow();

commit 0fff45b0dd25f6e585ba9bd8e5cd21f11dd86e05
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed May 12 13:30:55 2021 +0200

    Code clean up
---
 Bi-Os-Coop.csproj                                  |  28 +-
 CPeople.cs => Class/CPeople.cs                     |   0
 .../DeleteAccountMethod.cs                         |   0
 DeleteMovieMethod.cs => Class/DeleteMovieMethod.cs |   0
 Json.cs => Class/Json.cs                           |   0
 MainMenu.cs => Class/MainMenu.cs                   |   0
 MainMenuThings.cs => Class/MainMenuThings.cs       |   0
 MovieInterpreter.cs => Class/MovieInterpreter.cs   |   0
 MovieMenu.cs => Class/MovieMenu.cs                 |   0
 MovieMethods.cs => Class/MovieMethods.cs           |   0
 PasswordMethods.cs => Class/PasswordMethods.cs     |   0
 Registerscreen.cs => Class/Registerscreen.cs       |   0
 Zalen.cs => Class/Zalen.cs                         |   0
 adminMenu.cs => Class/adminMenu.cs                 |   0
 loginscherm.cs => Class/loginscherm.cs             |   0
 Classes/CPeople.cs                                 | 517 +++++++++++++++++++++
 Classes/DeleteAccountMethod.cs                     |  80 ++++
 Classes/DeleteMovieMethod.cs                       |  71 +++
 Classes/Json.cs                                    |  66 +++
 Classes/MainMenu.cs                                | 288 ++++++++++++
 Classes/MovieInterpreter.cs                        |  50 ++
 Classes/MovieMenu.cs                               | 210 +++++++++
 Classes/MovieMethods.cs                            | 276 +++++++++++
 Classes/PasswordMethods.cs                         | 116 +++++
 Classes/Registerscreen.cs                          | 200 ++++++++
 Classes/Zalen.cs                                   | 387 +++++++++++++++
 Classes/adminMenu.cs                               | 224 +++++++++
 Classes/loginscherm.cs                             |  92 ++++
 28 files changed, 2591 insertions(+), 14 deletions(-)

diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index 0f3bea1..4408709 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -75,22 +75,22 @@
     <Reference Include="mscorlib" />
   </ItemGroup>
   <ItemGroup>
-    <Compile Include="adminMenu.cs" />
-    <Compile Include="CPeople.cs" />
-    <Compile Include="Json.cs" />
-    <Compile Include="loginscherm.cs" />
-    <Compile Include="MainMenu.cs" />
-    <Compile Include="MainMenuThings.cs" />
-    <Compile Include="MovieInterpreter.cs" />
-    <Compile Include="MovieMenu.cs" />
+    <Compile Include="Class\adminMenu.cs" />
+    <Compile Include="Class\CPeople.cs" />
+    <Compile Include="Class\Json.cs" />
+    <Compile Include="Class\loginscherm.cs" />
+    <Compile Include="Class\MainMenu.cs" />
+    <Compile Include="Class\MainMenuThings.cs" />
+    <Compile Include="Class\MovieInterpreter.cs" />
+    <Compile Include="Class\MovieMenu.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
-    <Compile Include="Registerscreen.cs" />
-    <Compile Include="Zalen.cs" />
-    <Compile Include="PasswordMethods.cs" />
-    <Compile Include="MovieMethods.cs" />
-    <Compile Include="DeleteMovieMethod.cs" />
-    <Compile Include="DeleteAccountMethod.cs" />
+    <Compile Include="Class\Registerscreen.cs" />
+    <Compile Include="Class\Zalen.cs" />
+    <Compile Include="Class\PasswordMethods.cs" />
+    <Compile Include="Class\MovieMethods.cs" />
+    <Compile Include="Class\DeleteMovieMethod.cs" />
+    <Compile Include="Class\DeleteAccountMethod.cs" />
   </ItemGroup>
   <ItemGroup>
     <None Include="App.config" />
diff --git a/CPeople.cs b/Class/CPeople.cs
similarity index 100%
rename from CPeople.cs
rename to Class/CPeople.cs
diff --git a/DeleteAccountMethod.cs b/Class/DeleteAccountMethod.cs
similarity index 100%
rename from DeleteAccountMethod.cs
rename to Class/DeleteAccountMethod.cs
diff --git a/DeleteMovieMethod.cs b/Class/DeleteMovieMethod.cs
similarity index 100%
rename from DeleteMovieMethod.cs
rename to Class/DeleteMovieMethod.cs
diff --git a/Json.cs b/Class/Json.cs
similarity index 100%
rename from Json.cs
rename to Class/Json.cs
diff --git a/MainMenu.cs b/Class/MainMenu.cs
similarity index 100%
rename from MainMenu.cs
rename to Class/MainMenu.cs
diff --git a/MainMenuThings.cs b/Class/MainMenuThings.cs
similarity index 100%
rename from MainMenuThings.cs
rename to Class/MainMenuThings.cs
diff --git a/MovieInterpreter.cs b/Class/MovieInterpreter.cs
similarity index 100%
rename from MovieInterpreter.cs
rename to Class/MovieInterpreter.cs
diff --git a/MovieMenu.cs b/Class/MovieMenu.cs
similarity index 100%
rename from MovieMenu.cs
rename to Class/MovieMenu.cs
diff --git a/MovieMethods.cs b/Class/MovieMethods.cs
similarity index 100%
rename from MovieMethods.cs
rename to Class/MovieMethods.cs
diff --git a/PasswordMethods.cs b/Class/PasswordMethods.cs
similarity index 100%
rename from PasswordMethods.cs
rename to Class/PasswordMethods.cs
diff --git a/Registerscreen.cs b/Class/Registerscreen.cs
similarity index 100%
rename from Registerscreen.cs
rename to Class/Registerscreen.cs
diff --git a/Zalen.cs b/Class/Zalen.cs
similarity index 100%
rename from Zalen.cs
rename to Class/Zalen.cs
diff --git a/adminMenu.cs b/Class/adminMenu.cs
similarity index 100%
rename from adminMenu.cs
rename to Class/adminMenu.cs
diff --git a/loginscherm.cs b/Class/loginscherm.cs
similarity index 100%
rename from loginscherm.cs
rename to Class/loginscherm.cs
diff --git a/Classes/CPeople.cs b/Classes/CPeople.cs
new file mode 100644
index 0000000..10a3526
--- /dev/null
+++ b/Classes/CPeople.cs
@@ -0,0 +1,517 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+using System.IO;
+using System.Security;
+
+namespace Bi_Os_Coop
+{
+    public class PeopleTest
+    {
+        public static void newADMIN()
+        {
+            string json = Json.ReadJson("Accounts");
+            CPeople.People jsonPeople = JsonSerializer.Deserialize<CPeople.People>(json);
+            CPeople.Admin adm = new CPeople.Admin();
+            adm.setPerson(1, "Hugo", "Coolste@min.com", "nietzoveilig", "30", "06123456789");
+            jsonPeople.AddAdmin(adm);
+            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+            json = JsonSerializer.Serialize(jsonPeople, opt);
+            Json.WriteJson("Accounts", json);
+        }
+    }
+    public class CPeople
+    {
+        public static void NewUser()
+        {
+            string json = Json.ReadJson("Accounts");
+            People jsonPeople = JsonSerializer.Deserialize<People>(json);
+
+            jsonPeople.addPersonByFunction(3, "Bjorn", "json@bjorn.com", "jsonBjorn", "30", "06123456789");
+            json = JsonSerializer.Serialize(jsonPeople);
+            Json.WriteJson("Accounts", json);
+            //Console.WriteLine(jsonPeople);
+            // mac doet weer eens raar test
+            Console.WriteLine(jsonPeople);
+        }
+
+        public static void TestMethodPerson()
+        {
+            CPeople.Person bjorn = new CPeople.Person();
+            bjorn.setPerson(3, "Bjorn", "json@bjorn.com", "jsonBjorn", "30", "06123456789");
+            bjorn.DeleteAccount(bjorn, new List<dynamic>());
+            // kleine aanpassing om te committen
+        }
+
+        /// <summary>
+        /// Person class
+        /// Fields:
+        ///     id, name?, email?, password?, age
+        /// </summary>
+        public class Person
+        {
+            public int id { get; set; }
+            public string name { get; set; }
+            public string email { get; set; }
+            public string password { get; set; }
+            public string age { get; set; }
+            public string phonenumber { get; set; }
+            //If you gonna edit this EDIT ALL
+            public void setPerson(int id, string name, string email, string password, string age, string phonenumber)
+            {
+                this.id = id;
+                this.name = name;
+                this.email = email;
+                this.password = password;
+                this.age = age;
+                this.phonenumber = phonenumber;
+            }
+
+            // general methods
+            public Person Login()
+            {
+                Console.Clear();
+                Person Ingelogd = loginscherm.login();
+                return Ingelogd;
+            }
+
+            public Person Logout()
+            {
+                Person Ingelogd = new Person();
+                return Ingelogd;
+            }
+            public void DeleteAccount(Person ingelogdepersoon, List<dynamic> mainmenuthings)
+            {
+                Console.Clear();
+                Console.WriteLine("Wilt u uw account verwijderen? (j/n)");
+                //string answer = Console.ReadLine();
+                if (Console.ReadKey(true).Key == ConsoleKey.J)
+                {
+                    // asks for email and password of the person
+                    Console.WriteLine("Vul uw emailadres in:");
+                    string currentEmail = Console.ReadLine();
+
+                    Console.WriteLine("Vul uw huidige wachtwoord in:");
+                    SecureString pass = loginscherm.maskInputString();
+                    string currentPassword = new System.Net.NetworkCredential(string.Empty, pass).Password;
+
+                    // checks if email and password are in the peopleList
+                    if (PasswordMethods.MailWachtwoordCheck(currentEmail, currentPassword)) // both are correct
+                    {
+                        DeleteAccountMethod.DeleteAccount(ingelogdepersoon, mainmenuthings);
+                    }
+                    else
+                    {
+                        Console.WriteLine("Wachtwoord of email onjuist. Probeer het later nog eens.");
+                        System.Threading.Thread.Sleep(2000);
+                        Console.Clear();
+                        MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                    }
+                }
+                else if (Console.ReadKey(true).Key == ConsoleKey.N)
+                {
+                    Console.ForegroundColor = ConsoleColor.Green;
+                    Console.WriteLine("Bedankt voor het blijven!");
+                    Console.WriteLine("U wordt nu teruggestuurd naar het hoofdmenu.");
+                    System.Threading.Thread.Sleep(2000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                }
+                else
+                {
+                    DeleteAccount(ingelogdepersoon, mainmenuthings);
+                }
+            }
+
+            public void ChangePassword(Person ingelogdepersoon, List<dynamic> mainmenuthings)
+            {
+                // Checks if the person is logged in by checking if it has an ID
+                if (ingelogdepersoon.id != 0) // person is logged in
+                {
+                    // asks for email and password of the person
+                    Console.WriteLine("Vul uw emailadres in:");
+                    string currentEmail = Console.ReadLine();
+
+                    Console.WriteLine("Vul uw huidige wachtwoord in:");
+                    string currentPassword = Console.ReadLine();
+
+                    // checks if email and password are in the peopleList
+                    if (PasswordMethods.MailWachtwoordCheck(currentEmail, currentPassword)) // both are correct
+                    {
+                        PasswordMethods.SetNewPassword(currentEmail, currentPassword, mainmenuthings);
+                    }
+                    else
+                    {
+                        PasswordMethods.PasswordEntries(mainmenuthings); // if one of the two data is incorrect they get 3 entries
+                    }
+                }
+
+                else if (ingelogdepersoon.id == 0) // person is not logged in
+                {
+                    // if the person is not logged in we ask for email and birthdate
+                    Console.WriteLine("Vul uw emailadres in:");
+                    string currentEmail = Console.ReadLine();
+
+                    Console.WriteLine("Vul uw geboortedatum in: (dd/mm/jjjj)");
+                    string currentAge = Console.ReadLine();
+
+                    // checks if email and age are in the peopleList
+                    if (PasswordMethods.MailLeeftijdCheck(currentEmail, currentAge))
+                    {
+                        PasswordMethods.SetNewPassword(currentEmail, currentAge, mainmenuthings); // both are correct
+                    }
+                    else
+                    {
+                        // if the person doesn't exist we ask if the person wants to make a new account, if not send to Main Menu
+                        Console.WriteLine("Sorry, dit account bestaat niet.");
+                        Console.WriteLine("Wilt u een nieuw account aanmaken? (j/n)");
+
+                        if (Console.ReadKey(true).Key == ConsoleKey.J) // person wants to create a new account
+                        {
+                            Console.Clear();
+                            Registerscreen.CreateAccount();
+                        }
+                        else if (Console.ReadKey(true).Key == ConsoleKey.N) // person is send to main menu
+                        {
+                            Console.Clear();
+                            MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                        }
+                    }
+                }
+
+                // in case the person has an ID other than 0 or not 0
+                else
+                {
+                    throw new NotImplementedException();
+                }
+            }
+
+
+            public void ViewMovies()
+            {
+
+            }
+
+            public void BookTicket()
+            {
+
+            }
+
+            public void CancelTicket()
+            {
+
+            }
+        }
+
+        public class Admin : Person
+        {
+            public MovieInterpreter AddMovies()
+            {
+                Console.Clear();
+
+                string json = Json.ReadJson("Films");
+                Films MovieLibrary = JsonSerializer.Deserialize<Films>(json);
+
+                Console.WriteLine("Voeg hier een nieuwe film toe.");
+                Console.WriteLine("Naam film:");
+                string naamFilm = Console.ReadLine();
+                Console.WriteLine("Releasedatum film:");
+                string releasedatumFilm = Console.ReadLine();
+                Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
+                Console.WriteLine("Genres film:");
+                string genres = Console.ReadLine();
+                List<string> genresFilm = genres.Split(',').ToList();
+                Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
+                Console.WriteLine("Acteurs film:");
+                string acteurs = Console.ReadLine();
+                List<string> acteursFilm = acteurs.Split(',').ToList();
+                Console.WriteLine("Minimumleeftijd film:");
+                int minimumLeeftijd = Convert.ToInt32(Console.ReadLine());
+                Console.WriteLine("Beoordeling film:");
+                double beoordelingFilm = Convert.ToDouble(Console.ReadLine());
+                Console.WriteLine("Taal film:");
+                string taalfilm = Console.ReadLine();
+                Console.WriteLine("Beschrijving film:");
+                string beschrijvingfilm = Console.ReadLine();
+                MovieInterpreter Movie = new MovieInterpreter();
+                Movie.setFilm(MovieLibrary.movieList.Count + 1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm, taalfilm, beschrijvingfilm);
+
+                //MovieLibrary = new Films();
+                MovieLibrary.addFilm(Movie);
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(MovieLibrary, opt);
+
+                //jsonFilms.addMovieByFunction(1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm);
+                //json = JsonSerializer.Serialize(jsonFilms);
+                Json.WriteJson("Films", json);
+                return Movie;
+            }
+
+            public void UpdateMovies()
+            {
+                Console.Clear();
+                Console.WriteLine("Welke film wilt u updaten?");
+                string naamFilm = Console.ReadLine();
+
+                try
+                {
+                    string json = Json.ReadJson("Films");
+                    Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+                    MovieInterpreter tempMovie = jsonFilms.movieList.Single(movie => movie.name == naamFilm);
+                    MovieMethods.UpdateMovieMenu(json, jsonFilms, tempMovie);
+                }
+                catch (InvalidOperationException)
+                {
+                    Console.WriteLine("Film niet gevonden.");
+                    Console.WriteLine("Wilt u een andere film aanpassen? (j/n)");
+                    string answer = Console.ReadLine();
+                    if (Console.ReadKey(true).Key == ConsoleKey.J)
+                    {
+                        Console.Clear();
+                        UpdateMovies();
+                    }
+                    else if (Console.ReadKey(true).Key == ConsoleKey.N)
+                    {
+                        Console.Clear();
+                        adminMenu.hoofdPagina();
+                    }
+                    else
+                    {
+                        Console.WriteLine("Antwoord niet begrepen. U keert automatisch terug naar het admin menu.");
+                        System.Threading.Thread.Sleep(2000);
+                        adminMenu.hoofdPagina();
+                    }
+                }
+            }
+
+            public void DeleteMovies()
+            {
+                Console.Clear();
+                Console.WriteLine("Welke film wilt u verwijderen?");
+                string movieToRemove = Console.ReadLine();
+
+                try
+                {
+                    string json = Json.ReadJson("Films");
+                    Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+
+                    if (jsonFilms.movieList != null)
+                    {
+                        DeleteMovieMethod.DeleteMovie(json, jsonFilms, movieToRemove);
+                    }
+                    else
+                    {
+                        Console.WriteLine("Filmlijst is op dit moment leeg.");
+                        Console.WriteLine("U wordt nu teruggestuurd naar het admin menu.");
+                        System.Threading.Thread.Sleep(1000);
+                        Console.ForegroundColor = ConsoleColor.Gray;
+                        adminMenu.hoofdPagina();
+                    }
+                }
+                catch (InvalidOperationException)
+                {
+                    Console.ForegroundColor = ConsoleColor.Red;
+                    Console.WriteLine("Film niet gevonden. Probeer het nog een keer.");
+                    System.Threading.Thread.Sleep(1000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    DeleteMovies();
+                }
+            }
+
+            public void AddCinemaHall()
+            {
+                Console.Clear();
+                Zaal zaal = new Zaal();
+                Console.WriteLine();
+                int totalChairs;
+                while (true)
+                {
+                    Console.WriteLine("Hoeveel stoelen heeft de zaal in totaal? Options \t(M)egaChonker = 500, \t(H)eftyChonk = 300 \t(C)honk = 150\tOr Q to quit");
+                    ConsoleKey chonkChart = Console.ReadKey(true).Key;
+                    if (chonkChart == ConsoleKey.M)
+                    {
+                        totalChairs = (int)Zaal.Size.MegaChonker;
+                        break;
+                    }
+                    else if (chonkChart == ConsoleKey.H)
+                    {
+                        totalChairs = (int)Zaal.Size.heftyChonk;
+                        break;
+                    }
+                    else if( chonkChart == ConsoleKey.C)
+                    {
+                        totalChairs = (int)Zaal.Size.chonk;
+                        break;
+                    }
+                    else if (chonkChart == ConsoleKey.Q)
+                    {
+                        goto exit; // EXIT uit de Addmovies
+                    }
+                }
+
+                MovieInterpreter film = new MovieInterpreter();
+                while (true)
+                {
+                    Console.WriteLine("Welke film wilt u dat er op dit tijdstip draait?");
+
+                    string moviename = Console.ReadLine();
+                    var movie = MovieMethods.DoesMovieExist(moviename);
+                    if (movie.Item1)
+                    {
+                        film = movie.Item2;
+                        break;
+                    }
+                    else
+                    {
+                        Console.WriteLine("looks like the movie does not exist do you want to add it or Search or Quit? A/S/Q");
+                        ConsoleKey k = Console.ReadKey(true).Key;
+                        if (k == ConsoleKey.A)
+                        {
+                            film = AddMovies();
+                            break;
+                        }
+                        else if (k == ConsoleKey.S) { }
+                        else if (k == ConsoleKey.Q) { goto exit; } // EXIT uit de Addmovies
+                    }
+                }
+
+                Console.WriteLine("Op welke datum wilt u dat deze film draait? (dd/mm/yyyy)");
+                string date = Console.ReadLine();
+                Console.WriteLine("Op welk tijdstip wilt u dat deze film draait? (HH:MM)");
+                string time = Console.ReadLine();
+
+                zaal.setZaal(date, time, totalChairs, film); // someone has to fix this
+                Zalen zalen = new Zalen();
+                zalen = zalen.FromJson(Json.ReadJson("Zalen"));
+                zalen.AddZaal(zaal);
+
+                Json.WriteJson("Zalen",zalen.ToJson());
+            exit:
+                return;
+            }
+
+            public void UpdateCinemaHall()
+            {
+
+            }
+
+            public void DeleteCinemaHall()
+            {
+
+            }
+        }
+
+        public class Employee : Person
+        {
+
+        }
+
+
+        /// <summary>
+        /// People class for JSON
+        /// </summary>
+        public class People
+        {
+            public List<Person> peopleList { get; set; }
+            public List<Admin> adminList { get; set; }
+            public List<Employee> employeeList { get; set; }
+
+            /// <summary>
+            /// adds an Person class Object to the peopleList
+            /// adds an Admin class Object to the adminList
+            /// adds an Employee class Object to the employeeList
+            /// </summary>
+            /// <param name="personToAdd"></param>
+            public void AddPerson(Person personToAdd)
+            {
+                if (peopleList == null)
+                {
+                    List<Person> newPerson = new List<Person>();
+                    newPerson.Add(personToAdd);
+                    peopleList = newPerson;
+                }
+                else
+                {
+                    peopleList.Add(personToAdd);
+                }
+            }
+
+            public void AddAdmin(Admin personToAdd)
+            {
+                if (adminList == null)
+                {
+                    List<Admin> newAdmin = new List<Admin>();
+                    newAdmin.Add(personToAdd);
+                    adminList = newAdmin;
+                }
+                else
+                {
+                    adminList.Add(personToAdd);
+                }
+            }
+
+            public void AddEmployee(Employee personToAdd)
+            {
+                if (employeeList == null)
+                {
+                    List<Employee> newEmployee = new List<Employee>();
+                    newEmployee.Add(personToAdd);
+                    employeeList = newEmployee;
+                }
+                else
+                {
+                    employeeList.Add(personToAdd);
+                }
+            }
+
+
+            /// <summary>
+            ///     Makes a new Person using a function and adding it to the object,
+            ///     so it will put the json good
+            /// </summary>
+            /// <param name="id"></param>
+            /// <param name="name"></param>
+            /// <param name="email"></param>
+            /// <param name="password"></param>
+            /// <param name="age"></param>
+            public void addPersonByFunction(int id, string name, string email, string password, string age, string phonenumber)
+            {
+                Person temp = new Person();
+                temp.setPerson(id, name, email, password, age, phonenumber);
+                AddPerson(temp);
+            }
+
+
+            public void writePeople()
+            {
+                foreach (Person person in this.peopleList)
+                {
+                    Console.Write($"id:{person.id} \t");
+                    Console.Write($"name:{person.name} \t");
+                    Console.Write($"email:{person.email} \t");
+                    Console.Write($"password:{person.password} \t");
+                    Console.Write($"age:{person.age} \n");
+                    Console.Write($"phonenumber:{person.phonenumber} \n");
+                }
+            }
+
+
+            /// <summary>
+            /// Will return This object
+            /// </summary>
+            /// <returns></returns>
+            public string ToJson()
+            {
+                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+                return JsonSerializer.Serialize(this, opt);
+            }
+            public People FromJson(string json)
+            {
+                return JsonSerializer.Deserialize<People>(json);
+            }
+        }
+    }
+}
diff --git a/Classes/DeleteAccountMethod.cs b/Classes/DeleteAccountMethod.cs
new file mode 100644
index 0000000..3fc4791
--- /dev/null
+++ b/Classes/DeleteAccountMethod.cs
@@ -0,0 +1,80 @@
+﻿using System;
+using System.Text.Json;
+using System.Collections.Generic;
+
+namespace Bi_Os_Coop
+{
+    public class DeleteAccountMethod
+    {
+        public static void DeleteAccount(CPeople.Person ingelogdepersoon, List<dynamic> mainmenuthings)
+        {
+            try
+            {
+                string json = Json.ReadJson("Accounts");
+                CPeople.People jsonPeople = JsonSerializer.Deserialize<CPeople.People>(json);
+
+                if (jsonPeople.peopleList != null)
+                {
+                    int index = jsonPeople.peopleList.FindIndex(person => person.name == ingelogdepersoon.name);
+                    if (index == -1)
+                    {
+                        Console.ForegroundColor = ConsoleColor.Yellow;
+                        Console.WriteLine("Account niet gevonden. Neem contact op met de klantenservice.");
+                        System.Threading.Thread.Sleep(1000);
+                        Console.ForegroundColor = ConsoleColor.Gray;
+                        MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                    }
+                    else
+                    {
+                        Console.WriteLine("Account gevonden. Weet u zeker dat u hem wilt verwijderen? (j/n)");
+
+                        if (Console.ReadKey(true).Key == ConsoleKey.J)
+                        {
+                            jsonPeople.peopleList.RemoveAt(index);
+                            json = JsonSerializer.Serialize(jsonPeople);
+                            Json.WriteJson("Accounts", json);
+
+                            Console.ForegroundColor = ConsoleColor.Red;
+                            Console.WriteLine("Uw account is succesvol verwijderd.");
+                            System.Threading.Thread.Sleep(2000);
+                            Console.ForegroundColor = ConsoleColor.Gray;
+                            MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                        }
+                        else if (Console.ReadKey(true).Key == ConsoleKey.N)
+                        {
+                            Console.ForegroundColor = ConsoleColor.Green;
+                            Console.WriteLine("Bedankt voor het blijven!");
+                            Console.WriteLine("U wordt nu teruggestuurd naar het hoofdmenu.");
+                            System.Threading.Thread.Sleep(2000);
+                            Console.ForegroundColor = ConsoleColor.Gray;
+                            MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]); ;
+                        }
+                        else
+                        {
+                            Console.WriteLine("Antwoord niet begrepen. U wordt nu teruggestuurd naar het hoofdmenu.");
+                            System.Threading.Thread.Sleep(1000);
+                            Console.ForegroundColor = ConsoleColor.Gray;
+                            MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                        }
+                    }
+                }
+                else
+                {
+                    Console.WriteLine("Account bestaat niet.");
+                    Console.WriteLine("U wordt nu teruggestuurd naar het hoofdmenu.");
+                    System.Threading.Thread.Sleep(1000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                }
+            }
+            catch (InvalidOperationException)
+            {
+                Console.ForegroundColor = ConsoleColor.Red;
+                Console.WriteLine("Account niet gevonden. Neem contact op met de klantenservice.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+            }
+        }
+    }
+}
diff --git a/Classes/DeleteMovieMethod.cs b/Classes/DeleteMovieMethod.cs
new file mode 100644
index 0000000..5f04182
--- /dev/null
+++ b/Classes/DeleteMovieMethod.cs
@@ -0,0 +1,71 @@
+﻿using System;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    public class DeleteMovieMethod
+    {
+        public static void DeleteMovie(string json, Films jsonFilms, string movieToRemove)
+        {
+            CPeople.Admin admin = new CPeople.Admin();
+
+            int index = jsonFilms.movieList.FindIndex(movie => movie.name == movieToRemove);
+            if (index == -1)
+            {
+                Console.ForegroundColor = ConsoleColor.Red;
+                Console.WriteLine("Film niet gevonden. Probeer het nog een keer.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                admin.DeleteMovies();
+            }
+            else
+            {
+                Console.WriteLine("Film gevonden. Weet u zeker dat u hem wilt verwijderen? (ja/nee)");
+                string answer = Console.ReadLine().ToLower();
+
+                if (answer == "ja")
+                {
+                    jsonFilms.movieList.RemoveAt(index);
+                    json = JsonSerializer.Serialize(jsonFilms);
+                    Json.WriteJson("Films", json);
+
+                    Console.ForegroundColor = ConsoleColor.Green;
+                    Console.WriteLine("Film is succesvol verwijderd.");
+                    System.Threading.Thread.Sleep(1000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    Console.Clear();
+                }
+                else if (answer == "nee")
+                {
+                    Console.WriteLine("Wilt u een andere film verwijderen? (ja/nee)");
+                    answer = Console.ReadLine().ToLower();
+                    if (answer == "ja")
+                    {
+                        admin.DeleteMovies();
+                    }
+                    else if (answer == "nee")
+                    {
+                        Console.WriteLine("U wordt nu teruggestuurd naar het admin menu.");
+                        System.Threading.Thread.Sleep(1000);
+                        Console.ForegroundColor = ConsoleColor.Gray;
+                        adminMenu.hoofdPagina();
+                    }
+                    else
+                    {
+                        Console.WriteLine("Antwoord niet begrepen. U keert automatisch terug naar het admin menu.");
+                        System.Threading.Thread.Sleep(1000);
+                        Console.ForegroundColor = ConsoleColor.Gray;
+                        adminMenu.hoofdPagina();
+                    }
+                }
+                else
+                {
+                    Console.WriteLine("Antwoord niet begrepen. Probeer het nog een keer.");
+                    System.Threading.Thread.Sleep(1000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    admin.DeleteMovies();
+                }
+            }
+        }
+    }
+}
diff --git a/Classes/Json.cs b/Classes/Json.cs
new file mode 100644
index 0000000..4d9bd71
--- /dev/null
+++ b/Classes/Json.cs
@@ -0,0 +1,66 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+using System.IO;
+
+namespace Bi_Os_Coop
+{
+    class Json
+    {
+        /*
+         * How to use Json class
+         * for reading and writing you only need the name of the file in Json folder
+         * for example Accounts
+         * to read the json from this file simply use
+         * string jsonTestText = Json.ReadJson("Accounts");
+         * then you can manipulate the data you want from it
+         * test = test.FromJson(jsonTestText);
+         * test.addPersonByFunction(1, "hugo", "mijnfakeEmail@test.com", "H3nk123", 20);
+         * string back2Json = test.ToJson(); //so we return this class to json
+         * Json.WriteJson("Accounts", back2Json); // to send it back to the Accounts tab
+         * Well done you're all set.
+         */
+        /// <summary>
+        /// Reads all text from file
+        /// </summary>
+        /// <param name="filename"></param>
+        /// <returns></returns>
+        public static string ReadJson(string filename)
+        {
+            try
+            {
+                string path = File.ReadAllText($"../../Json/{filename}.json");
+                return path;
+            }
+            catch (FileNotFoundException ex)
+            {
+                Console.WriteLine(ex.Message);
+                throw new IdiotException();
+            }
+        }
+        /// <summary>
+        /// Writes the string text to a JSON file
+        /// BEWARE: IRREVERSABLE
+        /// </summary>
+        /// <param name="filename"></param>
+        /// <param name="content"></param>
+        public static void WriteJson(string filename, string content)
+        {
+            File.WriteAllText($"../../Json/{filename}.json", content);
+
+        }
+    }
+    [Serializable]
+    public class IdiotException : Exception
+    {
+        public IdiotException() { Console.WriteLine("some idiot fucked up"); }
+        public IdiotException(string message) : base(message) { }
+        public IdiotException(string message, Exception inner) : base(message, inner) { }
+        protected IdiotException(
+          System.Runtime.Serialization.SerializationInfo info,
+          System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
+    }
+}
diff --git a/Classes/MainMenu.cs b/Classes/MainMenu.cs
new file mode 100644
index 0000000..5e0ca05
--- /dev/null
+++ b/Classes/MainMenu.cs
@@ -0,0 +1,288 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    class MainMenu
+    {
+        public static void Logo()
+        {
+            string dashes = "";
+            for (int i = 1; i < Console.WindowWidth; i++) { dashes += "-"; }
+            Program.newEntry(dashes + "\n");
+            Program.newEntry("oooooooooo  o88", ConsoleColor.Magenta);
+            Program.newEntry("              ooooooo", ConsoleColor.DarkMagenta);
+            Program.newEntry("                          oooooooo8\n", ConsoleColor.DarkBlue);
+            Program.newEntry(" 888    888 oooo", ConsoleColor.Magenta);
+            Program.newEntry("           o888   888o  oooooooo8", ConsoleColor.DarkMagenta);
+            Program.newEntry("           o888     88   ooooooo     ooooooo  ooooooooo\n", ConsoleColor.DarkBlue);
+            Program.newEntry(" 888oooo88   888", ConsoleColor.Magenta);
+            Program.newEntry(" ooooooooo", ConsoleColor.DarkYellow);
+            Program.newEntry(" 888     888 888ooooooo", ConsoleColor.DarkMagenta);
+            Program.newEntry(" ooooooooo", ConsoleColor.DarkYellow);
+            Program.newEntry(" 888         888     888 888     888 888    888\n", ConsoleColor.DarkBlue);
+            Program.newEntry(" 888    888  888", ConsoleColor.Magenta);
+            Program.newEntry("           888o   o888         888", ConsoleColor.DarkMagenta);
+            Program.newEntry("          888o     oo 888     888 888     888 888    888\n", ConsoleColor.DarkBlue);
+            Program.newEntry("o888ooo888  o888o", ConsoleColor.Magenta);
+            Program.newEntry("            88ooo88   88oooooo88", ConsoleColor.DarkMagenta);
+            Program.newEntry("            888oooo88    88ooo88     88ooo88   888ooo88\n                                                                                               o888\n", ConsoleColor.DarkBlue);
+            Program.newEntry(dashes + "\n");
+        }
+        public static List<int> sortbyname()
+        {
+            Films jsonFilms = getfilmlist();
+            var movielistname = jsonFilms.movieList.ToDictionary(movieid => movieid.movieid, name => name.name);
+            List<KeyValuePair<int, string>> namesort = new List<KeyValuePair<int, string>>();
+            foreach (KeyValuePair<int, string> name in movielistname)
+            {
+                if (name.Value != null) { namesort.Add(name); }
+            }
+            namesort = namesort.OrderBy(q => q.Value).ToList();
+            List<int> movieids = new List<int>();
+            foreach (KeyValuePair<int, string> id in namesort) { movieids.Add(id.Key); }
+            return movieids;
+        }
+        public static List<int> reversing(List<int> listing, bool reverse)
+        {
+            if (reverse) { listing.Reverse(); }
+            return listing;
+        }
+        public static Bi_Os_Coop.Films getfilmlist()
+        {
+            string json = Json.ReadJson("Films");
+            return JsonSerializer.Deserialize<Films>(json);
+
+        }
+        public static List<int> sortbyrelease()
+        {
+            Films jsonFilms = getfilmlist();
+            var movielistrelease = jsonFilms.movieList.ToDictionary(movieid => movieid.movieid, releasedate => releasedate.releasedate);
+
+            List<KeyValuePair<int, string>> newlist = new List<KeyValuePair<int, string>>();
+            foreach (KeyValuePair<int, string> release in movielistrelease)
+            {
+                if (newlist.Count == 0 && release.Value != null) { newlist.Add(release); }
+                else if (newlist.Count > 0 && release.Value != null)
+                {
+                    try
+                    {
+                        int year = int.Parse(release.Value.Substring(6));
+                        int monthnumber = int.Parse(release.Value.Substring(3, 2));
+                        int day = int.Parse(release.Value.Substring(0, 2));
+                        foreach (KeyValuePair<int, string> member in newlist)
+                        {
+                            int year2 = int.Parse(member.Value.Substring(6));
+                            int monthnumber2 = int.Parse(member.Value.Substring(3, 2));
+                            int day2 = int.Parse(member.Value.Substring(0, 2));
+                            if (year > year2)
+                            {
+                                int index = newlist.IndexOf(member);
+                                newlist.Insert(index, release);
+                                break;
+                            }
+                            else if (year == year2)
+                            {
+                                if (monthnumber > monthnumber2)
+                                {
+                                    int index = newlist.IndexOf(member);
+                                    newlist.Insert(index, release);
+                                    break;
+                                }
+                                else if (monthnumber == monthnumber2)
+                                {
+                                    if (day > day2)
+                                    {
+                                        int index = newlist.IndexOf(member);
+                                        newlist.Insert(index, release);
+                                        break;
+                                    }
+                                }
+                            }
+                            if (newlist.IndexOf(member) == (newlist.Count - 1)) { newlist.Add(release); break; }
+                        }
+                    }
+                    catch { }
+                }
+            }
+            List<int> sortlist = new List<int>();
+            foreach (KeyValuePair<int, string> movie in newlist) { sortlist.Add(movie.Key); }
+            return sortlist;
+        }
+        public static List<int> sortbyrating()
+        {
+            Films jsonFilms = getfilmlist();
+            var movielistrating = jsonFilms.movieList.ToDictionary(movieid => movieid.movieid, beoordeling => beoordeling.beoordeling);
+
+            List<KeyValuePair<int, double>> namesort = new List<KeyValuePair<int, double>>();
+            foreach (KeyValuePair<int, double> rate in movielistrating) { if (rate.Value > 0) { namesort.Add(rate); } }
+
+            namesort = namesort.OrderBy(q => q.Value).ToList();
+            List<int> sortlist = new List<int>();
+            foreach (KeyValuePair<int, double> rating in namesort) { sortlist.Insert(0, rating.Key); }
+            return sortlist;
+        }
+        public static List<string> namelistthing(List<int> printablelist, int index)
+        {
+            List<string> listthing = new List<string>();
+            Films jsonFilms = getfilmlist();
+            for (int i = 1; i < jsonFilms.movieList.Count(); i++)
+            {
+                try
+                {
+                    MovieInterpreter mov = jsonFilms.movieList.Single(movie1 => movie1.movieid == printablelist[i - 1]);
+                    listthing.Add(mov.name);
+                }
+                catch
+                {
+                    break;
+                }
+            }
+            return listthing;
+        }
+        public static List<string> printlist(List<int> printablelist, int index)
+        {
+            Films jsonFilms = getfilmlist();
+            for (int i = ((index * 10 + 1) - 10); i < (index * 10 + 1); i++)
+            {
+                try
+                {
+                    MovieInterpreter mov = jsonFilms.movieList.Single(movie1 => movie1.movieid == printablelist[i - 1]);
+                    string name;
+                    if (mov.name.Length > 35) { name = mov.name.Substring(0, 35).Trim() + "..."; }
+                    else { name = mov.name; }
+                    Console.WriteLine($"{i}.\t{name} ({mov.releasedate}){lengthmakerthing(58 - $"e.\t{name} ({mov.releasedate})".Length, ' ')}Leeftijd: {mov.leeftijd}\tBeoordeling: {mov.beoordeling}");
+                }
+                catch { break; }
+            }
+            return namelistthing(printablelist, index);
+        }
+        public static string lengthmakerthing(int length, char character)
+        {
+            string spaces = "";
+            for (int j = 1; j < length; j++) { spaces += character; }
+            return spaces;
+        }
+        public static void logintext()
+        {
+            string loginstructions = "Druk op 'I' om in te loggen";
+            Console.WriteLine(lengthmakerthing(Console.WindowWidth - loginstructions.Length, ' ') + loginstructions);
+
+            string reginstructions = "Druk op 'O' om te registreren";
+            Console.WriteLine(lengthmakerthing(Console.WindowWidth - reginstructions.Length, ' ') + reginstructions);
+        }
+        public static void logouttext()
+        {
+            string logoutstructions = "Druk op 'U' om uit te loggen";
+            Console.WriteLine(lengthmakerthing(Console.WindowWidth - logoutstructions.Length, ' ') + logoutstructions);
+        }
+        public static List<string> actualmovies(string sort, bool reverse, int index)
+        {
+            List<string> returninglist = new List<string>();
+            if (sort == "name") { returninglist = printlist(reversing(sortbyname(), reverse), index); }
+            else if (sort == "release") { returninglist = printlist(reversing(sortbyrelease(), reverse), index); }
+            else if (sort == "rating") { returninglist = printlist(reversing(sortbyrating(), reverse), index); }
+            return returninglist;
+        }
+        public static Tuple<string, dynamic> loginscreenthing(string login)
+        {
+            Console.Clear();
+            var user = loginscherm.login();
+            Console.Clear();
+            Type userType = user.GetType();
+            if (userType.Equals(typeof(CPeople.Person))) { return new Tuple<string, dynamic>("Person", user); }
+            else if (userType.Equals(typeof(CPeople.Admin))) { return new Tuple<string, dynamic>("Admin", user); }
+            else if (userType.Equals(typeof(CPeople.Employee))) { return new Tuple<string, dynamic>("Employee", user); }
+            return new Tuple<string, dynamic>("None", false);
+        }
+        public static void sorttext(string sort, bool reverse)
+        {
+            Program.newEntry(lengthmakerthing(Console.WindowWidth - 46, ' '));
+            if (sort == "name")
+            {
+                Program.newEntry("Naam (R)", ConsoleColor.Red);
+                Program.newEntry(", Beoordeling (T), Publicatiedatum (Y)\n");
+            }
+            if (sort == "release")
+            {
+                Program.newEntry("Naam (R), Beoordeling (T), ");
+                Program.newEntry("Publicatiedatum (Y)\n", ConsoleColor.Red);
+            }
+            if (sort == "rating")
+            {
+                Program.newEntry("Naam (R), ");
+                Program.newEntry("Beoordeling (T)", ConsoleColor.Red);
+                Program.newEntry(", Publicatiedatum (Y)\n");
+            }
+            Program.newEntry(lengthmakerthing(Console.WindowWidth - 11, ' '));
+            if (reverse) { Program.newEntry("Omkeren (P)\n", ConsoleColor.Green); }
+            else { Program.newEntry("Omkeren (P)\n"); }
+        }
+        public static Type Typegetter(dynamic gettype)
+        {
+            Type userType;
+            try { userType = gettype.GetType(); }
+            catch
+            {
+                string strinng = "";
+                userType = strinng.GetType();
+            }
+            return userType;
+        }
+        public static void MainMenuShow(dynamic user, string sort = "name", bool reverse = false, string login = "None", string language = "Nederlands")
+        {
+            Logo();
+            if (language == "Nederlands")
+            {
+                if (user == null) { logintext(); }
+                else { logouttext(); }
+                sorttext(sort, reverse);
+
+                Console.WriteLine("ACTUELE FILMS:");
+                actualmovies(sort, reverse, 1);
+                string moviemenugo = "Meer Films (E)";
+                Console.WriteLine(lengthmakerthing(Console.WindowWidth - moviemenugo.Length - 22, ' ') + moviemenugo);
+                ConsoleKey keypressed = Console.ReadKey(true).Key;
+                if (keypressed == ConsoleKey.E)
+                {
+                    List<dynamic> mainmenuthings = new List<dynamic>() { user, sort, reverse, login, language };
+                    MovieMenu.mainPagina(mainmenuthings);
+                }
+                else if (keypressed == ConsoleKey.I && user == null)
+                {
+                    Tuple<string, dynamic> login2 = loginscreenthing(login);
+                    login = login2.Item1;
+                    if (login != "None") { user = login2.Item2; }
+                    Type userType = Typegetter(user);
+                    if (userType.Equals(typeof(CPeople.Admin)))
+                    {
+                        List<dynamic> mainmenuthings = new List<dynamic>() { user, sort, reverse, login, language };
+                        adminMenu.AM(mainmenuthings);
+                    }
+                }
+                else if (keypressed == ConsoleKey.O && user == null)
+                {
+                    Console.Clear();
+                    bool createduser = Registerscreen.CreateAccount();
+                    if (createduser)
+                    {
+                        Tuple<string, dynamic> login2 = loginscreenthing(login);
+                        login = login2.Item1;
+                        if (login != "None") { user = login2.Item2; }
+                    }
+                }
+                else if (keypressed == ConsoleKey.R && sort != "name") { sort = "name"; }
+                else if (keypressed == ConsoleKey.T && sort != "rating") { sort = "rating"; }
+                else if (keypressed == ConsoleKey.Y && sort != "release") { sort = "release"; }
+                else if (keypressed == ConsoleKey.U && login != "None") { login = "None"; user = null; }
+                else if (keypressed == ConsoleKey.P) { reverse = !reverse; }
+            }
+            Console.Clear();
+            MainMenuShow(user, sort, reverse, login, language);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Classes/MovieInterpreter.cs b/Classes/MovieInterpreter.cs
new file mode 100644
index 0000000..be7951c
--- /dev/null
+++ b/Classes/MovieInterpreter.cs
@@ -0,0 +1,50 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Bi_Os_Coop
+{
+    public class MovieInterpreter
+    {
+        public int movieid { get; set; }
+        public string name { get; set; }
+        public string releasedate { get; set; }
+        public List<string> genres { get; set; }
+        public int leeftijd { get; set; }
+        public double beoordeling { get; set; }
+        public List<string> acteurs { get; set; }
+        public string taal { get; set; }
+        public string beschrijving { get; set; }
+        public void setFilm(int movieid, string name, string releasedate, List<string> genres, int leeftijd, double beoordeling, List<string> acteurs, string taal = null, string beschrijving = null)
+        {
+            this.movieid = movieid;
+            this.name = name;
+            this.releasedate = releasedate;
+            this.genres = genres.ToList();
+            this.leeftijd = leeftijd;
+            this.beoordeling = beoordeling;
+            this.acteurs = acteurs.ToList();
+            this.taal = taal;
+            this.beschrijving = beschrijving;
+        }
+    }
+    public class Films
+    {
+        public List<MovieInterpreter> movieList { get; set; }
+        public void addFilm(MovieInterpreter newMovie)
+        {
+            if (movieList == null)
+            {
+                List<MovieInterpreter> newMovieList = new List<MovieInterpreter>();
+                newMovieList.Add(newMovie);
+                movieList = newMovieList;
+            }
+            else
+            {
+                movieList.Add(newMovie);
+            }
+        }
+    }
+}
diff --git a/Classes/MovieMenu.cs b/Classes/MovieMenu.cs
new file mode 100644
index 0000000..73c77a7
--- /dev/null
+++ b/Classes/MovieMenu.cs
@@ -0,0 +1,210 @@
+﻿using System;
+using System.Windows.Input;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Text.Json;
+using System.Threading.Tasks;
+using System.Threading;
+
+namespace Bi_Os_Coop
+{
+    class MovieMenu
+    {
+        public static void mainPagina(List<dynamic> mainmenuthings, int index = 1)
+        {
+            string json = Json.ReadJson("Films");
+            Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+            int highestpage;
+            if ((jsonFilms.movieList.Count() - 1) % 10 > 0)
+            {
+                highestpage = (jsonFilms.movieList.Count() - 1) / 10 + 1;
+            }
+            else
+            {
+                highestpage = (jsonFilms.movieList.Count() - 1) / 10;
+            }
+            Console.Clear();
+            MainMenu.Logo();
+            Console.ForegroundColor = ConsoleColor.White;
+            Console.WriteLine("Film Menu\n");
+            MainMenu.sorttext(mainmenuthings[1], mainmenuthings[2]);
+            Console.WriteLine("Type S om een film te zoeken");
+            Console.WriteLine("Of type '0' om terug te gaan naar de main menu");
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.WriteLine("Beschikbare films:\n");
+            List<string> mainmenulist = MainMenu.actualmovies(mainmenuthings[1], mainmenuthings[2], index);
+            Console.WriteLine($"\t\t\t\t\t\t\t\t\t\t\t\tBladzijde {index} van {highestpage}");
+            Console.ForegroundColor = ConsoleColor.White;
+            Console.Write("Type een paginanummer of sorteerfunctie: ");
+            Console.ForegroundColor = ConsoleColor.Gray;
+            string indexstring = Console.ReadLine();
+            if (indexstring.ToLower() == "r" && mainmenuthings[1] != "name")
+            {
+                mainmenuthings[1] = "name";
+            }
+            else if (indexstring.ToLower() == "t" && mainmenuthings[1] != "rating")
+            {
+                mainmenuthings[1] = "rating";
+            }
+            else if (indexstring.ToLower() == "y" && mainmenuthings[1] != "release")
+            {
+                mainmenuthings[1] = "release";
+            }
+            else if (indexstring.ToLower() == "p")
+            {
+                mainmenuthings[2] = !mainmenuthings[2];
+                Console.Clear();
+            }
+            else if (indexstring.ToLower() == "s")
+            {
+                Console.ForegroundColor = ConsoleColor.White;
+                Console.Write("Type hier de film die u wilt zoeken: ");
+                Console.ForegroundColor = ConsoleColor.Gray;
+                string movsearch = Console.ReadLine();
+                MovieMenu.search(movsearch, mainmenulist);
+            }
+            else if (indexstring == "0")
+            {
+                Console.Clear();
+                MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+            }
+            else
+            {
+                try
+                {
+                    index = int.Parse(indexstring);
+                    if (index > highestpage)
+                    {
+                        Console.ForegroundColor = ConsoleColor.Red;
+                        Console.WriteLine("Deze bladzijde bestaat niet!");
+                        Console.ForegroundColor = ConsoleColor.Gray;
+                        Thread.Sleep(1500);
+                        index = highestpage;
+                    }
+                }
+                catch (Exception)
+                {
+                    Console.ForegroundColor = ConsoleColor.Red;
+                    Console.WriteLine("Invoer onjuist, probeer opnieuw!");
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    Thread.Sleep(1000);
+                }
+            }
+            MovieMenu.mainPagina(mainmenuthings, index);
+        }
+        public static void search(string searchmov, List<string> mainmenulist)
+        {
+            string json = Json.ReadJson("Films");
+            Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+            List<string> moviesearchlist = new List<string>();
+            try
+            {
+                int result = Int32.Parse(searchmov) - 1;
+                searchmov = mainmenulist[result];
+            }
+            catch(Exception)
+            {
+
+            }
+            for(int i = 1; i < jsonFilms.movieList.Count(); i++)
+            {
+                    moviesearchlist.Add(jsonFilms.movieList[i].name.ToLower()); 
+            }
+            if (moviesearchlist.Contains(searchmov.ToLower()))
+            {
+                int tempMovie = moviesearchlist.IndexOf(searchmov.ToLower()) + 1;
+                Console.Clear();
+                MovieMenu.showmov(tempMovie);
+            }
+            else
+            {
+                Console.ForegroundColor = ConsoleColor.Red;
+                Console.WriteLine("Film niet gevonden, probeer opnieuw!");
+                Console.ForegroundColor = ConsoleColor.Gray;
+                Thread.Sleep(1000);
+            }
+        }
+        public static void showmov(int tempMovie)
+        {
+            string json = Json.ReadJson("Films");
+            Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+            string gen = null;
+            string act = null;
+            bool newline = false;
+            if (jsonFilms.movieList[tempMovie].genres != null)
+            {
+                if (jsonFilms.movieList[tempMovie].genres.Count() <= 1)
+                {
+                    gen = "Genre";
+                }
+                else
+                {
+                    gen = "Genres";
+                }
+            }
+            if (jsonFilms.movieList[tempMovie].acteurs != null)
+            {
+                if (jsonFilms.movieList[tempMovie].acteurs.Count() <= 1)
+                {
+                    act = "Acteur";
+                }
+                else
+                {
+                    act = "Acteurs";
+                }
+            }
+            MainMenu.Logo();
+            Console.WriteLine($"{jsonFilms.movieList[tempMovie].name}\n");
+            Console.ForegroundColor = ConsoleColor.Gray;
+            if (jsonFilms.movieList[tempMovie].releasedate != null)
+            {
+                Console.WriteLine($"Publicatiedatum: {jsonFilms.movieList[tempMovie].releasedate}");
+            }
+            if (jsonFilms.movieList[tempMovie].taal != null)
+            {
+                Console.WriteLine($"Taal: {jsonFilms.movieList[tempMovie].taal}");
+            }
+            Console.WriteLine($"Minimumleeftijd: {jsonFilms.movieList[tempMovie].leeftijd}");
+            if (jsonFilms.movieList[tempMovie].genres != null)
+            {
+                Console.WriteLine($"{gen}: {String.Join(", ", jsonFilms.movieList[tempMovie].genres)}");
+            }
+            if (jsonFilms.movieList[tempMovie].acteurs != null)
+            {
+                Console.WriteLine($"{act}: {String.Join(", ", jsonFilms.movieList[tempMovie].acteurs)}");
+            }
+            Console.WriteLine($"Beoordeling: {jsonFilms.movieList[tempMovie].beoordeling}");
+            if (jsonFilms.movieList[tempMovie].beschrijving != null)
+            {
+                Console.WriteLine("\nBeschrijving: ");
+                for (int i = 0; i < jsonFilms.movieList[tempMovie].beschrijving.Length; i++)
+                {
+                    char c = jsonFilms.movieList[tempMovie].beschrijving[i];
+                    if ((i % 90 == 0 && i != 0) || newline == true)
+                    {
+                        if (c == ' ')
+                        {
+                            Console.Write("\n");
+                            newline = false;
+                        }
+                        else
+                        {
+                            Console.Write(c);
+                            newline = true;
+                        }
+                    }
+                    else
+                    {
+                        Console.Write(c);
+                        newline = false;
+                    }
+                }
+                Console.Write("\n");
+            }
+            Console.ForegroundColor = ConsoleColor.White;
+            Console.WriteLine("\nWilt u deze film reserveren? (J/N)");
+            Console.ReadLine();
+        }
+    }
+}
diff --git a/Classes/MovieMethods.cs b/Classes/MovieMethods.cs
new file mode 100644
index 0000000..8fa27de
--- /dev/null
+++ b/Classes/MovieMethods.cs
@@ -0,0 +1,276 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    public class MovieMethods
+    {
+        public static void UpdateMovieMenu(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            bool done = false;
+            while (done == false)
+            {
+                Console.WriteLine("======FILM AANPASSEN MENU======");
+                Console.WriteLine("1. Naam aanpassen");
+                Console.WriteLine("2. Releasedatum aanpassen");
+                Console.WriteLine("3. Genres aanpassen");
+                Console.WriteLine("4. Acteurs aanpassen");
+                Console.WriteLine("5. Minimumleeftijd aanpassen");
+                Console.WriteLine("6. Beoordeling aanpassen");
+                Console.WriteLine("7. taal aanpassen");
+                Console.WriteLine("8. Beschrijving aanpassen");
+                Console.WriteLine("9. Andere film aanpassen");
+                Console.WriteLine("0. Exit");
+
+                ConsoleKeyInfo keyReaded = Console.ReadKey();
+
+                switch (keyReaded.Key)
+                {
+                    case ConsoleKey.D1: 
+                        UpdateNameMovie(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D2:
+                        UpdateReleaseDate(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D3:
+                        UpdateGenres(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D4:
+                        UpdateActors(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D5:
+                        UpdateMinimumAge(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D6:
+                        UpdateReviewScore(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D7:
+                        UpdateLanguage(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D8:
+                        UpdateDescription(json, jsonFilms, tempMovie);
+                        break;
+                    case ConsoleKey.D9:
+                        CPeople.Admin admin = new CPeople.Admin();
+                        admin.UpdateMovies();
+                        break;
+                    case ConsoleKey.D0:
+                        adminMenu.hoofdPagina();
+                        break;
+                    default:
+                        Console.WriteLine("Kies voor optie 1-8 of verlaat het menu.");
+                        UpdateMovieMenu(json, jsonFilms, tempMovie);
+                        break;
+                }
+            }
+        }
+        /// <summary>
+        /// Checks if movie exists in json, if found returns the movie
+        /// </summary>
+        /// <param name="name"></param>
+        /// <returns></returns>
+        public static Tuple<bool, MovieInterpreter> DoesMovieExist(string movname)
+        {
+            MovieInterpreter noMovie = new MovieInterpreter();
+            try
+            {
+                string json = Json.ReadJson("Films");
+                Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+                try
+                {
+                    MovieInterpreter tempMovie = new MovieInterpreter();
+                    tempMovie = jsonFilms.movieList.Single(movie => movie.name.ToLower() == movname.ToLower());
+                    return Tuple.Create(true, tempMovie);
+                }
+                catch (NullReferenceException)
+                {
+                    return Tuple.Create(false, noMovie);
+                }
+                
+            }
+            catch (Exception)
+            {                
+                return Tuple.Create(false, noMovie);
+            }
+        }
+
+        public static void UpdateNameMovie(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wat is de nieuwe naam van de film {tempMovie.name}?");
+            string newName = Console.ReadLine();
+            tempMovie.name = newName;
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("Film naam is succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+
+        public static void UpdateReleaseDate(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wat is de nieuwe releasedatum van de film {tempMovie.name}?");
+            string newReleaseDate = Console.ReadLine();
+            tempMovie.releasedate = newReleaseDate;
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("De releasedatum is succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+
+        public static void UpdateGenres(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wat is/zijn de nieuwe genre(s) van de film {tempMovie.name}?");
+            Console.WriteLine("Voeg tussen elke genre een komma toe, bijv: Komedie, Actie, Thriller");
+            Console.WriteLine("Genres film:");
+            string genres = Console.ReadLine();
+            List<string> newGenres = genres.Split(',').ToList();
+            List<string> newGenres2 = new List<string>();
+            foreach (string genre in newGenres)
+            {
+                string genre2 = genre.Trim();
+                newGenres2.Add(genre2);
+            }
+            tempMovie.genres = newGenres2;
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("De genre(s) is/zijn succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+
+        public static void UpdateActors(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wie is/zijn de nieuwe acteurs van de film {tempMovie.name}?");
+            Console.WriteLine("Voeg tussen elke acteur een komma toe, bijv: Sean Connery, Ryan Gosling, Ryan Reynolds");
+            Console.WriteLine("Acteurs film:");
+            string actors = Console.ReadLine();
+            List<string> newActors = actors.Split(',').ToList();
+            tempMovie.genres = newActors;
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("De acteur(s) is/zijn succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+
+        public static void UpdateMinimumAge(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wat is de nieuwe minimum leeftijd van de film {tempMovie.name}? (0-18)");
+            string newMinimumAge = Console.ReadLine();
+            try
+            {
+                tempMovie.leeftijd = Convert.ToInt32(newMinimumAge);
+            }
+            catch (FormatException)
+            {
+                Console.ForegroundColor = ConsoleColor.Red;
+                Console.WriteLine("Voer een getal tussen de 0 en 18 in.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                UpdateMinimumAge(json, jsonFilms, tempMovie);
+            }
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("De minimumleeftijd is succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+
+        public static void UpdateReviewScore(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wat is de nieuwe beoordeling van de film {tempMovie.name}? (0-10.0)");
+            string newScore = Console.ReadLine();
+            try
+            {
+                tempMovie.beoordeling = Convert.ToDouble(newScore);
+            }
+            catch (FormatException)
+            {
+                Console.ForegroundColor = ConsoleColor.Red;
+                Console.WriteLine("Voer een getal tussen de 0 en 10.0 in.");
+                System.Threading.Thread.Sleep(1000);
+                Console.ForegroundColor = ConsoleColor.Gray;
+                UpdateReviewScore(json, jsonFilms, tempMovie);
+            }
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("De beoordeling is succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+        public static void UpdateDescription(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wat is de nieuwe beschrijving van de film {tempMovie.name}?");
+            string newName = Console.ReadLine();
+            tempMovie.beschrijving = newName;
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("Film beschrijving is succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+        public static void UpdateLanguage(string json, Films jsonFilms, MovieInterpreter tempMovie)
+        {
+            Console.Clear();
+            Console.WriteLine($"Wat is de nieuwe taal van de film {tempMovie.name}?");
+            string newName = Console.ReadLine();
+            tempMovie.taal = newName;
+
+            json = JsonSerializer.Serialize(jsonFilms);
+            Json.WriteJson("Films", json);
+
+            Console.ForegroundColor = ConsoleColor.Green;
+            Console.WriteLine("Film taal is succesvol gewijzigd.");
+            System.Threading.Thread.Sleep(1000);
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.Clear();
+            UpdateMovieMenu(json, jsonFilms, tempMovie);
+        }
+    }
+}
diff --git a/Classes/PasswordMethods.cs b/Classes/PasswordMethods.cs
new file mode 100644
index 0000000..14f75e7
--- /dev/null
+++ b/Classes/PasswordMethods.cs
@@ -0,0 +1,116 @@
+﻿using System;
+using System.Linq;
+using System.Text.Json;
+using System.Collections.Generic;
+
+namespace Bi_Os_Coop
+{
+    public class PasswordMethods
+    {
+        public static void SetNewPassword(string emailIngelogd, string passwordIngelogd, List<dynamic> mainmenuthings)
+        {
+            Console.Clear();
+            Console.WriteLine("Vul nu uw nieuwe wachtwoord in:");
+            string newPassword = Console.ReadLine();
+            Console.WriteLine("Vul nogmaals uw nieuwe wachtwoord in:");
+            string tempNewPassword = Console.ReadLine();
+
+            if (tempNewPassword == newPassword)
+            {
+                string json = Json.ReadJson("Accounts");
+                CPeople.People jsonPeople = JsonSerializer.Deserialize<CPeople.People>(json);
+                try
+                {
+                    CPeople.Person tempPerson = jsonPeople.peopleList.Single(person => person.email == emailIngelogd && person.password == passwordIngelogd);
+                    //passwordIngelogd = newPassword;
+                    tempPerson.password = newPassword;
+
+                    json = JsonSerializer.Serialize(jsonPeople);
+                    Json.WriteJson("Accounts", json);
+
+                    Console.ForegroundColor = ConsoleColor.Green;
+                    Console.WriteLine("U heeft uw wachtwoord succesvol gewijzigd.");
+                    System.Threading.Thread.Sleep(2000);
+                    Console.ForegroundColor = ConsoleColor.Gray;
+                    Console.Clear();
+                    MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                }
+                catch (InvalidOperationException)
+                {
+                    Console.WriteLine("Dit account bestaat niet.");
+                    System.Threading.Thread.Sleep(2000);
+                    Console.Clear();
+                    MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                }
+            }
+            else
+            {
+                Console.WriteLine("Uw wachtwoord komt niet overeen.");
+                System.Threading.Thread.Sleep(2000);
+                SetNewPassword(emailIngelogd, passwordIngelogd, mainmenuthings);
+            }
+        }
+
+        public static void PasswordEntries(List<dynamic> mainmenuthings)
+        {
+            int amountOfPasswordEntries = 3;
+            while (amountOfPasswordEntries > 0)
+            {
+                Console.WriteLine($"Wachtwoord of email onjuist. U heeft nog {amountOfPasswordEntries} pogingen.");
+                Console.WriteLine("Vul nogmaals uw emailadres in:");
+                string currentEmail = Console.ReadLine();
+
+                Console.WriteLine("Vul nogmaals uw wachtwoord in:");
+                string currentPassword = Console.ReadLine();
+
+                if (MailWachtwoordCheck(currentEmail, currentPassword))
+                {
+                    SetNewPassword(currentEmail, currentPassword, mainmenuthings);
+                }
+                else
+                {
+                    amountOfPasswordEntries--;
+                    if (amountOfPasswordEntries == 0)
+                    {
+                        Console.WriteLine("U heeft geen pogingen meer. Probeer het later nog eens.");
+                        System.Threading.Thread.Sleep(2000);
+                        Console.Clear();
+                        MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                    }
+                }
+            }
+        }
+
+        public static bool MailLeeftijdCheck(string username, string age)
+        {
+            string account = Json.ReadJson("Accounts");
+            CPeople.People accounts = new CPeople.People();
+            accounts = accounts.FromJson(account);
+            try
+            {
+                CPeople.Person persoon = accounts.peopleList.Single(person => person.email == username && person.age == age);
+                return true;
+            }
+            catch (InvalidOperationException)
+            {
+                return false;
+            }
+        }
+
+        public static bool MailWachtwoordCheck(string username, string password)
+        {
+            string account = Json.ReadJson("Accounts");
+            CPeople.People accounts = new CPeople.People();
+            accounts = accounts.FromJson(account);
+            try
+            {
+                CPeople.Person persoon = accounts.peopleList.Single(person => person.email == username && person.password == password);
+                return true;
+            }
+            catch (InvalidOperationException)
+            {
+                return false;
+            }
+        }
+    }
+}
diff --git a/Classes/Registerscreen.cs b/Classes/Registerscreen.cs
new file mode 100644
index 0000000..04c6b68
--- /dev/null
+++ b/Classes/Registerscreen.cs
@@ -0,0 +1,200 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    class Registerscreen
+    {   
+        public static bool CreateAccount()
+        {
+            string json = Json.ReadJson("Accounts");
+            CPeople.People jsonPeople = new CPeople.People();
+            jsonPeople = jsonPeople.FromJson(json);
+
+            string naam = validCheck("voor- en achternaam", lengthCheck);
+            string birthdate = validCheck("geboortedatum (dd/mm/jjjj)", dateCheck);
+            if (AgeVerify(birthdate, 14)) {
+
+                int id = createID();
+                string email = validCheck("e-mailadres", emailCheck);
+                string phoneNumber = validCheck("mobiele telefoonnummer", phoneCheck);
+                string password = validCheck("wachtwoord", lengthCheck);
+
+                CPeople.Person customer = new CPeople.Person();
+                customer.setPerson(id, naam, email.ToLower(), password, birthdate, phoneNumber);
+                jsonPeople.AddPerson(customer);
+                string add = jsonPeople.ToJson();
+                Json.WriteJson("Accounts", add);
+                Program.newEntry("\nUw account is gemaakt.\nDruk op ENTER om verder te gaan.");
+                Console.ReadLine();
+                Console.Clear();
+                return true;
+            }
+            else{
+                Program.newEntry("\nSorry, je kunt pas een account aanmaken als je 14 jaar of ouder bent.", ConsoleColor.Red);
+                Program.newEntry("\nDruk op enter om terug te gaan.");
+                Console.ReadLine();
+                Console.Clear();
+                return false;
+            }
+        }
+
+        public static int createID()
+        {
+            string json = Json.ReadJson("Accounts");
+            CPeople.People jsonPeople = new CPeople.People();
+            jsonPeople = jsonPeople.FromJson(json);
+            string ret = "";
+            Random randint = new Random();
+
+            for(int i = 0; i < 5; i++)
+            {
+                ret = ret + randint.Next(0, 10).ToString();
+            }
+            try
+            {
+                CPeople.Person persoon = jsonPeople.peopleList.Single(x => x.id == int.Parse(ret));
+                return createID();
+            }
+            catch (InvalidOperationException)
+            {
+                CPeople.Person persoon = new CPeople.Person();
+                return int.Parse(ret);
+            }
+        }
+
+        public static string validCheck(string print, Func<string, bool> function)
+        {
+            bool valid = false;
+            string input = "";
+
+            while (!valid)
+            {
+                Console.WriteLine($"\nTyp hier uw {print}:");
+                input = Console.ReadLine();
+                if (function(input))
+                    valid = true;
+            }
+
+
+            return input;
+        }
+
+        public static bool emailCheck(string input)
+        {
+            string json = Json.ReadJson("Accounts");
+            CPeople.People jsonPeople = new CPeople.People();
+            jsonPeople = jsonPeople.FromJson(json);
+            bool at = false;
+            bool dot = false;
+            if (lengthCheck(input)){
+                foreach (char element in input)
+                {
+                    if (element == '@'){
+                        at = true;
+                    }
+                    if (element == '.')
+                    {
+                        dot = true;
+                    }
+                }
+                if (at && dot){
+                    try
+                    {
+                        CPeople.Person persoon = jsonPeople.peopleList.Single(x => x.email == input);
+                        Program.newEntry("Dit e-mailadres is al gekoppeld aan een account.\n", ConsoleColor.Red);
+                        return false;
+                    }
+                    catch (InvalidOperationException)
+                    {
+                        CPeople.Person persoon = new CPeople.Person();
+                        return true;
+                    }
+                }
+            }
+            errorMessage("e-mailadres", "iemand@example.nl");
+            return false;
+        }
+
+        public static bool phoneCheck(string input)
+        {
+            string json = Json.ReadJson("Accounts");
+            CPeople.People jsonPeople = new CPeople.People();
+            jsonPeople = jsonPeople.FromJson(json);
+            int value;
+            if (input.Length == 10){
+                if (input.Substring(0, 2) == "06"){
+                    if (int.TryParse(input, out value)){
+                        try
+                        {
+                            CPeople.Person persoon = jsonPeople.peopleList.Single(x => x.phonenumber == input);
+                            Program.newEntry("Dit telefoonnummer is al gekoppeld aan een account.\n", ConsoleColor.Red);
+                            return false;
+                        }
+                        catch (InvalidOperationException)
+                        {
+                            CPeople.Person persoon = new CPeople.Person();
+                            return true;
+                        }
+                    }
+                }
+            }
+            errorMessage("telefoonnummer", "06XXXXXXXX");
+            return false;
+        }
+        public static bool dateCheck(string date)
+        {
+            if (lengthCheck(date))
+            {
+                int i;
+                if (!(int.TryParse(date[2].ToString(), out i) && int.TryParse(date[5].ToString(), out i)))
+                    return true;
+            }
+            errorMessage("geboortedatum", "dd/mm/jjjj");
+            return false;
+        }
+
+        public static bool lengthCheck(string s)
+        {
+            if (s.Length != 0)
+                return true;
+            Program.newEntry("Dit is geen geldige input!\n", ConsoleColor.Red);
+            return false;
+        }
+        public static void errorMessage(string s, string t)
+        {
+            Program.newEntry($"Vul uw {s} alstublieft in volgens de volgende format: {t}\n", ConsoleColor.Red);
+        }
+
+        public static bool AgeVerify(string birthdate, int minimalAge)
+        {
+            DateTime todaysDate = DateTime.Now.Date;
+            int currentDay = todaysDate.Day;
+            int currentMonth = todaysDate.Month;
+            int currentYear = todaysDate.Year;
+            int birthYear = int.Parse(birthdate.Substring(6));
+            int month = int.Parse(birthdate.Substring(3, 2));
+            int day = int.Parse(birthdate.Substring(0, 2));
+            int age = currentYear - birthYear;
+
+            if (month > currentMonth)
+            {
+                age -= 1;
+            }
+            else if (currentMonth >= month)
+            {
+                if (day > currentDay)
+                {
+                    age -= 1;
+                }
+            }
+            if (minimalAge < age)
+                return true;
+            return false;
+        }
+    }
+}
diff --git a/Classes/Zalen.cs b/Classes/Zalen.cs
new file mode 100644
index 0000000..aab3438
--- /dev/null
+++ b/Classes/Zalen.cs
@@ -0,0 +1,387 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    public class ZAALTESTERNIETGEBRUIKEN
+    {
+        public void Test()
+        {
+            Zalen testzaal = new Zalen();
+            Zaal tijdelijkeZaal = new Zaal();
+            //tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100);
+            tijdelijkeZaal.showStool();
+            CPeople.Person Henk = new CPeople.Person();
+            Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
+            //tijdelijkeZaal.Reser(-5, Henk);
+            Console.ReadKey();
+            testzaal.AddZaal(tijdelijkeZaal);
+            testzaal.writeZalen();
+            string json = testzaal.ToJson();
+            Json.WriteJson("Zalen", json);
+            Console.ReadKey();
+            Zalen testzaal2 = new Zalen();
+            string json2 = Json.ReadJson("Zalen");
+            testzaal2 = testzaal2.FromJson(json2);
+            //int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
+            int gfdjhfskd = 30;
+            testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
+            foreach (Zaal zaal in testzaal2.zalenList)
+            {
+                zaal.showStool();
+            }
+            Console.ReadKey();
+            json2 = testzaal2.ToJson();
+            Json.WriteJson("Zalen", json2);
+            testzaal2 = testzaal2.FromJson(json2);
+            foreach (Zaal zaal in testzaal2.zalenList)
+            {
+                zaal.showStool();
+            }
+        }
+    }
+
+    internal class Zalen
+    {
+        public List<Zaal> zalenList { get; set; }
+
+        public void AddZaal(Zaal zaal)
+        {
+            if (zalenList == null)
+            {
+                List<Zaal> newZaal = new List<Zaal> { zaal };
+                zalenList = newZaal;
+            }
+            else
+            {
+                zalenList.Add(zaal);
+            }
+        }
+
+        public void writeZalen()
+        {
+            foreach (Zaal zaal in this.zalenList)
+            {
+                Console.Write($"\ndate:{zaal.date} \t");
+                Console.Write($"time:{zaal.time} \t");
+                Console.Write($"movie:{zaal.film.name} \n");
+            }
+        }
+
+        public string ToJson()
+        {
+            JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+            return JsonSerializer.Serialize(this, opt);
+        }
+
+        public Zalen FromJson(string json)
+        {
+            return JsonSerializer.Deserialize<Zalen>(json);
+        }
+
+        public void Reserveseats(int[] indexes, CPeople.Person orderer, string date, string time)
+        {
+            Zaal gekozenzaal = zalenList.Single(movie => movie.date == date && movie.time == time);
+            gekozenzaal.occupyStool(indexes, orderer);
+        }
+
+        public void Reserveseats(int index, CPeople.Person orderer, string date, string time)
+        {
+            Zaal gekozenzaal = zalenList.Single(movie => movie.date == date && movie.time == time);
+            int[] indexs = new int[1];
+            indexs[0] = index;
+            gekozenzaal.occupyStool(indexs, orderer);
+        }
+    }
+
+    internal class Zaal
+    {
+        public enum Size : int // https://imgur.com/gallery/FmTnf7e Size chart
+        {
+            MegaChonker = 500,
+            heftyChonk = 300,
+            chonk = 150
+        }
+
+        private int stoelWidth { get; set; }
+        public string date { get; set; }
+        public string time { get; set; }
+        public MovieInterpreter film { get; set; } //Film film {get; set;}
+        public List<Stoel> stoelen { get; set; }
+
+        public void setZaal(string date, string time, int totalStools, MovieInterpreter film = null)
+        {
+            this.date = date;
+            this.time = time;
+            this.film = film;
+            List<Stoel> nstoelen = new List<Stoel>();
+            /*
+            for (int i = 0; i < totalStools; i++)
+            {
+                Stoel stoel = new Stoel();
+                nstoelen.Add(stoel);
+                stoelen = nstoelen;
+            }*/
+            if (totalStools == (int)Size.MegaChonker)
+            {
+                totalStools = totalStools +130;
+                this.stoelWidth = 30;
+                for (int i = 0; i < totalStools; i++)
+                {
+                    Stoel stoel = new Stoel();
+                    stoel.setStoolDefault(stoel.stoolworth(i, totalStools));
+                    nstoelen.Add(stoel);
+                }
+                stoelen = nstoelen;
+            }
+            else if (totalStools == (int)Size.heftyChonk)
+            {
+                totalStools = totalStools + 42;
+                this.stoelWidth = 18;
+                for (int i = 0; i < totalStools; i++)
+                {
+                    Stoel stoel = new Stoel();
+                    stoel.setStoolDefault(stoel.stoolworth(i, totalStools));
+                    nstoelen.Add(stoel);
+                }
+                stoelen = nstoelen;
+            }
+            else if (totalStools == (int)Size.chonk)
+            {
+                totalStools = totalStools + 18;
+                this.stoelWidth = 12;
+                for (int i = 0; i < totalStools; i++)
+                {
+                    Stoel stoel = new Stoel();
+                    stoel.setStoolDefault(stoel.stoolworth(i, totalStools));
+                    nstoelen.Add(stoel);
+                }
+                stoelen = nstoelen;
+            }
+            //showStool();
+        }
+
+        public void applyzaal()
+        {
+        }
+
+        /// <summary>
+        /// Occupies a stool
+        /// </summary>
+        /// <param name="index"></param>
+        /// <param name="orderer"></param>
+        public int occupyStool(int[] indexs, CPeople.Person orderer)
+        {
+            //orderer is the 'Owner' of that chair
+            //index -= 1; // we have to count the seats from 1 but in code from 0 so if someone wants to order Seat 1 in code it will be seat 0
+
+            /* 20 seats Rows of seats are divided by one or more aisles so that there are seldom more than 20 seats in a row.
+             * This allows easier access to seating, as the space between rows is very narrow.
+             * Depending on the angle of rake of the seats, the aisles have steps.
+             * 1 2 3 4 5 6 7 8 9 10;
+             * 11 12 13 14 15 16 17 18 19 20;
+             * I'm going to prompt it the numbers 001, 002, 003, 004, 005, 006, 007, 008, 009, 010... in return
+             */
+            try
+            {
+                foreach (int index in indexs)
+                {
+                    if (stoelen.ElementAt(index).isOccupied)
+                    {
+                        Console.WriteLine($"{index - 1} stool is already ");
+                        return -1;
+                    }
+                    stoelen.ElementAt(index - 1).isOccupied = true;
+                    stoelen.ElementAt(index - 1).isOccupiedBy = orderer.id;
+                }
+                return 1;
+            }
+            catch (ArgumentOutOfRangeException)
+            {
+                Console.WriteLine($"\n\none of the chairs is not valid"); // Textbox.Hint
+                return 0;
+            }
+        }
+
+        /// <summary>
+        /// DIT IS CONOLSE
+        /// </summary>
+        public void showStool()
+        {
+            Console.Clear();
+            int counter = 0;
+            Console.ForegroundColor = ConsoleColor.White;
+            foreach (Stoel stoel in this.stoelen)
+            {
+                if (counter % stoelWidth == 0)
+                {
+                    if (counter < 10) { }
+                    else { Console.WriteLine("\n"); }
+                }
+
+                if (stoelen.ElementAt(counter).isOccupied)
+                {
+                    Console.BackgroundColor = ConsoleColor.Red;
+                }
+                else
+                {
+                    if (stoel.Price == Stoel.price.NONE)
+                    {
+                        Console.BackgroundColor = ConsoleColor.White;
+                    }
+                    else if (stoel.Price == Stoel.price.LOW)
+                    {
+                        Console.BackgroundColor = ConsoleColor.Blue;
+                    }
+                    else if (stoel.Price == Stoel.price.MEDIUM)
+                    {
+                        Console.BackgroundColor = ConsoleColor.Yellow;
+                    }
+                    else if (stoel.Price == Stoel.price.HIGH)
+                    {
+                        Console.BackgroundColor = ConsoleColor.DarkYellow;
+                    }
+                }
+                if (counter <= 8)
+                {
+                    Console.Write($"00{counter + 1}");
+                }
+                else if (counter <= 98)
+                {
+                    Console.Write($"0{counter + 1}");
+                }
+                else
+                {
+                    Console.Write($"{counter + 1}");
+                }
+                Console.BackgroundColor = ConsoleColor.Black;
+                Console.Write(" ");
+                counter += 1;
+            }
+        }
+    }
+
+    internal class Stoel
+    {
+        public enum price : int
+        {
+            HIGH = 20,
+            MEDIUM = 15,
+            LOW = 10,
+            NONE = 0
+        }
+        public bool isOccupied { get; set; } = false;
+        public int isOccupiedBy { get; set; } = 1; //dan kan je het ID van de persoon uit lezen
+        public price Price { get; set; }
+
+        public void setStoolDefault(price prijs = price.LOW)
+        {
+            if (prijs == price.NONE)
+            {
+                this.isOccupied = true;
+            }
+            else
+            {
+                this.isOccupiedBy = 1;
+            }
+            this.isOccupied = false;
+            this.Price = prijs;
+        }
+
+        public price stoolworth(int index, int size)
+        {
+            int[] stoelen500 = new int[] {
+              //1 2 3 4 5 6 7 8 9 10 11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
+                0,0,0,0,1,1,1,1,1,1 ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0  ,0, //20
+                0,0,0,1,1,1,1,1,1,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //19
+                0,0,0,1,1,1,1,1,2,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //18
+                0,0,0,1,1,1,1,1,2,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //17
+                0,0,0,1,1,1,1,2,2,2 ,2  ,2  ,2  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //16
+                0,0,1,1,1,1,1,2,2,2 ,2  ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0  ,0, //15
+                0,1,1,1,1,1,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0, //14
+                1,1,1,1,1,1,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1, //13
+                1,1,1,1,1,2,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1, //12
+                1,1,1,1,1,2,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1, //11
+                1,1,1,1,1,1,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1, //10
+                1,1,1,1,1,1,1,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1, //9
+                0,1,1,1,1,1,1,1,2,2 ,2  ,2  ,2  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0, //8
+                0,0,1,1,1,1,1,1,2,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0, //7
+                0,0,1,1,1,1,1,1,1,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0, //6
+                0,0,0,1,1,1,1,1,1,1 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //5
+                0,0,0,1,1,1,1,1,1,1 ,1  ,1  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //4
+                0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
+                0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,
+                0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
+                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+            };
+            int[] stoelen300 = new int[] {
+                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
+                0,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,0,
+                0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,
+                0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,
+                0,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,0,
+                0,1,1,1,2,2,2,2,3,3,2,2,2,2,1,1,1,0,
+                1,1,1,2,2,2,2,3,3,3,3,2,2,2,2,1,1,1,
+                1,1,1,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,
+                1,1,2,2,2,2,3,3,3,3,3,3,2,2,2,2,1,1,
+                1,1,2,2,2,2,3,3,3,3,3,3,2,2,2,2,1,1,
+                1,1,2,2,2,2,3,3,3,3,3,3,2,2,2,2,1,1,
+                0,1,1,2,2,2,2,3,3,3,3,2,2,2,2,1,1,0,
+                0,1,1,1,2,2,2,2,3,3,2,2,2,2,1,1,1,0,
+                0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,
+                0,0,1,1,1,1,2,2,2,2,2,2,1,1,1,1,0,0,
+                0,0,1,1,1,1,2,2,2,2,2,2,1,1,1,1,0,0,
+                0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
+                0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
+                0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0
+
+            };
+            int[] stoelen150 = new int[]
+            {
+                0,0,1,1,1,1,1,1,1,1,0,0,
+                0,1,1,1,1,1,1,1,1,1,1,0,
+                0,1,1,1,1,1,1,1,1,1,1,0,
+                1,1,1,1,1,2,2,1,1,1,1,1,
+                1,1,1,1,2,2,2,2,1,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,1,2,2,2,2,1,1,1,1,
+                1,1,1,1,1,2,2,1,1,1,1,1,
+                0,1,1,1,1,1,1,1,1,1,1,0,
+                0,0,1,1,1,1,1,1,1,1,0,0,
+                0,0,1,1,1,1,1,1,1,1,0,0
+
+            };
+            int returner;
+            if (size == 630)
+            {
+                returner = stoelen500[index];
+                //Console.WriteLine(stoelen500.Length);
+            }
+            else if (size == 342)
+            {
+                returner = stoelen300[index];
+                //Console.WriteLine(stoelen300.Length);
+            }
+            else if (size == 168)
+            {
+                returner = stoelen150[index];
+                //Console.WriteLine(stoelen150.Length);
+            }
+            else
+            {
+                throw new IdiotException();
+            }
+            if (returner == 0) { return price.NONE; }
+            else if (returner == 1) { return price.LOW; }
+            else if (returner == 2) { return price.MEDIUM; }
+            else if (returner == 3) { return price.HIGH; }
+            //Console.ReadKey();
+            return price.LOW; // incase of idiot exception ;-;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Classes/adminMenu.cs b/Classes/adminMenu.cs
new file mode 100644
index 0000000..7f83d11
--- /dev/null
+++ b/Classes/adminMenu.cs
@@ -0,0 +1,224 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    public class adminMenu
+    {
+        public static void AM(List<dynamic> mainmenuthings)
+        {
+            CPeople.Admin admin = new CPeople.Admin();
+            CPeople.Person adminAccount = new CPeople.Person();
+            adminAccount.setPerson(3, "admin", "admin123@gmail.com", "admin123", "42", "0681234567");
+            //string path = "../../Json/admin.json";
+            //string tekstUitJson = System.IO.File.ReadAllText(path);
+            //admin objectTest = new admin();
+            //objectTest = JsonSerializer.Deserialize<admin>(tekstUitJson);
+
+            //JsonSerializerOptions options = new JsonSerializerOptions() { WriteIndented = true };
+            //tekstUitJson = JsonSerializer.Serialize(objectTest, options);
+            //System.IO.File.WriteAllText(path, tekstUitJson);
+
+            //while loop die hoofdPagina loopt tot je "0" in tikt
+            bool inDitMenu = true;
+            bool isCoronaFilter = coronaCheck();
+            Console.WriteLine(isCoronaFilter);
+            while (inDitMenu)
+            {
+                ConsoleKey keuze = hoofdPagina();
+                if (keuze == ConsoleKey.D0)
+                {
+                    Environment.Exit(0);
+                }
+                else if (keuze == ConsoleKey.D1)
+                {
+                    inDitMenu = false;
+                    Console.Clear();
+                    MainMenu.MainMenuShow(mainmenuthings[0], mainmenuthings[1], mainmenuthings[2], mainmenuthings[3], mainmenuthings[4]);
+                }
+                else if (keuze == ConsoleKey.D2)
+                {
+                    inDitMenu = false;
+                    Console.Clear();
+                    admin.AddMovies();
+                }
+
+                else if (keuze == ConsoleKey.D3)
+                {
+                    inDitMenu = false;
+                    Console.Clear();
+                    admin.UpdateMovies();
+                }
+                else if (keuze == ConsoleKey.D4)
+                {
+                    inDitMenu = false;
+                    Console.Clear();
+                    // koppelen met boeken; if (!geboekt) > delete movie
+                    admin.DeleteMovies();
+                }
+                else if (keuze == ConsoleKey.D5)
+                {
+                    inDitMenu = false;
+                    Console.Clear();
+                    admin.AddCinemaHall();
+                }
+                //else if (keuze == ConsoleKey.D6)
+                //{
+                //    admin.DeleteCinemaHall();
+                //}
+                //else if (keuze == ConsoleKey.D6)
+                //{
+                //    AddAdmin();
+                //}
+                else if (keuze == ConsoleKey.D8)
+                {
+                    inDitMenu = false;
+                    Console.Clear();
+                    CoronaFilter(isCoronaFilter);
+                }
+                else
+                {
+                    Console.Clear();
+                    hoofdPagina();
+                }
+            }
+        }
+
+        public static ConsoleKey hoofdPagina()
+        {
+            Console.Clear();
+            MainMenu.Logo();
+            Console.WriteLine("Admin Menu\n");
+            Console.WriteLine("Maak een keuze: ");
+            Console.WriteLine("1) Naar Main Menu");
+            Console.WriteLine("2) Film toevoegen");
+            Console.WriteLine("3) Film aanpassen");
+            Console.WriteLine("4) Film verwijderen");
+            Console.WriteLine("5) Zaal toevoegen");
+            //Console.WriteLine("6) Zaal verwijderen");
+            //Console.WriteLine("7) Admin Toevoegen");
+            Console.WriteLine($"8) Corona filter toepassen \t {coronaCheck()}");
+            Console.WriteLine("Of type '0' om te stoppen");
+            Console.Write("\nKies een pagina: ");
+            ConsoleKey keuze = Console.ReadKey(true).Key;
+            return keuze;
+        }
+        public static bool coronaCheck()
+        {
+            Zalen zalen = new Zalen();
+            string jsonZalen = Json.ReadJson("Zalen");
+            zalen = zalen.FromJson(jsonZalen);
+            foreach (Zaal zaal in zalen.zalenList)
+            {
+                List<Stoel> stoel = zaal.stoelen;
+                foreach (Stoel stoel2 in stoel)
+                {
+                    if (stoel2.isOccupied == true && stoel2.Price == 0 && stoel2.isOccupiedBy == 0)
+                    {
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+
+        public static void CoronaFilter(bool isCoronaFilter)
+        {
+            Zalen zalen = new Zalen();
+            string jsonZalen = Json.ReadJson("Zalen");
+            zalen = zalen.FromJson(jsonZalen);
+            if (!isCoronaFilter)
+            {
+                foreach (Zaal zaal in zalen.zalenList)
+                {
+                    int count = 0;
+                    List<Stoel> stoel = zaal.stoelen;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true)
+                        {
+                            count += 1;
+                        }
+                    }
+                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
+                    int tempIndex = 0;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true && tempIndex < count)
+                        {
+                            occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
+                        }
+                    }
+#warning "ik heb dit aangepast want de chairwidt is niet meer nodig"
+                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
+                    for (int j = 0, i = 0; j < 100; j++)
+                    {
+                        if (j % 3 == 0)
+                        {
+                            zaal.stoelen[j].isOccupied = false;
+                            zaal.stoelen[j].isOccupiedBy = 1;
+                            zaal.stoelen[j].Price = Stoel.price.LOW;
+                        }
+                        else
+                        {
+                            zaal.stoelen[j].isOccupied = true;
+                            zaal.stoelen[j].isOccupiedBy = 0;
+                            zaal.stoelen[j].Price = 0;
+                        }
+                        int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
+                        if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
+                        {
+                            zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
+                            zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
+                            zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
+                            i++;
+                        }
+                    }
+                    Json.WriteJson("Zalen", zalen.ToJson());
+                }
+            }
+            else
+            {
+                foreach (Zaal zaal in zalen.zalenList)
+                {
+                    int count = 0;
+                    List<Stoel> stoel = zaal.stoelen;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true && stoel2.Price != 0)
+                        {
+                            count += 1;
+                        }
+                    }
+                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
+                    int tempIndex = 0;
+                    foreach (Stoel stoel2 in stoel)
+                    {
+                        if (stoel2.isOccupied == true && stoel2.Price != 0 && tempIndex < count)
+                        {
+                            occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
+                        }
+                    }
+#warning "ik heb dit aangepast want de chairwidt is niet meer nodig"
+                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
+                    for (int j = 0, i = 0; j < 100; j++)
+                    {
+                        int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);
+                        if (i < occupiedStoelen.Length && occupiedStoelen[i].Item4 == index)
+                        {
+                            zaal.stoelen[j].isOccupied = occupiedStoelen[i].Item1;
+                            zaal.stoelen[j].isOccupiedBy = occupiedStoelen[i].Item2;
+                            zaal.stoelen[j].Price = occupiedStoelen[i].Item3;
+                            i++;
+                        }
+                    }
+                    Json.WriteJson("Zalen", zalen.ToJson());
+                }
+            }
+        }
+    }
+}
diff --git a/Classes/loginscherm.cs b/Classes/loginscherm.cs
new file mode 100644
index 0000000..5fa463d
--- /dev/null
+++ b/Classes/loginscherm.cs
@@ -0,0 +1,92 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Security;
+
+namespace Bi_Os_Coop
+{
+    class loginscherm
+    {
+        /// <summary>
+        /// ik gebruik Dynamic hier want we willen admin//employee//User
+        /// </summary>
+        public static dynamic mailwachtvragen(string username, string password)
+        {
+            string account = Json.ReadJson("Accounts");
+            CPeople.People accounts = new CPeople.People();
+            accounts = accounts.FromJson(account);
+            try
+            {
+                CPeople.Person persoon = accounts.peopleList.Single(henk => henk.email.ToLower() == username.ToLower() && henk.password == password);
+                return persoon;
+            }
+            catch (Exception)
+            {
+                try
+                {
+                    CPeople.Admin admin = accounts.adminList.Single(henk => henk.email.ToLower() == username.ToLower() && henk.password == password);
+                    return admin;
+                }
+                catch (Exception)
+                {
+                    try
+                    {
+                        CPeople.Employee employee = accounts.employeeList.Single(henk => henk.email.ToLower() == username.ToLower() && henk.password == password);
+                        return employee;
+                    }
+                    catch (Exception)
+                    {
+                        check();
+                        return false;
+                    }
+                }
+            }
+        }
+        public static dynamic login()
+        {
+            Console.ForegroundColor = ConsoleColor.Gray;
+            Console.WriteLine("E-mail:");
+            string username = Console.ReadLine();
+            Console.WriteLine("Wachtwoord:");
+            SecureString pass = maskInputString();
+            string password = new System.Net.NetworkCredential(string.Empty, pass).Password;
+
+            var inlog = loginscherm.mailwachtvragen(username.ToLower(), password);
+            try { if (inlog == false) { inlog = login(); } }
+            catch { }
+            return inlog;
+        }
+        public static SecureString maskInputString()
+        {
+            SecureString pass = new SecureString();
+            ConsoleKeyInfo keyInfo;
+            do
+            {
+                keyInfo = Console.ReadKey(true);
+                if (!char.IsControl(keyInfo.KeyChar))
+                {
+                    pass.AppendChar(keyInfo.KeyChar);
+                    Console.Write("*");
+                }
+                else if (keyInfo.Key == ConsoleKey.Backspace && pass.Length > 0)
+                {
+                    pass.RemoveAt(pass.Length - 1);
+                    Console.Write("\b \b");
+                }
+            }
+            while (keyInfo.Key != ConsoleKey.Enter);
+            {
+                return pass;
+            }
+        }
+        public static void check()
+        {
+            Console.Clear();
+            Console.ForegroundColor = ConsoleColor.Red;
+            Console.WriteLine("E-mail of wachtwoord onjuist!");
+            Console.ForegroundColor = ConsoleColor.Gray;
+        }
+    }
+}
\ No newline at end of file

commit 7717ed63e0bebc913b048a26522da9b8efcbcc37
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 11 16:34:52 2021 +0200

    ff 5000 regels gecodeert /s
---
 CPeople.cs      |   50 +-
 Json/Zalen.json | 5251 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 Program.cs      |    2 +-
 Zalen.cs        |  223 ++-
 adminMenu.cs    |   18 +-
 5 files changed, 5493 insertions(+), 51 deletions(-)

diff --git a/CPeople.cs b/CPeople.cs
index 5ec229b..10a3526 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -326,15 +326,37 @@ namespace Bi_Os_Coop
                 Console.Clear();
                 Zaal zaal = new Zaal();
                 Console.WriteLine();
-                Console.WriteLine("Hoeveel stoelen heeft de zaal in totaal?");
-                int totalChairs = Convert.ToInt32(Console.ReadLine());
-                Console.WriteLine("Hoeveel stoelen wilt u per rij? (0-100)");
-                int chairWidth = Convert.ToInt32(Console.ReadLine());
+                int totalChairs;
+                while (true)
+                {
+                    Console.WriteLine("Hoeveel stoelen heeft de zaal in totaal? Options \t(M)egaChonker = 500, \t(H)eftyChonk = 300 \t(C)honk = 150\tOr Q to quit");
+                    ConsoleKey chonkChart = Console.ReadKey(true).Key;
+                    if (chonkChart == ConsoleKey.M)
+                    {
+                        totalChairs = (int)Zaal.Size.MegaChonker;
+                        break;
+                    }
+                    else if (chonkChart == ConsoleKey.H)
+                    {
+                        totalChairs = (int)Zaal.Size.heftyChonk;
+                        break;
+                    }
+                    else if( chonkChart == ConsoleKey.C)
+                    {
+                        totalChairs = (int)Zaal.Size.chonk;
+                        break;
+                    }
+                    else if (chonkChart == ConsoleKey.Q)
+                    {
+                        goto exit; // EXIT uit de Addmovies
+                    }
+                }
+
                 MovieInterpreter film = new MovieInterpreter();
                 while (true)
                 {
                     Console.WriteLine("Welke film wilt u dat er op dit tijdstip draait?");
-                    
+
                     string moviename = Console.ReadLine();
                     var movie = MovieMethods.DoesMovieExist(moviename);
                     if (movie.Item1)
@@ -344,27 +366,31 @@ namespace Bi_Os_Coop
                     }
                     else
                     {
-                        Console.WriteLine("looks like the movie does not exist do you want to add it or Search? A/S");
+                        Console.WriteLine("looks like the movie does not exist do you want to add it or Search or Quit? A/S/Q");
                         ConsoleKey k = Console.ReadKey(true).Key;
-                        if (k == ConsoleKey.A) { 
+                        if (k == ConsoleKey.A)
+                        {
                             film = AddMovies();
                             break;
                         }
-                        else if( k == ConsoleKey.S) { }
+                        else if (k == ConsoleKey.S) { }
+                        else if (k == ConsoleKey.Q) { goto exit; } // EXIT uit de Addmovies
                     }
                 }
-                
+
                 Console.WriteLine("Op welke datum wilt u dat deze film draait? (dd/mm/yyyy)");
                 string date = Console.ReadLine();
                 Console.WriteLine("Op welk tijdstip wilt u dat deze film draait? (HH:MM)");
                 string time = Console.ReadLine();
 
-                zaal.setZaal(chairWidth, date, time, totalChairs, film); // someone has to fix this
+                zaal.setZaal(date, time, totalChairs, film); // someone has to fix this
                 Zalen zalen = new Zalen();
-                //zalen = zalen.FromJson(Json.ReadJson("Zalen"));
+                zalen = zalen.FromJson(Json.ReadJson("Zalen"));
                 zalen.AddZaal(zaal);
-                
+
                 Json.WriteJson("Zalen",zalen.ToJson());
+            exit:
+                return;
             }
 
             public void UpdateCinemaHall()
diff --git a/Json/Zalen.json b/Json/Zalen.json
index 1bfd3c7..bba241f 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -1,9 +1,8 @@
 {
   "zalenList": [
     {
-      "stoelWidth": 10,
-      "date": "12/05/2021",
-      "time": "10:00",
+      "date": "02/06/2021",
+      "time": "05:02",
       "film": {
         "movieid": 1,
         "name": "JsonBjorn",
@@ -17,10 +16,5009 @@
         "acteurs": [
           "Ryan Reynold"
         ],
-        "trailer": null,
+        "taal": null,
         "beschrijving": null
       },
       "stoelen": [
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        }
+      ]
+    },
+    {
+      "date": "03/06/2021",
+      "time": "23:59",
+      "film": {
+        "movieid": 1,
+        "name": "JsonBjorn",
+        "releasedate": "14/04/2021",
+        "genres": [
+          "Actie",
+          " Thriller"
+        ],
+        "leeftijd": 13,
+        "beoordeling": 8,
+        "acteurs": [
+          "Ryan Reynold"
+        ],
+        "taal": null,
+        "beschrijving": null
+      },
+      "stoelen": [
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        }
+      ]
+    },
+    {
+      "date": "01/06/2021",
+      "time": "22:00",
+      "film": {
+        "movieid": 1,
+        "name": "JsonBjorn",
+        "releasedate": "14/04/2021",
+        "genres": [
+          "Actie",
+          " Thriller"
+        ],
+        "leeftijd": 13,
+        "beoordeling": 8,
+        "acteurs": [
+          "Ryan Reynold"
+        ],
+        "taal": null,
+        "beschrijving": null
+      },
+      "stoelen": [
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -41,6 +5039,16 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -91,6 +5099,11 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -116,6 +5129,16 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -161,6 +5184,26 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -196,6 +5239,36 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -226,6 +5299,36 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -256,6 +5359,36 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -286,6 +5419,36 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 20
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -321,6 +5484,26 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -366,6 +5549,16 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 15
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -391,6 +5584,11 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -441,6 +5639,21 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -481,6 +5694,26 @@
           "isOccupiedBy": 1,
           "Price": 10
         },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
         {
           "isOccupied": false,
           "isOccupiedBy": 1,
@@ -520,6 +5753,16 @@
           "isOccupied": false,
           "isOccupiedBy": 1,
           "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 0
         }
       ]
     }
diff --git a/Program.cs b/Program.cs
index b81811e..c1afdf6 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,5 +1,5 @@
 #define DEBUG
-#undef DEBUG
+//#undef DEBUG
 using System;
 using System.Collections.Generic;
 using System.Linq;
diff --git a/Zalen.cs b/Zalen.cs
index 46c7f64..aab3438 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -1,8 +1,6 @@
 ﻿using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using System.Text.Json;
 
 namespace Bi_Os_Coop
@@ -11,7 +9,6 @@ namespace Bi_Os_Coop
     {
         public void Test()
         {
-            
             Zalen testzaal = new Zalen();
             Zaal tijdelijkeZaal = new Zaal();
             //tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100);
@@ -31,7 +28,7 @@ namespace Bi_Os_Coop
             //int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
             int gfdjhfskd = 30;
             testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
-            foreach(Zaal zaal in testzaal2.zalenList)
+            foreach (Zaal zaal in testzaal2.zalenList)
             {
                 zaal.showStool();
             }
@@ -43,17 +40,18 @@ namespace Bi_Os_Coop
             {
                 zaal.showStool();
             }
-
         }
     }
-    class Zalen
+
+    internal class Zalen
     {
         public List<Zaal> zalenList { get; set; }
+
         public void AddZaal(Zaal zaal)
         {
             if (zalenList == null)
             {
-                List<Zaal> newZaal = new List<Zaal>{zaal};
+                List<Zaal> newZaal = new List<Zaal> { zaal };
                 zalenList = newZaal;
             }
             else
@@ -61,6 +59,7 @@ namespace Bi_Os_Coop
                 zalenList.Add(zaal);
             }
         }
+
         public void writeZalen()
         {
             foreach (Zaal zaal in this.zalenList)
@@ -95,29 +94,79 @@ namespace Bi_Os_Coop
             indexs[0] = index;
             gekozenzaal.occupyStool(indexs, orderer);
         }
-
     }
-    class Zaal
+
+    internal class Zaal
     {
-        public int stoelWidth { get; set; }
+        public enum Size : int // https://imgur.com/gallery/FmTnf7e Size chart
+        {
+            MegaChonker = 500,
+            heftyChonk = 300,
+            chonk = 150
+        }
+
+        private int stoelWidth { get; set; }
         public string date { get; set; }
         public string time { get; set; }
         public MovieInterpreter film { get; set; } //Film film {get; set;}
         public List<Stoel> stoelen { get; set; }
-        public void setZaal(int stoelwidth, string date, string time, int totalStools, MovieInterpreter film = null)
+
+        public void setZaal(string date, string time, int totalStools, MovieInterpreter film = null)
         {
-            this.stoelWidth = stoelwidth;
             this.date = date;
             this.time = time;
             this.film = film;
             List<Stoel> nstoelen = new List<Stoel>();
+            /*
             for (int i = 0; i < totalStools; i++)
             {
                 Stoel stoel = new Stoel();
                 nstoelen.Add(stoel);
                 stoelen = nstoelen;
+            }*/
+            if (totalStools == (int)Size.MegaChonker)
+            {
+                totalStools = totalStools +130;
+                this.stoelWidth = 30;
+                for (int i = 0; i < totalStools; i++)
+                {
+                    Stoel stoel = new Stoel();
+                    stoel.setStoolDefault(stoel.stoolworth(i, totalStools));
+                    nstoelen.Add(stoel);
+                }
+                stoelen = nstoelen;
             }
+            else if (totalStools == (int)Size.heftyChonk)
+            {
+                totalStools = totalStools + 42;
+                this.stoelWidth = 18;
+                for (int i = 0; i < totalStools; i++)
+                {
+                    Stoel stoel = new Stoel();
+                    stoel.setStoolDefault(stoel.stoolworth(i, totalStools));
+                    nstoelen.Add(stoel);
+                }
+                stoelen = nstoelen;
+            }
+            else if (totalStools == (int)Size.chonk)
+            {
+                totalStools = totalStools + 18;
+                this.stoelWidth = 12;
+                for (int i = 0; i < totalStools; i++)
+                {
+                    Stoel stoel = new Stoel();
+                    stoel.setStoolDefault(stoel.stoolworth(i, totalStools));
+                    nstoelen.Add(stoel);
+                }
+                stoelen = nstoelen;
+            }
+            //showStool();
+        }
+
+        public void applyzaal()
+        {
         }
+
         /// <summary>
         /// Occupies a stool
         /// </summary>
@@ -139,14 +188,13 @@ namespace Bi_Os_Coop
             {
                 foreach (int index in indexs)
                 {
-
                     if (stoelen.ElementAt(index).isOccupied)
                     {
-                        Console.WriteLine($"{index-1} stool is already ");
+                        Console.WriteLine($"{index - 1} stool is already ");
                         return -1;
                     }
-                    stoelen.ElementAt(index-1).isOccupied = true;
-                    stoelen.ElementAt(index-1).isOccupiedBy = orderer.id;
+                    stoelen.ElementAt(index - 1).isOccupied = true;
+                    stoelen.ElementAt(index - 1).isOccupiedBy = orderer.id;
                 }
                 return 1;
             }
@@ -167,7 +215,6 @@ namespace Bi_Os_Coop
             Console.ForegroundColor = ConsoleColor.White;
             foreach (Stoel stoel in this.stoelen)
             {
-
                 if (counter % stoelWidth == 0)
                 {
                     if (counter < 10) { }
@@ -180,11 +227,26 @@ namespace Bi_Os_Coop
                 }
                 else
                 {
-                    Console.BackgroundColor = ConsoleColor.Green;
+                    if (stoel.Price == Stoel.price.NONE)
+                    {
+                        Console.BackgroundColor = ConsoleColor.White;
+                    }
+                    else if (stoel.Price == Stoel.price.LOW)
+                    {
+                        Console.BackgroundColor = ConsoleColor.Blue;
+                    }
+                    else if (stoel.Price == Stoel.price.MEDIUM)
+                    {
+                        Console.BackgroundColor = ConsoleColor.Yellow;
+                    }
+                    else if (stoel.Price == Stoel.price.HIGH)
+                    {
+                        Console.BackgroundColor = ConsoleColor.DarkYellow;
+                    }
                 }
                 if (counter <= 8)
                 {
-                    Console.Write($"00{counter+1}");
+                    Console.Write($"00{counter + 1}");
                 }
                 else if (counter <= 98)
                 {
@@ -201,16 +263,125 @@ namespace Bi_Os_Coop
         }
     }
 
-    class Stoel
+    internal class Stoel
     {
+        public enum price : int
+        {
+            HIGH = 20,
+            MEDIUM = 15,
+            LOW = 10,
+            NONE = 0
+        }
         public bool isOccupied { get; set; } = false;
-        public int isOccupiedBy { get; set; } = 1;//dan kan je het ID van de persoon uit lezen
-        public Double Price { get; set; } = 10.0;
-        public void setStoolDefault()
+        public int isOccupiedBy { get; set; } = 1; //dan kan je het ID van de persoon uit lezen
+        public price Price { get; set; }
+
+        public void setStoolDefault(price prijs = price.LOW)
         {
+            if (prijs == price.NONE)
+            {
+                this.isOccupied = true;
+            }
+            else
+            {
+                this.isOccupiedBy = 1;
+            }
             this.isOccupied = false;
-            this.isOccupiedBy = 1;
-            this.Price = 10.0;
+            this.Price = prijs;
+        }
+
+        public price stoolworth(int index, int size)
+        {
+            int[] stoelen500 = new int[] {
+              //1 2 3 4 5 6 7 8 9 10 11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
+                0,0,0,0,1,1,1,1,1,1 ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0  ,0, //20
+                0,0,0,1,1,1,1,1,1,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //19
+                0,0,0,1,1,1,1,1,2,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //18
+                0,0,0,1,1,1,1,1,2,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //17
+                0,0,0,1,1,1,1,2,2,2 ,2  ,2  ,2  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //16
+                0,0,1,1,1,1,1,2,2,2 ,2  ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0  ,0, //15
+                0,1,1,1,1,1,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,0, //14
+                1,1,1,1,1,1,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1, //13
+                1,1,1,1,1,2,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1, //12
+                1,1,1,1,1,2,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1, //11
+                1,1,1,1,1,1,2,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1, //10
+                1,1,1,1,1,1,1,2,2,2 ,2  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1, //9
+                0,1,1,1,1,1,1,1,2,2 ,2  ,2  ,2  ,3  ,3  ,3  ,3  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0, //8
+                0,0,1,1,1,1,1,1,2,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0, //7
+                0,0,1,1,1,1,1,1,1,2 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0, //6
+                0,0,0,1,1,1,1,1,1,1 ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //5
+                0,0,0,1,1,1,1,1,1,1 ,1  ,1  ,2  ,2  ,2  ,2  ,2  ,2  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,0  ,0  ,0, //4
+                0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
+                0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,
+                0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
+                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+            };
+            int[] stoelen300 = new int[] {
+                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
+                0,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,0,
+                0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,
+                0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,
+                0,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,0,
+                0,1,1,1,2,2,2,2,3,3,2,2,2,2,1,1,1,0,
+                1,1,1,2,2,2,2,3,3,3,3,2,2,2,2,1,1,1,
+                1,1,1,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,
+                1,1,2,2,2,2,3,3,3,3,3,3,2,2,2,2,1,1,
+                1,1,2,2,2,2,3,3,3,3,3,3,2,2,2,2,1,1,
+                1,1,2,2,2,2,3,3,3,3,3,3,2,2,2,2,1,1,
+                0,1,1,2,2,2,2,3,3,3,3,2,2,2,2,1,1,0,
+                0,1,1,1,2,2,2,2,3,3,2,2,2,2,1,1,1,0,
+                0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,
+                0,0,1,1,1,1,2,2,2,2,2,2,1,1,1,1,0,0,
+                0,0,1,1,1,1,2,2,2,2,2,2,1,1,1,1,0,0,
+                0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
+                0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
+                0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0
+
+            };
+            int[] stoelen150 = new int[]
+            {
+                0,0,1,1,1,1,1,1,1,1,0,0,
+                0,1,1,1,1,1,1,1,1,1,1,0,
+                0,1,1,1,1,1,1,1,1,1,1,0,
+                1,1,1,1,1,2,2,1,1,1,1,1,
+                1,1,1,1,2,2,2,2,1,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,2,2,3,3,2,2,1,1,1,
+                1,1,1,1,2,2,2,2,1,1,1,1,
+                1,1,1,1,1,2,2,1,1,1,1,1,
+                0,1,1,1,1,1,1,1,1,1,1,0,
+                0,0,1,1,1,1,1,1,1,1,0,0,
+                0,0,1,1,1,1,1,1,1,1,0,0
+
+            };
+            int returner;
+            if (size == 630)
+            {
+                returner = stoelen500[index];
+                //Console.WriteLine(stoelen500.Length);
+            }
+            else if (size == 342)
+            {
+                returner = stoelen300[index];
+                //Console.WriteLine(stoelen300.Length);
+            }
+            else if (size == 168)
+            {
+                returner = stoelen150[index];
+                //Console.WriteLine(stoelen150.Length);
+            }
+            else
+            {
+                throw new IdiotException();
+            }
+            if (returner == 0) { return price.NONE; }
+            else if (returner == 1) { return price.LOW; }
+            else if (returner == 2) { return price.MEDIUM; }
+            else if (returner == 3) { return price.HIGH; }
+            //Console.ReadKey();
+            return price.LOW; // incase of idiot exception ;-;
         }
     }
-}
+}
\ No newline at end of file
diff --git a/adminMenu.cs b/adminMenu.cs
index 1a0c1a1..7f83d11 100644
--- a/adminMenu.cs
+++ b/adminMenu.cs
@@ -24,7 +24,7 @@ namespace Bi_Os_Coop
             //System.IO.File.WriteAllText(path, tekstUitJson);
 
             //while loop die hoofdPagina loopt tot je "0" in tikt
-            bool inDitMenu = true;            
+            bool inDitMenu = true;
             bool isCoronaFilter = coronaCheck();
             Console.WriteLine(isCoronaFilter);
             while (inDitMenu)
@@ -57,7 +57,7 @@ namespace Bi_Os_Coop
                 {
                     inDitMenu = false;
                     Console.Clear();
-                    // koppelen met boeken; if (!geboekt) > delete movie 
+                    // koppelen met boeken; if (!geboekt) > delete movie
                     admin.DeleteMovies();
                 }
                 else if (keuze == ConsoleKey.D5)
@@ -125,7 +125,7 @@ namespace Bi_Os_Coop
             }
             return false;
         }
-        
+
         public static void CoronaFilter(bool isCoronaFilter)
         {
             Zalen zalen = new Zalen();
@@ -144,7 +144,7 @@ namespace Bi_Os_Coop
                             count += 1;
                         }
                     }
-                    Tuple<bool, int, double, int>[] occupiedStoelen = new Tuple<bool, int, double, int>[count];
+                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
                     int tempIndex = 0;
                     foreach (Stoel stoel2 in stoel)
                     {
@@ -153,14 +153,15 @@ namespace Bi_Os_Coop
                             occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
                         }
                     }
-                    zaal.setZaal(10, zaal.date, zaal.time, 100, zaal.film);
+#warning "ik heb dit aangepast want de chairwidt is niet meer nodig"
+                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
                     for (int j = 0, i = 0; j < 100; j++)
                     {
                         if (j % 3 == 0)
                         {
                             zaal.stoelen[j].isOccupied = false;
                             zaal.stoelen[j].isOccupiedBy = 1;
-                            zaal.stoelen[j].Price = 10;
+                            zaal.stoelen[j].Price = Stoel.price.LOW;
                         }
                         else
                         {
@@ -193,7 +194,7 @@ namespace Bi_Os_Coop
                             count += 1;
                         }
                     }
-                    Tuple<bool, int, double, int>[] occupiedStoelen = new Tuple<bool, int, double, int>[count];
+                    Tuple<bool, int, Stoel.price, int>[] occupiedStoelen = new Tuple<bool, int, Stoel.price, int>[count];
                     int tempIndex = 0;
                     foreach (Stoel stoel2 in stoel)
                     {
@@ -202,7 +203,8 @@ namespace Bi_Os_Coop
                             occupiedStoelen[tempIndex++] = Tuple.Create(stoel2.isOccupied, stoel2.isOccupiedBy, stoel2.Price, stoel.FindIndex(a => a == stoel2));
                         }
                     }
-                    zaal.setZaal(10, zaal.date, zaal.time, 100, zaal.film);
+#warning "ik heb dit aangepast want de chairwidt is niet meer nodig"
+                    zaal.setZaal(zaal.date, zaal.time, 100, zaal.film);
                     for (int j = 0, i = 0; j < 100; j++)
                     {
                         int index = zaal.stoelen.FindIndex(st => st == zaal.stoelen[j]);

commit 1cf1c22f7c4270aec916daede018f157d13957b4
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 11 12:07:46 2021 +0200

    fixed some shit for victor
---
 Json/Films.json | 2 +-
 MovieMethods.cs | 4 ++--
 Program.cs      | 3 +--
 3 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/Json/Films.json b/Json/Films.json
index e437852..5b6f6f7 100644
--- a/Json/Films.json
+++ b/Json/Films.json
@@ -1 +1 @@
-{"movieList":[{"movieid":1,"name":"JsonBjorn","releasedate":"14/04/2021","genres":["Actie"," Thriller"],"leeftijd":13,"beoordeling":8,"acteurs":["Ryan Reynold"],"trailer":null,"beschrijving":null},{"movieid":2,"name":"Henk en de zeven henkjes","releasedate":"18/05/2020","genres":["Horror"," Komedie"],"leeftijd":12,"beoordeling":9,"acteurs":["Henk"," Herman"],"trailer":null,"beschrijving":null},{"movieid":3,"name":"Wat als het niet zo was?","releasedate":"17/03/2020","genres":["Romantiek","Komedie"],"leeftijd":16,"beoordeling":7,"acteurs":["Margriet","Hermelien"],"trailer":null,"beschrijving":null},{"movieid":4,"name":"Henk en grietje","releasedate":"16/03/1999","genres":["Kinderfilm","Spanning"],"leeftijd":6,"beoordeling":5,"acteurs":["Henk","Grietje"],"trailer":null,"beschrijving":null},{"movieid":5,"name":"Boku no pico","releasedate":"11/03/2017","genres":["Pornografie","Komedie"],"leeftijd":16,"beoordeling":8,"acteurs":["Subara Yokishima","Hermaneru Japenseru"],"trailer":null,"beschrijving":null},{"movieid":6,"name":"The henk of the rings","releasedate":"12/12/2003","genres":["Actie","Fantasie"],"leeftijd":16,"beoordeling":9,"acteurs":["Henkbo Baggins","Sauron"],"trailer":null,"beschrijving":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel pulvinar sapien. Ut bibendum tortor sed eros condimentum, nec facilisis ante ullamcorper. Aliquam molestie egestas tincidunt. Praesent tempor mi et dolor ultrices, id scelerisque risus feugiat. Etiam ornare odio blandit eros dictum convallis. Vivamus ut massa nunc. Suspendisse at iaculis ipsum, sit amet consectetur leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean et lobortis arcu, nec vehicula ipsum. Quisque auctor porttitor diam, id varius dolor venenatis eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."},{"movieid":7,"name":"The good, the bad and the henk","releasedate":"14/08/1966","genres":["Chickflic","Komedie"],"leeftijd":16,"beoordeling":4,"acteurs":["Henk"," Herman"],"trailer":null,"beschrijving":null},{"movieid":8,"name":"Henk fiction","releasedate":"03/01/1994","genres":["Actie","Avontuur"],"leeftijd":12,"beoordeling":7,"acteurs":["Hajar","Hugo"],"trailer":null,"beschrijving":null},{"movieid":9,"name":"12 angry henks","releasedate":"14/04/1957","genres":["Actie","Thriller"],"leeftijd":16,"beoordeling":7,"acteurs":["Michael Bay"],"trailer":null,"beschrijving":null},{"movieid":10,"name":"The dark henk","releasedate":"11/07/2008","genres":["Actie","Sci-fi"],"leeftijd":12,"beoordeling":8,"acteurs":["Rick","Bjorn"],"trailer":null,"beschrijving":null},{"movieid":11,"name":"The henkfather","releasedate":"14/06/1975","genres":["Actie","Mafia"],"leeftijd":16,"beoordeling":3,"acteurs":["Victor","Felix"],"trailer":null,"beschrijving":null},{"movieid":12,"name":"Tutte le strade portano a Roma","releasedate":"09/04/1994","genres":["Drama"," Komedie"],"leeftijd":6,"beoordeling":9,"acteurs":["Diana","Allesandro"],"trailer":null,"beschrijving":null},{"movieid":13,"name":"nullmov","releasedate":null,"genres":null,"leeftijd":6,"beoordeling":5,"acteurs":null,"trailer":null,"beschrijving":null},{"movieid":13,"name":"50 shades of henk","releasedate":"11/06/2021","genres":["Sexy"," BDSM"," amateur"],"leeftijd":18,"beoordeling":11,"acteurs":["henk"," gerda"],"trailer":null,"beschrijving":null}]}
\ No newline at end of file
+{"movieList":[{"movieid":1,"name":"JsonBjorn","releasedate":"14/04/2021","genres":["Actie"," Thriller"],"leeftijd":13,"beoordeling":8,"acteurs":["Ryan Reynold"],"trailer":null,"beschrijving":null},{"movieid":2,"name":"Henk en de zeven henkjes","releasedate":"18/05/2020","genres":["Horror"," Komedie"],"leeftijd":12,"beoordeling":9,"acteurs":["Henk"," Herman"],"trailer":null,"beschrijving":null},{"movieid":3,"name":"Wat als het niet zo was?","releasedate":"17/03/2020","genres":["Romantiek","Komedie"],"leeftijd":16,"beoordeling":7,"acteurs":["Margriet","Hermelien"],"trailer":null,"beschrijving":null},{"movieid":4,"name":"Henk en grietje","releasedate":"16/03/1999","genres":["Kinderfilm","Spanning"],"leeftijd":6,"beoordeling":5,"acteurs":["Henk","Grietje"],"trailer":null,"beschrijving":null},{"movieid":5,"name":"Boku no pico","releasedate":"11/03/2017","genres":["Pornografie","Komedie"],"leeftijd":16,"beoordeling":8,"acteurs":["Subara Yokishima","Hermaneru Japenseru"],"trailer":null,"beschrijving":null},{"movieid":6,"name":"The henk of the rings","releasedate":"12/12/2003","genres":["Actie","Fantasie"],"leeftijd":16,"beoordeling":9,"acteurs":["Henkbo Baggins","Sauron"],"trailer":null,"beschrijving":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel pulvinar sapien. Ut bibendum tortor sed eros condimentum, nec facilisis ante ullamcorper. Aliquam molestie egestas tincidunt. Praesent tempor mi et dolor ultrices, id scelerisque risus feugiat. Etiam ornare odio blandit eros dictum convallis. Vivamus ut massa nunc. Suspendisse at iaculis ipsum, sit amet consectetur leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean et lobortis arcu, nec vehicula ipsum. Quisque auctor porttitor diam, id varius dolor venenatis eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."},{"movieid":7,"name":"The good, the bad and the henk","releasedate":"14/08/1966","genres":["Chickflic","Komedie"],"leeftijd":16,"beoordeling":4,"acteurs":["Henk"," Herman"],"trailer":null,"beschrijving":null},{"movieid":8,"name":"Henk fiction","releasedate":"03/01/1994","genres":["Actie","Avontuur"],"leeftijd":12,"beoordeling":7,"acteurs":["Hajar","Hugo"],"trailer":null,"beschrijving":null},{"movieid":9,"name":"12 angry henks","releasedate":"14/04/1957","genres":["Actie","Thriller"],"leeftijd":16,"beoordeling":7,"acteurs":["Michael Bay"],"trailer":null,"beschrijving":null},{"movieid":10,"name":"The dark henk","releasedate":"11/07/2008","genres":["Actie","Sci-fi"],"leeftijd":12,"beoordeling":8,"acteurs":["Rick","Bjorn"],"trailer":null,"beschrijving":null},{"movieid":11,"name":"The henkfather","releasedate":"14/06/1975","genres":["Actie","Mafia"],"leeftijd":16,"beoordeling":3,"acteurs":["Victor","Felix"],"trailer":null,"beschrijving":null},{"movieid":12,"name":"Tutte le strade portano a Roma","releasedate":"09/04/1994","genres":["Drama"," Komedie"],"leeftijd":6,"beoordeling":9,"acteurs":["Diana","Allesandro"],"trailer":null,"beschrijving":null},{"movieid":13,"name":"50 shades of henk","releasedate":"11/06/2021","genres":["Sexy"," BDSM"," amateur"],"leeftijd":18,"beoordeling":11,"acteurs":["henk"," gerda"],"trailer":null,"beschrijving":null}]}
\ No newline at end of file
diff --git a/MovieMethods.cs b/MovieMethods.cs
index ac6967c..8fa27de 100644
--- a/MovieMethods.cs
+++ b/MovieMethods.cs
@@ -85,13 +85,13 @@ namespace Bi_Os_Coop
                     tempMovie = jsonFilms.movieList.Single(movie => movie.name.ToLower() == movname.ToLower());
                     return Tuple.Create(true, tempMovie);
                 }
-                catch (NullReferenceException ex)
+                catch (NullReferenceException)
                 {
                     return Tuple.Create(false, noMovie);
                 }
                 
             }
-            catch (Exception ex)
+            catch (Exception)
             {                
                 return Tuple.Create(false, noMovie);
             }
diff --git a/Program.cs b/Program.cs
index 0007c9d..b81811e 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,5 +1,5 @@
 #define DEBUG
-//#undef DEBUG
+#undef DEBUG
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -13,7 +13,6 @@ namespace Bi_Os_Coop
     {
         static void Main(string[] args)
         {
-
 #if (DEBUG)
             CPeople.Admin tempadm = new CPeople.Admin();
             tempadm.AddCinemaHall();

commit 05ca2cc76590d1cbf688cdfba07deac73b2755a8
Merge: d269cfa a84655d
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 11 12:02:07 2021 +0200

    pls ;-;

commit d269cfac1dadad7901f1ff3b409e181176d72eb2
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue May 11 12:00:56 2021 +0200

    get fking naenaed
---
 CPeople.cs      |  39 +++++++++++++--
 Json.cs         |   1 +
 Json/Films.json | 146 +-------------------------------------------------------
 Json/Zalen.json |  43 +++++++++++------
 MovieMethods.cs |  29 +++++++++++
 Program.cs      |   5 +-
 Zalen.cs        |   8 ++--
 7 files changed, 101 insertions(+), 170 deletions(-)

diff --git a/CPeople.cs b/CPeople.cs
index 0e227a2..ee3c00f 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -207,7 +207,7 @@ namespace Bi_Os_Coop
 
         public class Admin : Person
         {
-            public void AddMovies()
+            public MovieInterpreter AddMovies()
             {
                 Console.Clear();
 
@@ -237,11 +237,13 @@ namespace Bi_Os_Coop
 
                 //MovieLibrary = new Films();
                 MovieLibrary.addFilm(Movie);
-                json = JsonSerializer.Serialize(MovieLibrary);
+                JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+                json = JsonSerializer.Serialize(MovieLibrary, opt);
 
                 //jsonFilms.addMovieByFunction(1, naamFilm, releasedatumFilm, genresFilm, minimumLeeftijd, beoordelingFilm, acteursFilm);
                 //json = JsonSerializer.Serialize(jsonFilms);
                 Json.WriteJson("Films", json);
+                return Movie;
             }
 
             public void UpdateMovies()
@@ -324,14 +326,41 @@ namespace Bi_Os_Coop
                 int totalChairs = Convert.ToInt32(Console.ReadLine());
                 Console.WriteLine("Hoeveel stoelen wilt u per rij? (0-100)");
                 int chairWidth = Convert.ToInt32(Console.ReadLine());
-                Console.WriteLine("Welke film wilt u dat er op dit tijdstip draait?");
-                string film = Console.ReadLine();
+                MovieInterpreter film = new MovieInterpreter();
+                while (true)
+                {
+                    Console.WriteLine("Welke film wilt u dat er op dit tijdstip draait?");
+                    
+                    string moviename = Console.ReadLine();
+                    var movie = MovieMethods.DoesMovieExist(moviename);
+                    if (movie.Item1)
+                    {
+                        film = movie.Item2;
+                        break;
+                    }
+                    else
+                    {
+                        Console.WriteLine("looks like the movie does not exist do you want to add it or Search? A/S");
+                        ConsoleKey k = Console.ReadKey(true).Key;
+                        if (k == ConsoleKey.A) { 
+                            film = AddMovies();
+                            break;
+                        }
+                        else if( k == ConsoleKey.S) { }
+                    }
+                }
+                
                 Console.WriteLine("Op welke datum wilt u dat deze film draait? (dd/mm/yyyy)");
                 string date = Console.ReadLine();
                 Console.WriteLine("Op welk tijdstip wilt u dat deze film draait? (HH:MM)");
                 string time = Console.ReadLine();
 
-                zaal.setZaal(chairWidth, date, time, totalChairs, film);
+                zaal.setZaal(chairWidth, date, time, totalChairs, film); // someone has to fix this
+                Zalen zalen = new Zalen();
+                //zalen = zalen.FromJson(Json.ReadJson("Zalen"));
+                zalen.AddZaal(zaal);
+                
+                Json.WriteJson("Zalen",zalen.ToJson());
             }
 
             public void UpdateCinemaHall()
diff --git a/Json.cs b/Json.cs
index 9a4f468..4d9bd71 100644
--- a/Json.cs
+++ b/Json.cs
@@ -50,6 +50,7 @@ namespace Bi_Os_Coop
         public static void WriteJson(string filename, string content)
         {
             File.WriteAllText($"../../Json/{filename}.json", content);
+
         }
     }
     [Serializable]
diff --git a/Json/Films.json b/Json/Films.json
index e994489..e437852 100644
--- a/Json/Films.json
+++ b/Json/Films.json
@@ -1,145 +1 @@
-{
-  "movieList": [
-    {
-      "movieid": 0,
-      "name": null,
-      "releasedate": null,
-      "genres": null,
-      "leeftijd": 0,
-      "beoordeling": 0,
-      "acteurs": null,
-      "trailer": null
-    },
-    {
-      "movieid": 1,
-      "name": "JsonBjorn",
-      "releasedate": "14/04/2021",
-      "genres": [ "Actie", " Thriller" ],
-      "leeftijd": 13,
-      "beoordeling": 8,
-      "acteurs": [ "Ryan Reynold" ],
-      "trailer": null
-    },
-    {
-      "movieid": 2,
-      "name": "Henk en de zeven henkjes",
-      "releasedate": "18/05/2020",
-      "genres": [ "Horror", " Komedie" ],
-      "leeftijd": 12,
-      "beoordeling": 9,
-      "acteurs": [ "Henk", " Herman" ],
-      "trailer": null
-    },
-    {
-      "movieid": 3,
-      "name": "Wat als het niet zo was?",
-      "releasedate": "17/03/2020",
-      "genres": [ "Romantiek", "Komedie" ],
-      "leeftijd": 16,
-      "beoordeling": 7,
-      "acteurs": [ "Margriet", "Hermelien" ],
-      "trailer": null
-    },
-    {
-      "movieid": 4,
-      "name": "Henk en grietje",
-      "releasedate": "16/03/1999",
-      "genres": [ "Kinderfilm", "Spanning" ],
-      "leeftijd": 6,
-      "beoordeling": 5,
-      "acteurs": [ "Henk", "Grietje" ],
-      "trailer": null
-    },
-    {
-      "movieid": 5,
-      "name": "Boku no pico",
-      "releasedate": "11/03/2017",
-      "genres": [ "Pornografie", "Komedie" ],
-      "leeftijd": 16,
-      "beoordeling": 8,
-      "acteurs": [ "Subara Yokishima", "Hermaneru Japenseru" ],
-      "trailer": null
-    },
-    {
-      "movieid": 6,
-      "name": "The henk of the rings",
-      "releasedate": "12/12/2003",
-      "genres": [ "Actie", "Fantasie" ],
-      "leeftijd": 16,
-      "beoordeling": 9,
-      "acteurs": [ "Henkbo Baggins", "Sauron" ],
-      "trailer": null,
-      "beschrijving": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel pulvinar sapien. Ut bibendum tortor sed eros condimentum, nec facilisis ante ullamcorper. Aliquam molestie egestas tincidunt. Praesent tempor mi et dolor ultrices, id scelerisque risus feugiat. Etiam ornare odio blandit eros dictum convallis. Vivamus ut massa nunc. Suspendisse at iaculis ipsum, sit amet consectetur leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean et lobortis arcu, nec vehicula ipsum. Quisque auctor porttitor diam, id varius dolor venenatis eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."
-    },
-    {
-      "movieid": 7,
-      "name": "The good, the bad and the henk",
-      "releasedate": "14/08/1966",
-      "genres": [ "Chickflic", "Komedie" ],
-      "leeftijd": 16,
-      "beoordeling": 4,
-      "acteurs": [ "Henk", " Herman" ],
-      "trailer": null
-    },
-    {
-      "movieid": 8,
-      "name": "Henk fiction",
-      "releasedate": "03/01/1994",
-      "genres": [ "Actie", "Avontuur" ],
-      "leeftijd": 12,
-      "beoordeling": 7,
-      "acteurs": [ "Hajar", "Hugo" ],
-      "trailer": null
-    },
-    {
-      "movieid": 9,
-      "name": "12 angry henks",
-      "releasedate": "14/04/1957",
-      "genres": [ "Actie", "Thriller" ],
-      "leeftijd": 16,
-      "beoordeling": 7,
-      "acteurs": [ "Michael Bay" ],
-      "trailer": null
-    },
-    {
-      "movieid": 10,
-      "name": "The dark henk",
-      "releasedate": "11/07/2008",
-      "genres": [ "Actie", "Sci-fi" ],
-      "leeftijd": 12,
-      "beoordeling": 8,
-      "acteurs": [ "Rick", "Bjorn" ],
-      "trailer": null
-    },
-    {
-      "movieid": 11,
-      "name": "The henkfather",
-      "releasedate": "14/06/1975",
-      "genres": [ "Actie", "Mafia" ],
-      "leeftijd": 16,
-      "beoordeling": 3,
-      "acteurs": [ "Victor", "Felix" ],
-      "trailer": null
-    },
-    {
-      "movieid": 12,
-      "name": "Tutte le strade portano a Roma",
-      "releasedate": "09/04/1994",
-      "genres": [ "Drama", " Komedie" ],
-      "leeftijd": 6,
-      "beoordeling": 9,
-      "acteurs": [ "Diana", "Allesandro" ],
-      "trailer": null
-    },
-    {
-      "movieid": 13,
-      "name": "nullmov",
-      "releasedate": null,
-      "genres": null,
-      "leeftijd": 6,
-      "beoordeling": 5,
-      "acteurs": null,
-      "trailer": null
-    }
-  ]
-}
\ No newline at end of file
+{"movieList":[{"movieid":1,"name":"JsonBjorn","releasedate":"14/04/2021","genres":["Actie"," Thriller"],"leeftijd":13,"beoordeling":8,"acteurs":["Ryan Reynold"],"trailer":null,"beschrijving":null},{"movieid":2,"name":"Henk en de zeven henkjes","releasedate":"18/05/2020","genres":["Horror"," Komedie"],"leeftijd":12,"beoordeling":9,"acteurs":["Henk"," Herman"],"trailer":null,"beschrijving":null},{"movieid":3,"name":"Wat als het niet zo was?","releasedate":"17/03/2020","genres":["Romantiek","Komedie"],"leeftijd":16,"beoordeling":7,"acteurs":["Margriet","Hermelien"],"trailer":null,"beschrijving":null},{"movieid":4,"name":"Henk en grietje","releasedate":"16/03/1999","genres":["Kinderfilm","Spanning"],"leeftijd":6,"beoordeling":5,"acteurs":["Henk","Grietje"],"trailer":null,"beschrijving":null},{"movieid":5,"name":"Boku no pico","releasedate":"11/03/2017","genres":["Pornografie","Komedie"],"leeftijd":16,"beoordeling":8,"acteurs":["Subara Yokishima","Hermaneru Japenseru"],"trailer":null,"beschrijving":null},{"movieid":6,"name":"The henk of the rings","releasedate":"12/12/2003","genres":["Actie","Fantasie"],"leeftijd":16,"beoordeling":9,"acteurs":["Henkbo Baggins","Sauron"],"trailer":null,"beschrijving":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel pulvinar sapien. Ut bibendum tortor sed eros condimentum, nec facilisis ante ullamcorper. Aliquam molestie egestas tincidunt. Praesent tempor mi et dolor ultrices, id scelerisque risus feugiat. Etiam ornare odio blandit eros dictum convallis. Vivamus ut massa nunc. Suspendisse at iaculis ipsum, sit amet consectetur leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean et lobortis arcu, nec vehicula ipsum. Quisque auctor porttitor diam, id varius dolor venenatis eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."},{"movieid":7,"name":"The good, the bad and the henk","releasedate":"14/08/1966","genres":["Chickflic","Komedie"],"leeftijd":16,"beoordeling":4,"acteurs":["Henk"," Herman"],"trailer":null,"beschrijving":null},{"movieid":8,"name":"Henk fiction","releasedate":"03/01/1994","genres":["Actie","Avontuur"],"leeftijd":12,"beoordeling":7,"acteurs":["Hajar","Hugo"],"trailer":null,"beschrijving":null},{"movieid":9,"name":"12 angry henks","releasedate":"14/04/1957","genres":["Actie","Thriller"],"leeftijd":16,"beoordeling":7,"acteurs":["Michael Bay"],"trailer":null,"beschrijving":null},{"movieid":10,"name":"The dark henk","releasedate":"11/07/2008","genres":["Actie","Sci-fi"],"leeftijd":12,"beoordeling":8,"acteurs":["Rick","Bjorn"],"trailer":null,"beschrijving":null},{"movieid":11,"name":"The henkfather","releasedate":"14/06/1975","genres":["Actie","Mafia"],"leeftijd":16,"beoordeling":3,"acteurs":["Victor","Felix"],"trailer":null,"beschrijving":null},{"movieid":12,"name":"Tutte le strade portano a Roma","releasedate":"09/04/1994","genres":["Drama"," Komedie"],"leeftijd":6,"beoordeling":9,"acteurs":["Diana","Allesandro"],"trailer":null,"beschrijving":null},{"movieid":13,"name":"nullmov","releasedate":null,"genres":null,"leeftijd":6,"beoordeling":5,"acteurs":null,"trailer":null,"beschrijving":null},{"movieid":13,"name":"50 shades of henk","releasedate":"11/06/2021","genres":["Sexy"," BDSM"," amateur"],"leeftijd":18,"beoordeling":11,"acteurs":["henk"," gerda"],"trailer":null,"beschrijving":null}]}
\ No newline at end of file
diff --git a/Json/Zalen.json b/Json/Zalen.json
index 80a49f8..1bfd3c7 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -2,8 +2,24 @@
   "zalenList": [
     {
       "stoelWidth": 10,
-      "date": "30-01-2021",
-      "time": "13:00",
+      "date": "12/05/2021",
+      "time": "10:00",
+      "film": {
+        "movieid": 1,
+        "name": "JsonBjorn",
+        "releasedate": "14/04/2021",
+        "genres": [
+          "Actie",
+          " Thriller"
+        ],
+        "leeftijd": 13,
+        "beoordeling": 8,
+        "acteurs": [
+          "Ryan Reynold"
+        ],
+        "trailer": null,
+        "beschrijving": null
+      },
       "stoelen": [
         {
           "isOccupied": false,
@@ -51,8 +67,8 @@
           "Price": 10
         },
         {
-          "isOccupied": true,
-          "isOccupiedBy": 69,
+          "isOccupied": false,
+          "isOccupiedBy": 1,
           "Price": 10
         },
         {
@@ -156,23 +172,23 @@
           "Price": 10
         },
         {
-          "isOccupied": true,
-          "isOccupiedBy": 69,
+          "isOccupied": false,
+          "isOccupiedBy": 1,
           "Price": 10
         },
         {
-          "isOccupied": true,
-          "isOccupiedBy": 69,
+          "isOccupied": false,
+          "isOccupiedBy": 1,
           "Price": 10
         },
         {
-          "isOccupied": true,
-          "isOccupiedBy": 69,
+          "isOccupied": false,
+          "isOccupiedBy": 1,
           "Price": 10
         },
         {
-          "isOccupied": true,
-          "isOccupiedBy": 69,
+          "isOccupied": false,
+          "isOccupiedBy": 1,
           "Price": 10
         },
         {
@@ -505,8 +521,7 @@
           "isOccupiedBy": 1,
           "Price": 10
         }
-      ],
-      "film": "Miauwer"
+      ]
     }
   ]
 }
\ No newline at end of file
diff --git a/MovieMethods.cs b/MovieMethods.cs
index 86fae3c..3d6c319 100644
--- a/MovieMethods.cs
+++ b/MovieMethods.cs
@@ -59,6 +59,35 @@ namespace Bi_Os_Coop
                 }
             }
         }
+        /// <summary>
+        /// Checks if movie exists in json, if found returns the movie
+        /// </summary>
+        /// <param name="name"></param>
+        /// <returns></returns>
+        public static Tuple<bool, MovieInterpreter> DoesMovieExist(string movname)
+        {
+            MovieInterpreter noMovie = new MovieInterpreter();
+            try
+            {
+                string json = Json.ReadJson("Films");
+                Films jsonFilms = JsonSerializer.Deserialize<Films>(json);
+                try
+                {
+                    MovieInterpreter tempMovie = new MovieInterpreter();
+                    tempMovie = jsonFilms.movieList.Single(movie => movie.name.ToLower() == movname.ToLower());
+                    return Tuple.Create(true, tempMovie);
+                }
+                catch (NullReferenceException ex)
+                {
+                    return Tuple.Create(false, noMovie);
+                }
+                
+            }
+            catch (Exception ex)
+            {                
+                return Tuple.Create(false, noMovie);
+            }
+        }
 
         public static void UpdateNameMovie(string json, Films jsonFilms, MovieInterpreter tempMovie)
         {
diff --git a/Program.cs b/Program.cs
index 944d686..0007c9d 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,5 +1,5 @@
 #define DEBUG
-#undef DEBUG
+//#undef DEBUG
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -15,7 +15,8 @@ namespace Bi_Os_Coop
         {
 
 #if (DEBUG)
-
+            CPeople.Admin tempadm = new CPeople.Admin();
+            tempadm.AddCinemaHall();
             //Hier in de testen
             //ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
             //test.Test();
diff --git a/Zalen.cs b/Zalen.cs
index 9c19678..46c7f64 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -14,7 +14,7 @@ namespace Bi_Os_Coop
             
             Zalen testzaal = new Zalen();
             Zaal tijdelijkeZaal = new Zaal();
-            tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100, "Miauwer");
+            //tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100);
             tijdelijkeZaal.showStool();
             CPeople.Person Henk = new CPeople.Person();
             Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
@@ -67,7 +67,7 @@ namespace Bi_Os_Coop
             {
                 Console.Write($"\ndate:{zaal.date} \t");
                 Console.Write($"time:{zaal.time} \t");
-                Console.Write($"movie:{zaal.film} \n");
+                Console.Write($"movie:{zaal.film.name} \n");
             }
         }
 
@@ -102,9 +102,9 @@ namespace Bi_Os_Coop
         public int stoelWidth { get; set; }
         public string date { get; set; }
         public string time { get; set; }
+        public MovieInterpreter film { get; set; } //Film film {get; set;}
         public List<Stoel> stoelen { get; set; }
-        public string film { get; set; } //Film film {get; set;}
-        public void setZaal(int stoelwidth, string date, string time, int totalStools, string film)
+        public void setZaal(int stoelwidth, string date, string time, int totalStools, MovieInterpreter film = null)
         {
             this.stoelWidth = stoelwidth;
             this.date = date;

commit 30d4961383d6f347fd53a64f5e8e336fc6274ed7
Merge: dbbf7f3 342105f
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon May 10 11:11:11 2021 +0200

    f

commit dbbf7f3ab0df03d618de9390b5db2e5b6e923016
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon May 10 11:10:44 2021 +0200

    quick fix
---
 MovieMenu.cs | 1 +
 Zalen.cs     | 1 +
 2 files changed, 2 insertions(+)

diff --git a/MovieMenu.cs b/MovieMenu.cs
index 6a19df1..8cf2a0e 100644
--- a/MovieMenu.cs
+++ b/MovieMenu.cs
@@ -8,5 +8,6 @@ namespace Bi_Os_Coop
 {
     class MovieMenu
     {
+
     }
 }
diff --git a/Zalen.cs b/Zalen.cs
index bb2776d..9c19678 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -11,6 +11,7 @@ namespace Bi_Os_Coop
     {
         public void Test()
         {
+            
             Zalen testzaal = new Zalen();
             Zaal tijdelijkeZaal = new Zaal();
             tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100, "Miauwer");

commit 06cea9f4ac4fc4de70be97ff83cc06eac3754c71
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu Apr 22 11:15:08 2021 +0200

    aaaaaaaaaaaaadmiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiin MENU
---
 adminMenu.cs | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/adminMenu.cs b/adminMenu.cs
index 9c3107c..e1efb89 100644
--- a/adminMenu.cs
+++ b/adminMenu.cs
@@ -21,38 +21,38 @@ namespace Bi_Os_Coop
 
             //JsonSerializerOptions options = new JsonSerializerOptions() { WriteIndented = true };
             //tekstUitJson = JsonSerializer.Serialize(objectTest, options);
-            //System.IO.File.WriteAllText(path, tekstUitJson);     
+            //System.IO.File.WriteAllText(path, tekstUitJson);
 
             //while loop die hoofdPagina loopt tot je "0" in tikt
             bool inDitMenu = true;
 
             while (inDitMenu)
             {
-                string keuze = hoofdPagina();
-                if (keuze == "0")
+                ConsoleKey keuze = hoofdPagina();
+                if (keuze == ConsoleKey.D0)
                 {
                     Environment.Exit(0);
                 }
-                else if (keuze == "1")
+                else if (keuze == ConsoleKey.D1)
                 {
                     inDitMenu = false;
                     Console.Clear();
                     MainMenu.MainMenuShow();
                 }
-                else if (keuze == "2")
+                else if (keuze == ConsoleKey.D2)
                 {
                     admin.AddMovies();
                 }
 
-                else if (keuze == "3")
+                else if (keuze == ConsoleKey.D3)
                 {
                     admin.UpdateMovies();
                 }
-                else if (keuze == "4")
+                else if (keuze == ConsoleKey.D4)
                 {
                     admin.DeleteMovies();
                 }
-                else if (keuze == "5")
+                else if (keuze == ConsoleKey.D5)
                 {
                     admin.AddCinemaHall();
                 }
@@ -67,7 +67,7 @@ namespace Bi_Os_Coop
             }
         }
 
-        public static string hoofdPagina()
+        public static ConsoleKey hoofdPagina()
         {
             Console.Clear();
             MainMenu.Logo();
@@ -82,7 +82,7 @@ namespace Bi_Os_Coop
             //Console.WriteLine("7) Admin Toevoegen");
             Console.WriteLine("Of type '0' om te stoppen");
             Console.Write("\nKies een pagina: ");
-            string keuze = Console.ReadLine();
+            ConsoleKey keuze = Console.ReadKey(true).Key;
             return keuze;
         }
     }

commit 34f8e13b56a6f31ddada9d06c56fc4960b74be9e
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu Apr 22 11:09:36 2021 +0200

    fixed an  inlog glitch
---
 loginscherm.cs | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/loginscherm.cs b/loginscherm.cs
index 39efed9..5b3e8ca 100644
--- a/loginscherm.cs
+++ b/loginscherm.cs
@@ -18,21 +18,21 @@ namespace Bi_Os_Coop
             accounts = accounts.FromJson(account);
             try
             {
-                CPeople.Person persoon = accounts.peopleList.Single(henk => henk.email == username && henk.password == password);
+                CPeople.Person persoon = accounts.peopleList.Single(henk => henk.email.ToLower() == username.ToLower() && henk.password == password);
                 return persoon;
             }
             catch (Exception)
             {
                 try
                 {
-                    CPeople.Admin admin = accounts.adminList.Single(henk => henk.email == username && henk.password == password);
+                    CPeople.Admin admin = accounts.adminList.Single(henk => henk.email.ToLower() == username.ToLower() && henk.password == password);
                     return admin;
                 }
                 catch (Exception)
                 {
                     try
                     {
-                        CPeople.Employee employee = accounts.employeeList.Single(henk => henk.email == username && henk.password == password);
+                        CPeople.Employee employee = accounts.employeeList.Single(henk => henk.email.ToLower() == username.ToLower() && henk.password == password);
                         return employee;
                     }
                     catch (Exception)

commit feba1563d0aa02c6879275d9ce20232e83b136b1
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Apr 21 16:53:10 2021 +0200

    fixed stuffffies
---
 Program.cs   | 4 ++--
 adminMenu.cs | 1 +
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/Program.cs b/Program.cs
index efec371..1f7f623 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,5 +1,5 @@
 #define DEBUG
-//#undef DEBUG
+#undef DEBUG
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -60,7 +60,7 @@ namespace Bi_Os_Coop
                 else if (userType.Equals(typeof(CPeople.Admin))) { isAdmin = true; }
                 else if (userType.Equals(typeof(CPeople.Employee))) { isEmployee = true; }
 
-                if (isAdmin) { adminMenu.hoofdPagina(); }
+                if (isAdmin) { adminMenu.AM(); }
                 else if (isPerson) { MainMenu.MainMenuShow(); }
                 else if (isEmployee) { throw new IdiotException(); }
             }
diff --git a/adminMenu.cs b/adminMenu.cs
index 9ac7dfb..9c3107c 100644
--- a/adminMenu.cs
+++ b/adminMenu.cs
@@ -25,6 +25,7 @@ namespace Bi_Os_Coop
 
             //while loop die hoofdPagina loopt tot je "0" in tikt
             bool inDitMenu = true;
+
             while (inDitMenu)
             {
                 string keuze = hoofdPagina();

commit 0f28806d31c0501137ca656ce576bed2e6d5f6a6
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Apr 21 15:59:39 2021 +0200

    snel werkent gekregen
---
 CPeople.cs         | 14 ++++++++++++++
 Json.cs            |  2 +-
 Json/Accounts.json | 11 ++++++++++-
 Program.cs         | 11 ++++++-----
 4 files changed, 31 insertions(+), 7 deletions(-)

diff --git a/CPeople.cs b/CPeople.cs
index 8b18739..646844c 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -8,6 +8,20 @@ using System.IO;
 
 namespace Bi_Os_Coop
 {
+    public class PeopleTest
+    {
+        public static void newADMIN()
+        {
+            string json = Json.ReadJson("Accounts");
+            CPeople.People jsonPeople = JsonSerializer.Deserialize<CPeople.People>(json);
+            CPeople.Admin adm = new CPeople.Admin();
+            adm.setPerson(1, "Hugo", "Coolste@min.com", "nietzoveilig", "30", "06123456789");
+            jsonPeople.AddAdmin(adm);
+            JsonSerializerOptions opt = new JsonSerializerOptions { WriteIndented = true };
+            json = JsonSerializer.Serialize(jsonPeople, opt);
+            Json.WriteJson("Accounts", json);
+        }
+    }
     public class CPeople
     {
         public static void NewUser()
diff --git a/Json.cs b/Json.cs
index 3cf6639..9a4f468 100644
--- a/Json.cs
+++ b/Json.cs
@@ -55,7 +55,7 @@ namespace Bi_Os_Coop
     [Serializable]
     public class IdiotException : Exception
     {
-        public IdiotException() { }
+        public IdiotException() { Console.WriteLine("some idiot fucked up"); }
         public IdiotException(string message) : base(message) { }
         public IdiotException(string message, Exception inner) : base(message, inner) { }
         protected IdiotException(
diff --git a/Json/Accounts.json b/Json/Accounts.json
index 5966aad..b1a29fb 100644
--- a/Json/Accounts.json
+++ b/Json/Accounts.json
@@ -25,6 +25,15 @@
       "phonenumber": "0657050124"
     }
   ],
-  "adminList": null,
+  "adminList": [
+    {
+      "id": 1,
+      "name": "Hugo",
+      "email": "Coolste@min.com",
+      "password": "nietzoveilig",
+      "age": "30",
+      "phonenumber": "06123456789"
+    }
+  ],
   "employeeList": null
 }
\ No newline at end of file
diff --git a/Program.cs b/Program.cs
index b3ca159..efec371 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,5 +1,5 @@
 #define DEBUG
-#undef DEBUG
+//#undef DEBUG
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -15,16 +15,17 @@ namespace Bi_Os_Coop
         {
 
 #if (DEBUG)
+
             //Hier in de testen
             //ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
             //test.Test();
             //Test Gelukt
-
-            MainMenu.MainMenuShow();
-            adminMenu.AM();
+            //PeopleTest.newADMIN();
+            //MainMenu.MainMenuShow();
+            //adminMenu.AM();
             //Registerscreen.CreateAccount();
 
-            loginscherm.login();
+            //loginscherm.login();
             /*
             newEntry("A1", ConsoleColor.Red, ConsoleColor.Black);
             newEntry("B1", ConsoleColor.Red, ConsoleColor.Black);

commit 6253a898456bcb67c854ffdf5f79806f6eb83e25
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Apr 21 11:40:58 2021 +0200

    Merge conflict in Cpeople en Program flow in Program.cs
---
 CPeople.cs |  7 ++-----
 Program.cs | 15 +++++++++++++++
 2 files changed, 17 insertions(+), 5 deletions(-)

diff --git a/CPeople.cs b/CPeople.cs
index 28f8916..35e362a 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -18,10 +18,8 @@ namespace Bi_Os_Coop
             jsonPeople.addPersonByFunction(3, "Bjorn", "json@bjorn.com", "jsonBjorn", "30", "06123456789");
             json = JsonSerializer.Serialize(jsonPeople);
             Json.WriteJson("Accounts", json);
-<<<<<<< HEAD
             //Console.WriteLine(jsonPeople);
             // mac doet weer eens raar test
-=======
             Console.WriteLine(jsonPeople);
         }
 
@@ -31,7 +29,6 @@ namespace Bi_Os_Coop
             bjorn.setPerson(3, "Bjorn", "json@bjorn.com", "jsonBjorn", "30", "06123456789");
             bjorn.DeleteAccount(bjorn);
             // kleine aanpassing om te committen
->>>>>>> AdminMethods
         }
 
         /// <summary>
@@ -156,7 +153,7 @@ namespace Bi_Os_Coop
                         // if the person doesn't exist we ask if the person wants to make a new account, if not send to Main Menu
                         Console.WriteLine("Sorry, dit account bestaat niet.");
                         Console.WriteLine("Wilt u een nieuw account aanmaken? (j/n)");
-              
+
                         if (Console.ReadKey(true).Key == ConsoleKey.J) // person wants to create a new account
                         {
                             Console.Clear();
@@ -292,7 +289,7 @@ namespace Bi_Os_Coop
                         System.Threading.Thread.Sleep(1000);
                         Console.ForegroundColor = ConsoleColor.Gray;
                         adminMenu.hoofdPagina();
-                    }               
+                    }
                 }
                 catch (InvalidOperationException)
                 {
diff --git a/Program.cs b/Program.cs
index 89b23ce..3a111eb 100644
--- a/Program.cs
+++ b/Program.cs
@@ -37,6 +37,21 @@ namespace Bi_Os_Coop
 #endif
             // Hieronder normaal programma
 
+            // maakt een user aan met een dynamic type
+            var user = loginscherm.login();
+            Type userType = user.GetType();
+            // krijgt de type van Variabele User
+            bool isPerson = false; // for some reason mocht dit niet als Bool isPerson, isAdmin, isEmployee = false;
+            bool isAdmin = false;
+            bool isEmployee = false;
+
+            if (userType.Equals(typeof(CPeople.Person))) { isPerson = true; }
+            else if (userType.Equals(typeof(CPeople.Admin))) { isAdmin = true; }
+            else if (userType.Equals(typeof(CPeople.Employee))) { isEmployee = true; }
+
+            if (isAdmin) { adminMenu.hoofdPagina(); }
+            else if (isPerson) { MainMenu.MainMenuShow(); }
+            else if (isEmployee) { throw new IdiotException(); }
 
         }
         /// <summary>

commit 1f42b8054f731548a1693934e2f13570022c6b2a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Apr 20 21:39:14 2021 +0200

    comments :)
---
 Zalen.cs | 17 ++++++++++++++---
 1 file changed, 14 insertions(+), 3 deletions(-)

diff --git a/Zalen.cs b/Zalen.cs
index a8b796f..bb2776d 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -124,17 +124,28 @@ namespace Bi_Os_Coop
         /// <param name="orderer"></param>
         public int occupyStool(int[] indexs, CPeople.Person orderer)
         {
+            //orderer is the 'Owner' of that chair
+            //index -= 1; // we have to count the seats from 1 but in code from 0 so if someone wants to order Seat 1 in code it will be seat 0
+
+            /* 20 seats Rows of seats are divided by one or more aisles so that there are seldom more than 20 seats in a row.
+             * This allows easier access to seating, as the space between rows is very narrow.
+             * Depending on the angle of rake of the seats, the aisles have steps.
+             * 1 2 3 4 5 6 7 8 9 10;
+             * 11 12 13 14 15 16 17 18 19 20;
+             * I'm going to prompt it the numbers 001, 002, 003, 004, 005, 006, 007, 008, 009, 010... in return
+             */
             try
             {
                 foreach (int index in indexs)
                 {
+
                     if (stoelen.ElementAt(index).isOccupied)
                     {
-                        Console.WriteLine($"{index} stool is already ");
+                        Console.WriteLine($"{index-1} stool is already ");
                         return -1;
                     }
-                    stoelen.ElementAt(index).isOccupied = true;
-                    stoelen.ElementAt(index).isOccupiedBy = orderer.id;
+                    stoelen.ElementAt(index-1).isOccupied = true;
+                    stoelen.ElementAt(index-1).isOccupiedBy = orderer.id;
                 }
                 return 1;
             }

commit 04a8de513c79d3cf8fa1afbcc6138700038951a5
Merge: a0d131e f5f832f
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Apr 20 21:33:13 2021 +0200

    Merge branch 'master' of https://github.com/HugoVG/Bi-Os-Coop

commit a0d131e9aaca3c482de4ca60fb9011c1818d0c6e
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Apr 20 21:33:00 2021 +0200

    Code Clean Up Zalen.cs
---
 Zalen.cs | 60 +++++++++++++++++++++++++++++++++---------------------------
 1 file changed, 33 insertions(+), 27 deletions(-)

diff --git a/Zalen.cs b/Zalen.cs
index 048e4d9..a8b796f 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -17,7 +17,7 @@ namespace Bi_Os_Coop
             tijdelijkeZaal.showStool();
             CPeople.Person Henk = new CPeople.Person();
             Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
-            tijdelijkeZaal.occupyStool(10, Henk);
+            //tijdelijkeZaal.Reser(-5, Henk);
             Console.ReadKey();
             testzaal.AddZaal(tijdelijkeZaal);
             testzaal.writeZalen();
@@ -27,7 +27,8 @@ namespace Bi_Os_Coop
             Zalen testzaal2 = new Zalen();
             string json2 = Json.ReadJson("Zalen");
             testzaal2 = testzaal2.FromJson(json2);
-            int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
+            //int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
+            int gfdjhfskd = 30;
             testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
             foreach(Zaal zaal in testzaal2.zalenList)
             {
@@ -51,8 +52,7 @@ namespace Bi_Os_Coop
         {
             if (zalenList == null)
             {
-                List<Zaal> newZaal = new List<Zaal>();
-                newZaal.Add(zaal);
+                List<Zaal> newZaal = new List<Zaal>{zaal};
                 zalenList = newZaal;
             }
             else
@@ -64,7 +64,7 @@ namespace Bi_Os_Coop
         {
             foreach (Zaal zaal in this.zalenList)
             {
-                Console.Write($"date:{zaal.date} \t");
+                Console.Write($"\ndate:{zaal.date} \t");
                 Console.Write($"time:{zaal.time} \t");
                 Console.Write($"movie:{zaal.film} \n");
             }
@@ -84,16 +84,15 @@ namespace Bi_Os_Coop
         public void Reserveseats(int[] indexes, CPeople.Person orderer, string date, string time)
         {
             Zaal gekozenzaal = zalenList.Single(movie => movie.date == date && movie.time == time);
-            foreach(int index in indexes)
-            {
-                gekozenzaal.occupyStool(index, orderer);
-            }
+            gekozenzaal.occupyStool(indexes, orderer);
         }
 
         public void Reserveseats(int index, CPeople.Person orderer, string date, string time)
         {
             Zaal gekozenzaal = zalenList.Single(movie => movie.date == date && movie.time == time);
-            gekozenzaal.occupyStool(index, orderer);
+            int[] indexs = new int[1];
+            indexs[0] = index;
+            gekozenzaal.occupyStool(indexs, orderer);
         }
 
     }
@@ -118,27 +117,34 @@ namespace Bi_Os_Coop
                 stoelen = nstoelen;
             }
         }
-        public void occupyStool(int index, CPeople.Person orderer)
+        /// <summary>
+        /// Occupies a stool
+        /// </summary>
+        /// <param name="index"></param>
+        /// <param name="orderer"></param>
+        public int occupyStool(int[] indexs, CPeople.Person orderer)
         {
-            //orderer is the 'Owner' of that chair
-            index -= 1; // we have to count the seats from 1 but in code from 0 so if someone wants to order Seat 1 in code it will be seat 0
-
-            /* 20 seats Rows of seats are divided by one or more aisles so that there are seldom more than 20 seats in a row.
-             * This allows easier access to seating, as the space between rows is very narrow.
-             * Depending on the angle of rake of the seats, the aisles have steps.
-             * 1 2 3 4 5 6 7 8 9 10;
-             * 11 12 13 14 15 16 17 18 19 20;
-             * I'm going to prompt it the numbers 001, 002, 003, 004, 005, 006, 007, 008, 009, 010... in return
-             */
-            if (stoelen.ElementAt(index).isOccupied)
+            try
             {
-                Console.WriteLine("this stool is already reserved");
-                return;
+                foreach (int index in indexs)
+                {
+                    if (stoelen.ElementAt(index).isOccupied)
+                    {
+                        Console.WriteLine($"{index} stool is already ");
+                        return -1;
+                    }
+                    stoelen.ElementAt(index).isOccupied = true;
+                    stoelen.ElementAt(index).isOccupiedBy = orderer.id;
+                }
+                return 1;
+            }
+            catch (ArgumentOutOfRangeException)
+            {
+                Console.WriteLine($"\n\none of the chairs is not valid"); // Textbox.Hint
+                return 0;
             }
-            stoelen.ElementAt(index).isOccupied = true;
-            stoelen.ElementAt(index).isOccupiedBy = orderer.id;
-
         }
+
         /// <summary>
         /// DIT IS CONOLSE
         /// </summary>

commit c239707948a5ae25c848b935c41a282100581237
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Fri Apr 9 11:19:52 2021 +0200

    fix fix
---
 Filmaddtojsonfile.cs |  4 ++--
 Program.cs           | 22 +++++++++++-----------
 Zalen.cs             |  2 +-
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/Filmaddtojsonfile.cs b/Filmaddtojsonfile.cs
index 836199f..6c991a7 100644
--- a/Filmaddtojsonfile.cs
+++ b/Filmaddtojsonfile.cs
@@ -14,8 +14,8 @@ namespace Bi_Os_Coop
         {
             //1e keer films toevoegen
             MovieInterpreter Movie = new MovieInterpreter();
-            string[] genres = new string[4] { "Romance", "Supernatural", "School", "Drama" };
-            string[] Acteurs = new string[2] { "Mone Kamishiraishi", "Ryunosuke Kamiki" };
+            List<string> genres = new List<string> { "Romance", "Supernatural", "School", "Drama" };
+            List<string> Acteurs = new List<string> { "Mone Kamishiraishi", "Ryunosuke Kamiki" };
             //Ik zou voor genres en acteurs het omwisselen naar lists, aangezien je perse bij een array moet aangeven hoeveel items er in een array moeten zitten.
             Movie.setFilm(1, "Kimi no Na wa.", "2016", genres, 13, 8.95, Acteurs, "https://www.youtube.com/watch?v=3KR8_igDs1Y");
             // voor movieid had ik in gedachten om voor het toevoegen zoiets als dit te doen. int listlength = lengte list; movieid = listlength+1;
diff --git a/Program.cs b/Program.cs
index 5f5b430..89b23ce 100644
--- a/Program.cs
+++ b/Program.cs
@@ -13,19 +13,18 @@ namespace Bi_Os_Coop
     {
         static void Main(string[] args)
         {
+
+#if (DEBUG)
+            //Hier in de testen
+            ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
+            test.Test();
             //Test Gelukt
-            //ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
-            //test.Test();
 
-<<<<<<< HEAD
-            //MainMenu.MainMenuShow();
+            MainMenu.MainMenuShow();
             adminMenu.AM();
-=======
-            //adminMenu.AM();
->>>>>>> AdminMethods
-            //Registerscreen.CreateAccount();
+            Registerscreen.CreateAccount();
 
-            //loginscherm.login();
+            loginscherm.login();
             /*
             newEntry("A1", ConsoleColor.Red, ConsoleColor.Black);
             newEntry("B1", ConsoleColor.Red, ConsoleColor.Black);
@@ -34,10 +33,11 @@ namespace Bi_Os_Coop
             string read = Console.ReadLine();
             */
             //CPeople.Poggers();
-
-#if (DEBUG)
             Console.ReadKey();
 #endif
+            // Hieronder normaal programma
+
+
         }
         /// <summary>
         /// Will write a new text to the console making the Main take up less space
diff --git a/Zalen.cs b/Zalen.cs
index 47d85db..048e4d9 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -132,7 +132,7 @@ namespace Bi_Os_Coop
              */
             if (stoelen.ElementAt(index).isOccupied)
             {
-                Console.WriteLine("this stool is already reserverd");
+                Console.WriteLine("this stool is already reserved");
                 return;
             }
             stoelen.ElementAt(index).isOccupied = true;

commit f67d6183ba4c25c7eb4bafb66924cfa10bd7c3aa
Merge: 2517484 36520ba
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Apr 7 10:29:44 2021 +0200

    Merge branch 'master' of https://github.com/HugoVG/Bi-Os-Coop

commit 25174842f467bde0bad5f339ec46949afee3eeaa
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Apr 7 10:29:09 2021 +0200

    hugo's zalen
---
 Bi-Os-Coop.csproj     |   6 +
 Bi_Os_Coop_groot_.ico | Bin 0 -> 132091 bytes
 Json/Zalen.json       | 513 +++++++++++++++++++++++++++++++++++++++++++++++++-
 Zalen.cs              |  85 ++++++---
 4 files changed, 576 insertions(+), 28 deletions(-)

diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index c900f70..f227f68 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -32,6 +32,9 @@
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
   </PropertyGroup>
+  <PropertyGroup>
+    <ApplicationIcon>Bi_Os_Coop_groot_.ico</ApplicationIcon>
+  </PropertyGroup>
   <ItemGroup>
     <Reference Include="Microsoft.Bcl.AsyncInterfaces, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
       <HintPath>packages\Microsoft.Bcl.AsyncInterfaces.5.0.0\lib\net461\Microsoft.Bcl.AsyncInterfaces.dll</HintPath>
@@ -91,6 +94,9 @@
     <None Include="packages.config" />
     <None Include="Json\Films.json" />
   </ItemGroup>
+  <ItemGroup>
+    <Content Include="Bi_Os_Coop_groot_.ico" />
+  </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
   <ProjectExtensions />
 </Project>
\ No newline at end of file
diff --git a/Bi_Os_Coop_groot_.ico b/Bi_Os_Coop_groot_.ico
new file mode 100644
index 0000000..a0b69ed
Binary files /dev/null and b/Bi_Os_Coop_groot_.ico differ
diff --git a/Json/Zalen.json b/Json/Zalen.json
index 472ad77..80a49f8 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -1 +1,512 @@
-{"zalenList":[{"stoelWidth":10,"date":"30-01-2021","time":"13:00","stoelen":[{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":true,"isOccupiedBy":69,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10}],"film":"Miauwer"}]}
\ No newline at end of file
+{
+  "zalenList": [
+    {
+      "stoelWidth": 10,
+      "date": "30-01-2021",
+      "time": "13:00",
+      "stoelen": [
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 69,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 69,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 69,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 69,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 69,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        }
+      ],
+      "film": "Miauwer"
+    }
+  ]
+}
\ No newline at end of file
diff --git a/Zalen.cs b/Zalen.cs
index 602c18e..47d85db 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -7,33 +7,43 @@ using System.Text.Json;
 
 namespace Bi_Os_Coop
 {
-    //public class ZAALTESTERNIETGEBRUIKEN
-    //{
-    //    public void Test()
-    //    {
-    //        Zalen testzaal = new Zalen();
-    //        Zaal tijdelijkeZaal = new Zaal();
-    //        tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100, "Miauwer");
-    //        tijdelijkeZaal.showStool();
-    //        CPeople.Person Henk = new CPeople.Person();
-    //        Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021");
-    //        tijdelijkeZaal.occupyStool(10, Henk);
-    //        Console.ReadKey();
-    //        testzaal.AddZaal(tijdelijkeZaal);
-    //        testzaal.writeZalen();
-    //        string json  = testzaal.ToJson();
-    //        Json.WriteJson("Zalen", json);
-    //        Console.ReadKey();
-    //        Zalen testzaal2 = new Zalen();
-    //        string json2 = Json.ReadJson("Zalen");
-    //        testzaal2 = testzaal2.FromJson(json2);
-    //        foreach (Zaal zaal in testzaal2.zalenList)
-    //        {
-    //            zaal.showStool();
-    //        }
+    public class ZAALTESTERNIETGEBRUIKEN
+    {
+        public void Test()
+        {
+            Zalen testzaal = new Zalen();
+            Zaal tijdelijkeZaal = new Zaal();
+            tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100, "Miauwer");
+            tijdelijkeZaal.showStool();
+            CPeople.Person Henk = new CPeople.Person();
+            Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021", "06111111");
+            tijdelijkeZaal.occupyStool(10, Henk);
+            Console.ReadKey();
+            testzaal.AddZaal(tijdelijkeZaal);
+            testzaal.writeZalen();
+            string json = testzaal.ToJson();
+            Json.WriteJson("Zalen", json);
+            Console.ReadKey();
+            Zalen testzaal2 = new Zalen();
+            string json2 = Json.ReadJson("Zalen");
+            testzaal2 = testzaal2.FromJson(json2);
+            int[] gfdjhfskd = new int[] { 31, 32, 33, 34 };
+            testzaal2.Reserveseats(gfdjhfskd, Henk, "30-01-2021", "13:00");
+            foreach(Zaal zaal in testzaal2.zalenList)
+            {
+                zaal.showStool();
+            }
+            Console.ReadKey();
+            json2 = testzaal2.ToJson();
+            Json.WriteJson("Zalen", json2);
+            testzaal2 = testzaal2.FromJson(json2);
+            foreach (Zaal zaal in testzaal2.zalenList)
+            {
+                zaal.showStool();
+            }
 
-    //    }
-    //}
+        }
+    }
     class Zalen
     {
         public List<Zaal> zalenList { get; set; }
@@ -59,15 +69,33 @@ namespace Bi_Os_Coop
                 Console.Write($"movie:{zaal.film} \n");
             }
         }
+
         public string ToJson()
         {
             JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
             return JsonSerializer.Serialize(this, opt);
         }
+
         public Zalen FromJson(string json)
         {
             return JsonSerializer.Deserialize<Zalen>(json);
         }
+
+        public void Reserveseats(int[] indexes, CPeople.Person orderer, string date, string time)
+        {
+            Zaal gekozenzaal = zalenList.Single(movie => movie.date == date && movie.time == time);
+            foreach(int index in indexes)
+            {
+                gekozenzaal.occupyStool(index, orderer);
+            }
+        }
+
+        public void Reserveseats(int index, CPeople.Person orderer, string date, string time)
+        {
+            Zaal gekozenzaal = zalenList.Single(movie => movie.date == date && movie.time == time);
+            gekozenzaal.occupyStool(index, orderer);
+        }
+
     }
     class Zaal
     {
@@ -89,7 +117,6 @@ namespace Bi_Os_Coop
                 nstoelen.Add(stoel);
                 stoelen = nstoelen;
             }
-
         }
         public void occupyStool(int index, CPeople.Person orderer)
         {
@@ -112,6 +139,9 @@ namespace Bi_Os_Coop
             stoelen.ElementAt(index).isOccupiedBy = orderer.id;
 
         }
+        /// <summary>
+        /// DIT IS CONOLSE
+        /// </summary>
         public void showStool()
         {
             Console.Clear();
@@ -152,6 +182,7 @@ namespace Bi_Os_Coop
             }
         }
     }
+
     class Stoel
     {
         public bool isOccupied { get; set; } = false;

commit dcaf66cf8e76d65f56c2f7dc37565e3f36b4bf67
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 30 11:12:41 2021 +0200

    snelle fix
---
 CPeople.cs | 3 ++-
 Program.cs | 2 +-
 Zalen.cs   | 3 ++-
 3 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/CPeople.cs b/CPeople.cs
index 914099f..eaed751 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -350,7 +350,8 @@ namespace Bi_Os_Coop
             /// <returns></returns>
             public string ToJson()
             {
-                return JsonSerializer.Serialize(this);
+                JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+                return JsonSerializer.Serialize(this, opt);
             }
             public People FromJson(string json)
             {
diff --git a/Program.cs b/Program.cs
index 974dc35..e792f47 100644
--- a/Program.cs
+++ b/Program.cs
@@ -26,7 +26,7 @@ namespace Bi_Os_Coop
             newEntry("C1", ConsoleColor.Red, ConsoleColor.Black);
             newEntry("D1", ConsoleColor.Red, ConsoleColor.Black);
             string read = Console.ReadLine();
-
+            */
             //CPeople.Poggers();
 
 #if (DEBUG)
diff --git a/Zalen.cs b/Zalen.cs
index 75dbd52..602c18e 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -61,7 +61,8 @@ namespace Bi_Os_Coop
         }
         public string ToJson()
         {
-            return JsonSerializer.Serialize(this);
+            JsonSerializerOptions opt = new JsonSerializerOptions() { WriteIndented = true };
+            return JsonSerializer.Serialize(this, opt);
         }
         public Zalen FromJson(string json)
         {

commit 81cb441a8c3618e8b2509d105e75d9b763092e33
gpg: Signature made Tue Mar 30 10:23:33 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 0e8f42a 3eda389
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 30 10:23:33 2021 +0200

    Merge pull request #17 from HugoVG/adminMenu
    
    Admin Menu

commit 3eda389d506ba21c92d8e93afb5a39412d586cd9
gpg: Signature made Tue Mar 30 10:23:26 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 968870a 0e8f42a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 30 10:23:26 2021 +0200

    Merge branch 'master' into adminMenu

commit 56e9c805e3b5f1a27dddd158e04a45cfe8e5d4c2
gpg: Signature made Mon Mar 29 11:55:00 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 4f850fd a4c60e1
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon Mar 29 11:55:00 2021 +0200

    Merge pull request #14 from HugoVG/Registerscreen
    
    Registerscreen

commit d6996f1dc6216ba54b311820997c3f6a726c03ba
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Sun Mar 28 15:21:49 2021 +0200

    added things to make everything look nicer
---
 CPeople.cs      |   4 +-
 Json/Zalen.json | 513 +++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 Zalen.cs        |   4 +-
 3 files changed, 518 insertions(+), 3 deletions(-)

diff --git a/CPeople.cs b/CPeople.cs
index c754e2a..593de9d 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -201,7 +201,9 @@ namespace Bi_Os_Coop
             /// <returns></returns>
             public string ToJson()
             {
-                return JsonSerializer.Serialize(this);
+                JsonSerializerOptions seri = new JsonSerializerOptions();
+                seri.WriteIndented = true;
+                return JsonSerializer.Serialize(this, seri);
             }
             public People FromJson(string json)
             {
diff --git a/Json/Zalen.json b/Json/Zalen.json
index 472ad77..91d5b17 100644
--- a/Json/Zalen.json
+++ b/Json/Zalen.json
@@ -1 +1,512 @@
-{"zalenList":[{"stoelWidth":10,"date":"30-01-2021","time":"13:00","stoelen":[{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":true,"isOccupiedBy":69,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10}],"film":"Miauwer"}]}
\ No newline at end of file
+{
+  "zalenList": [
+    {
+      "stoelWidth": 10,
+      "date": "30-01-2021",
+      "time": "13:00",
+      "stoelen": [
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": true,
+          "isOccupiedBy": 69,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        },
+        {
+          "isOccupied": false,
+          "isOccupiedBy": 1,
+          "Price": 10
+        }
+      ],
+      "film": "Miauwer"
+    }
+  ]
+}
\ No newline at end of file
diff --git a/Zalen.cs b/Zalen.cs
index 38012d9..18b6a63 100644
--- a/Zalen.cs
+++ b/Zalen.cs
@@ -61,7 +61,9 @@ namespace Bi_Os_Coop
         }
         public string ToJson()
         {
-            return JsonSerializer.Serialize(this);
+            JsonSerializerOptions seri = new JsonSerializerOptions();
+            seri.WriteIndented = true;
+            return JsonSerializer.Serialize(this, seri);
         }
         public Zalen FromJson(string json)
         {

commit f521aa3f14855ebac21f502d70e7db85e1c7575b
gpg: Signature made Wed Mar 24 16:15:23 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 192c9fb 3ec8a5e
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Mar 24 16:15:23 2021 +0100

    Merge pull request #13 from HugoVG/Zalen
    
    Zalen + de Json

commit 3ec8a5edcca5a5d5db4f9d8455db82ed3370f3d6
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Mar 24 16:15:04 2021 +0100

    Zalen + de Json
---
 Bi-Os-Coop.csproj        |   2 +
 Draw.IO/Zalen.drawio.svg | 265 +++++++++++++++++++++++++++++++++++++++++++++++
 Json/Zalen.json          |   1 +
 Program.cs               |   4 +-
 Zalen.cs                 | 166 +++++++++++++++++++++++++++++
 5 files changed, 437 insertions(+), 1 deletion(-)

diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index 1bbb9cd..04b3225 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -78,10 +78,12 @@
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="Registerscreen.cs" />
+    <Compile Include="Zalen.cs" />
   </ItemGroup>
   <ItemGroup>
     <None Include="App.config" />
     <None Include="Json\Accounts.json" />
+    <None Include="Json\Zalen.json" />
     <None Include="packages.config" />
     <None Include="Json\Films.json" />
   </ItemGroup>
diff --git a/Draw.IO/Zalen.drawio.svg b/Draw.IO/Zalen.drawio.svg
new file mode 100644
index 0000000..e674682
--- /dev/null
+++ b/Draw.IO/Zalen.drawio.svg
@@ -0,0 +1,265 @@
+<svg host="65bd71144e" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="389px" height="851px" viewBox="-0.5 -0.5 389 851" content="&lt;mxfile&gt;&lt;diagram id=&quot;Z53uHrIRfYXI6xoHyeUb&quot; name=&quot;Page-1&quot;&gt;7Zpfj5s4EMA/TaTeSSdhQ/49Lsne9aSrWjWn9q4vlTfMEreGQcbZJP30NWBIiAni9kJU2j7FHmyP5zf2eAwZuYto/4dkyeYVBiBG1An2I3c5opQ4dKp/MsmhkEznTiEIJQ9Mo6Ngxb9A2dNItzyAtNZQIQrFk7pwjXEMa1WTMSlxV2/2iKKuNWEhWILVmglb+p4HalNIZ6VZmfwl8HBTaiaTefEkYmVjY0m6YQHuTkTu/chdSERVlKL9AkQGr+RS9Pv9wtNqYhJi1aWDmfETE1tj2wdtZWwmpw6lxemOR4LFuuabHiAV7C9qJZUtehEARqDkQTcxHabGeuP+isbuCLOSbU5A0okRMuPAsBq60vZWO5zFoZ54pW5SV0fGtrp5kza3rowJBTJmCnzcxkF6ylUXTuw8inLazeRnFvkFxorxGOT/pj9tpl/i7krb+2+0zfDet0B33iPdWStdQjriJW4L3prpLXaWymobmInb7t9xV5OfuX87qLv9CiOkxyVGnGb+l7dYM2863B1MaJ98L6zvcg+7HQHPn8W3afjbA6Y24HeoH1LnLaQgnyDj7OxfrBSCTgl+saBrwHqi/kZFWsWS6CITPIx1ea1B696un7mB67zpzjyIeBBk3X0JKf/CHvKhHF1PkMcqN3Psj8bLbKytwrTI/Ehnt9JWtzZgJ5Mm7lcIzNS7RHfJ00SwbFqNkXpwVBuyqeoMvDpV+7jTFmqBWaQfi3R8AEzbAxAd35CpfZDVmOqSucwMHqt3S6z21WqlJI/DLAQwtY2Gj3Ni42w8xq5B074uVTT/5p+CfLnyZPhMZ7djStwGpgg3vjzMer48fJOXf2JnB1dMbt32IPgjXB7GffL1WvnOO/K9yv2f2oZWcTEEle/n1+v1NjkMITSOW8E2pe9uX7HRPr19xKzFn2nOk0MwBKLtS7WJqNMXUfuV3BK3D3noeCP5GoaPs+FomfVEs/TcCS4IQliZKogH3N0fBb7MoioEhgZKtcEQYyb+QkwMgU+g1MF8a8ng1NHDnqt/Tsr/mqGy8nJ/WjmYSjHBbFbtiYI2ArdyDe2IJQim+FN9rJaT6Q0WlxjjzCoql6nr+bttxaSOl6bX0Q93UuZX9bKZWUcX9Xjjup6p55y5tRjxuQebS79Xv19IGq/sd5fcxu+ee2W/27n6Sz036vw6ohMWaV/68UOaVPjtMJoqiZ9hgQJ14FzGmOc7j1yIM9GJ7x91ymQWBvXKuhmYtEVfK05LVNqLmMl+mzudw23zkjAd3NnZVut6mrV91uocf+0E/qc/zraA058/dPX4jbzYTsd/Grj3XwE=&lt;/diagram&gt;&lt;/mxfile&gt;">
+    <defs/>
+    <g>
+        <path d="M 0 23 L 0 0 L 220 0 L 220 23" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/>
+        <path d="M 0 23 L 0 260 L 220 260 L 220 23" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 23 L 220 23" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="16">
+                Zalen
+            </text>
+        </g>
+        <path d="M 0 43 L 0 20 L 220 20 L 220 43" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 43 L 0 260 L 220 260 L 220 43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 43 L 220 43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="36">
+                Container
+            </text>
+        </g>
+        <path d="M 0 153 L 0 130 L 220 130 L 220 153" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 153 L 0 260 L 220 260 L 220 153" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 153 L 220 153" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="146">
+                Container
+            </text>
+        </g>
+        <path d="M 0 313 L 0 290 L 220 290 L 220 313" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 313 L 0 550 L 220 550 L 220 313" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 313 L 220 313" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="306">
+                Zaal
+            </text>
+        </g>
+        <path d="M 0 353 L 0 330 L 220 330 L 220 353" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 353 L 0 550 L 220 550 L 220 353" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 353 L 220 353" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="346">
+                Container
+            </text>
+        </g>
+        <path d="M 0 483 L 0 460 L 220 460 L 220 483" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 483 L 0 550 L 220 550 L 220 483" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 483 L 220 483" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="476">
+                Container
+            </text>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 500px; margin-left: 80px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                Void Reserveer x(Stoelen)
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="80" y="504" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    Void Reserveer x(Stoelen)
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 520px; margin-left: 55px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                Void Display Zaal
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="55" y="524" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    Void Display Zaal
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 365px; margin-left: 55px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                int Stoelen_Width
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="55" y="369" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    int Stoelen_Width
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 385px; margin-left: 55px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                int Stoelen Height
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="55" y="389" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    int Stoelen Height
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 405px; margin-left: 45px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                String Datum
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="45" y="409" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    String Datum
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 425px; margin-left: 45px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                String Tijd Stip
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="45" y="429" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    String Tijd Stip
+                </text>
+            </switch>
+        </g>
+        <path d="M 0 613 L 0 590 L 220 590 L 220 613" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 613 L 0 850 L 220 850 L 220 613" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 613 L 220 613" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="606">
+                Stoel
+            </text>
+        </g>
+        <path d="M 0 653 L 0 630 L 220 630 L 220 653" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 653 L 0 850 L 220 850 L 220 653" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 653 L 220 653" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="646">
+                Container
+            </text>
+        </g>
+        <path d="M 0 743 L 0 720 L 220 720 L 220 743" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 743 L 0 850 L 220 850 L 220 743" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 0 743 L 220 743" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px">
+            <text x="109.5" y="736">
+                Container
+            </text>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 760px; margin-left: 65px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                String getStoelOccupy
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="65" y="764" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    String getStoelOccupy
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 670px; margin-left: 50px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                Bool IsOccupied
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="50" y="674" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    Bool IsOccupied
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 690px; margin-left: 40px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">
+                                Double Price
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="40" y="694" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">
+                    Double Price
+                </text>
+            </switch>
+        </g>
+        <path d="M 220 630 L 380 630 L 380 420 L 226.37 420" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 221.12 420 L 228.12 416.5 L 226.37 420 L 228.12 423.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 220 330 L 380 330 L 380 90 L 226.37 90" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <path d="M 221.12 90 L 228.12 86.5 L 226.37 90 L 228.12 93.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/>
+        <g transform="translate(-0.5 -0.5)rotate(-90 360 530)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 530px; margin-left: 360px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 24px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; font-weight: bold; white-space: nowrap; ">
+                                Has *
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="360" y="537" fill="#000000" font-family="Helvetica" font-size="24px" text-anchor="middle" font-weight="bold">
+                    Has *
+                </text>
+            </switch>
+        </g>
+        <g transform="translate(-0.5 -0.5)rotate(-90 360 200)">
+            <switch>
+                <foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
+                    <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 200px; margin-left: 360px;">
+                        <div style="box-sizing: border-box; font-size: 0; text-align: center; ">
+                            <div style="display: inline-block; font-size: 24px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; font-weight: bold; white-space: nowrap; ">
+                                Has *
+                            </div>
+                        </div>
+                    </div>
+                </foreignObject>
+                <text x="360" y="207" fill="#000000" font-family="Helvetica" font-size="24px" text-anchor="middle" font-weight="bold">
+                    Has *
+                </text>
+            </switch>
+        </g>
+    </g>
+    <switch>
+        <g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/>
+        <a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank">
+            <text text-anchor="middle" font-size="10px" x="50%" y="100%">
+                Viewer does not support full SVG 1.1
+            </text>
+        </a>
+    </switch>
+</svg>
\ No newline at end of file
diff --git a/Json/Zalen.json b/Json/Zalen.json
new file mode 100644
index 0000000..472ad77
--- /dev/null
+++ b/Json/Zalen.json
@@ -0,0 +1 @@
+{"zalenList":[{"stoelWidth":10,"date":"30-01-2021","time":"13:00","stoelen":[{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":true,"isOccupiedBy":69,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10},{"isOccupied":false,"isOccupiedBy":1,"Price":10}],"film":"Miauwer"}]}
\ No newline at end of file
diff --git a/Program.cs b/Program.cs
index 898260c..0e27b25 100644
--- a/Program.cs
+++ b/Program.cs
@@ -13,7 +13,9 @@ namespace Bi_Os_Coop
     {
         static void Main(string[] args)
         {
-
+            //Test Gelukt
+            ZAALTESTERNIETGEBRUIKEN test = new ZAALTESTERNIETGEBRUIKEN();
+            test.Test();
 
             //loginscherm.login();
             /*
diff --git a/Zalen.cs b/Zalen.cs
new file mode 100644
index 0000000..38012d9
--- /dev/null
+++ b/Zalen.cs
@@ -0,0 +1,166 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    public class ZAALTESTERNIETGEBRUIKEN
+    {
+        public void Test()
+        {
+            Zalen testzaal = new Zalen();
+            Zaal tijdelijkeZaal = new Zaal();
+            tijdelijkeZaal.setZaal(10, "30-01-2021", "13:00", 100, "Miauwer");
+            tijdelijkeZaal.showStool();
+            CPeople.Person Henk = new CPeople.Person();
+            Henk.setPerson(69, "Henk", "Henkerino@HahaHenk.com", "0nlyWams", "30-01-2021");
+            tijdelijkeZaal.occupyStool(10, Henk);
+            Console.ReadKey();
+            testzaal.AddZaal(tijdelijkeZaal);
+            testzaal.writeZalen();
+            string json  = testzaal.ToJson();
+            Json.WriteJson("Zalen", json);
+            Console.ReadKey();
+            Zalen testzaal2 = new Zalen();
+            string json2 = Json.ReadJson("Zalen");
+            testzaal2 = testzaal2.FromJson(json2);
+            foreach (Zaal zaal in testzaal2.zalenList)
+            {
+                zaal.showStool();
+            }
+
+        }
+    }
+    class Zalen
+    {
+        public List<Zaal> zalenList { get; set; }
+        public void AddZaal(Zaal zaal)
+        {
+            if (zalenList == null)
+            {
+                List<Zaal> newZaal = new List<Zaal>();
+                newZaal.Add(zaal);
+                zalenList = newZaal;
+            }
+            else
+            {
+                zalenList.Add(zaal);
+            }
+        }
+        public void writeZalen()
+        {
+            foreach (Zaal zaal in this.zalenList)
+            {
+                Console.Write($"date:{zaal.date} \t");
+                Console.Write($"time:{zaal.time} \t");
+                Console.Write($"movie:{zaal.film} \n");
+            }
+        }
+        public string ToJson()
+        {
+            return JsonSerializer.Serialize(this);
+        }
+        public Zalen FromJson(string json)
+        {
+            return JsonSerializer.Deserialize<Zalen>(json);
+        }
+    }
+    class Zaal
+    {
+        public int stoelWidth { get; set; }
+        public string date { get; set; }
+        public string time { get; set; }
+        public List<Stoel> stoelen { get; set; }
+        public string film { get; set; } //Film film {get; set;}
+        public void setZaal(int stoelwidth, string date, string time, int totalStools, string film)
+        {
+            this.stoelWidth = stoelwidth;
+            this.date = date;
+            this.time = time;
+            this.film = film;
+            List<Stoel> nstoelen = new List<Stoel>();
+            for (int i = 0; i < totalStools; i++)
+            {
+                Stoel stoel = new Stoel();
+                nstoelen.Add(stoel);
+                stoelen = nstoelen;
+            }
+
+        }
+        public void occupyStool(int index, CPeople.Person orderer)
+        {
+            //orderer is the 'Owner' of that chair
+            index -= 1; // we have to count the seats from 1 but in code from 0 so if someone wants to order Seat 1 in code it will be seat 0
+
+            /* 20 seats Rows of seats are divided by one or more aisles so that there are seldom more than 20 seats in a row.
+             * This allows easier access to seating, as the space between rows is very narrow.
+             * Depending on the angle of rake of the seats, the aisles have steps.
+             * 1 2 3 4 5 6 7 8 9 10;
+             * 11 12 13 14 15 16 17 18 19 20;
+             * I'm going to prompt it the numbers 001, 002, 003, 004, 005, 006, 007, 008, 009, 010... in return
+             */
+            if (stoelen.ElementAt(index).isOccupied)
+            {
+                Console.WriteLine("this stool is already reserverd");
+                return;
+            }
+            stoelen.ElementAt(index).isOccupied = true;
+            stoelen.ElementAt(index).isOccupiedBy = orderer.id;
+
+        }
+        public void showStool()
+        {
+            Console.Clear();
+            int counter = 0;
+            Console.ForegroundColor = ConsoleColor.White;
+            foreach (Stoel stoel in this.stoelen)
+            {
+
+                if (counter % stoelWidth == 0)
+                {
+                    if (counter < 10) { }
+                    else { Console.WriteLine("\n"); }
+                }
+
+                if (stoelen.ElementAt(counter).isOccupied)
+                {
+                    Console.BackgroundColor = ConsoleColor.Red;
+                }
+                else
+                {
+                    Console.BackgroundColor = ConsoleColor.Green;
+                }
+                if (counter <= 8)
+                {
+                    Console.Write($"00{counter+1}");
+                }
+                else if (counter <= 98)
+                {
+                    Console.Write($"0{counter + 1}");
+                }
+                else
+                {
+                    Console.Write($"{counter + 1}");
+                }
+                Console.BackgroundColor = ConsoleColor.Black;
+                Console.Write(" ");
+                counter += 1;
+            }
+        }
+    }
+    class Stoel
+    {
+        public bool isOccupied { get; set; } = false;
+        public int isOccupiedBy { get; set; } = 1;//dan kan je het ID van de persoon uit lezen
+        public Double Price { get; set; } = 10.0;
+        public void setStoolDefault()
+        {
+            this.isOccupied = false;
+            this.isOccupiedBy = 1;
+            this.Price = 10.0;
+        }
+    }
+}

commit 192c9fbb0290e1e13e2de8c791ffb0c7ff12e5be
gpg: Signature made Wed Mar 24 13:15:09 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 41d3079 f802787
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Mar 24 13:15:09 2021 +0100

    Merge pull request #12 from HugoVG/Registerscreen
    
    Registerscreen

commit f80278739192253347f11752dd13a812e3b4984d
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Wed Mar 24 13:14:52 2021 +0100

    Loginsherm Gelinked
---
 loginscherm.cs | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/loginscherm.cs b/loginscherm.cs
index 880623b..b3efb87 100644
--- a/loginscherm.cs
+++ b/loginscherm.cs
@@ -8,7 +8,7 @@ namespace Bi_Os_Coop
 {
     class loginscherm
     {
-        public static bool mailwachtvragen(string username, string password)
+        public static CPeople.Person mailwachtvragen(string username, string password)
         {
             string account = Json.ReadJson("Accounts");
             CPeople.People accounts = new CPeople.People();
@@ -16,25 +16,29 @@ namespace Bi_Os_Coop
             try
             {
                 CPeople.Person persoon = accounts.peopleList.Single(henk => henk.email == username && henk.password == password);
-                return true;
+                return persoon;
             }
             catch (InvalidOperationException)
             {
-                return false;
+                CPeople.Person persoon = new CPeople.Person();
+                return persoon;
             }
         }
-        public static void login()
+        public static CPeople.Person login()
         {
             Console.ForegroundColor = ConsoleColor.Gray;
             Console.WriteLine("E-mail:");
             string username = Console.ReadLine();
             Console.WriteLine("Wachtwoord:");
             string password = Console.ReadLine();
-            loginscherm.check(username, password);
+            CPeople.Person inglof = loginscherm.mailwachtvragen(username, password);
+
+            return inglof;
+
         }
         public static void check(string username, string password)
         {
-
+            /*
             if (mailwachtvragen(username, password))
             {
                 Console.ForegroundColor = ConsoleColor.Green;
@@ -51,7 +55,7 @@ namespace Bi_Os_Coop
                 Console.ForegroundColor = ConsoleColor.Gray;
                 loginscherm.login();
             }
+            */
         }
     }
 }
-   
\ No newline at end of file

commit 7d3f731848657bce9380b58fbe26381bf101f4df
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 23 17:10:56 2021 +0100

    added the person adder
---
 Registerscreen.cs | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/Registerscreen.cs b/Registerscreen.cs
index 1dfb1c4..d773bcf 100644
--- a/Registerscreen.cs
+++ b/Registerscreen.cs
@@ -20,9 +20,11 @@ namespace Bi_Os_Coop
             CPeople.Person customer = new CPeople.Person();
             customer.setPerson(id, naam, email, password, date);
             //ik ga er van uit dat je hier json wilt lezen en schrijven
-
+            string json = Json.ReadJson("Accounts");
             CPeople.People jsonPeople = new CPeople.People();
-            jsonPeople = jsonPeople.FromJson("");
+            jsonPeople = jsonPeople.FromJson(json);
+            jsonPeople.AddPerson(customer);
+            //that's it, het was gewoon dat je branch ver achter liep
         }
 
         public static int createID()

commit 41d3079a99bc1421bbe93d3223324f57527e81a6
gpg: Signature made Tue Mar 23 17:07:39 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 2d2bc93 8f93989
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 23 17:07:39 2021 +0100

    Merge pull request #11 from HugoVG/Registerscreen
    
    Registerscreen

commit 8f93989433cf1817d1d59843267e1c90fcf871ce
gpg: Signature made Tue Mar 23 17:07:31 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 3321782 2d2bc93
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 23 17:07:31 2021 +0100

    Merge branch 'master' into Registerscreen

commit 33217823a41048abdba66ee93aadf6f5d3caba52
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 23 17:06:19 2021 +0100

    hugo's problem fix
---
 CPeople.cs         | 8 +++++---
 Json/Accounts.json | 1 +
 Program.cs         | 1 -
 Registerscreen.cs  | 6 +++++-
 4 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/CPeople.cs b/CPeople.cs
index 90395ad..b1b2bb6 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -20,6 +20,8 @@ namespace Bi_Os_Coop
 
             newPeople.writePeople();
             people = people.FromJson(people.ToJson());
+            //Person Harrie = people.peopleList.Single(henk => henk.email == "mijnfakeEmail@test.com" && henk.password == "H3nk123");
+            //Harrie.ChangePassword();
 
         }
         /// <summary>
@@ -68,8 +70,8 @@ namespace Bi_Os_Coop
                 }
             }
             /// <summary>
-            ///     Makes a new Person using a function and adding it to the object, 
-            ///     so it will put the json good  
+            ///     Makes a new Person using a function and adding it to the object,
+            ///     so it will put the json good
             /// </summary>
             /// <param name="id"></param>
             /// <param name="name"></param>
@@ -94,7 +96,7 @@ namespace Bi_Os_Coop
                 }
             }
             /// <summary>
-            /// Will return This object 
+            /// Will return This object
             /// </summary>
             /// <returns></returns>
             public string ToJson()
diff --git a/Json/Accounts.json b/Json/Accounts.json
new file mode 100644
index 0000000..31131bd
--- /dev/null
+++ b/Json/Accounts.json
@@ -0,0 +1 @@
+{"peopleList":[{"id":1,"name":"hugo","email":"mijnfakeEmail@test.com","password":"H3nk123","age":20},{"id":2,"name":"Lilo","email":"Lilo@stitch.com","password":"m@tress","age":19}]}
\ No newline at end of file
diff --git a/Program.cs b/Program.cs
index 9fb3cc1..2aed70d 100644
--- a/Program.cs
+++ b/Program.cs
@@ -24,7 +24,6 @@ namespace Bi_Os_Coop
             string read = Console.ReadLine();
             */
             CPeople.Poggers();
-            Registerscreen.accountInfo();
 
 #if (DEBUG)
             Console.ReadKey();
diff --git a/Registerscreen.cs b/Registerscreen.cs
index 356bbaf..1dfb1c4 100644
--- a/Registerscreen.cs
+++ b/Registerscreen.cs
@@ -17,8 +17,12 @@ namespace Bi_Os_Coop
             string password = validCheck("wachtwoord", lengthCheck);
             string date = validCheck("geboortedatum (dd/mm/jjjj)", dateCheck);
 
-            var customer = new CPeople.Person();
+            CPeople.Person customer = new CPeople.Person();
             customer.setPerson(id, naam, email, password, date);
+            //ik ga er van uit dat je hier json wilt lezen en schrijven
+
+            CPeople.People jsonPeople = new CPeople.People();
+            jsonPeople = jsonPeople.FromJson("");
         }
 
         public static int createID()

commit bdce0d5247aa76db5f97734075a9ea4f623d4a16
gpg: Signature made Mon Mar 22 12:25:47 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 2238719 2f29b90
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon Mar 22 12:25:47 2021 +0100

    Merge pull request #9 from HugoVG/LoginScherm
    
    loginscherm

commit 2f29b9085af7d0c95972838f174c80806e30eeb5
gpg: Signature made Mon Mar 22 12:25:42 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: a9ae68a 2238719
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Mon Mar 22 12:25:42 2021 +0100

    Merge branch 'master' into LoginScherm

commit 22387197bbb371f9ea96f39151d5977aa1822358
gpg: Signature made Sun Mar 21 17:17:09 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 82bf4ee 45f7341
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Sun Mar 21 17:17:09 2021 +0100

    Merge pull request #8 from HugoVG/Json
    
    added Json Reader and writer

commit 45f7341e7f1787715a860a741c0baae07e933d16
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Sun Mar 21 17:16:55 2021 +0100

    added Json Reader and writer
---
 Bi-Os-Coop.csproj  |  4 ++++
 CPeople.cs         |  7 +++---
 Json.cs            | 65 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Json/Accounts.json |  1 +
 Program.cs         |  6 +++--
 5 files changed, 77 insertions(+), 6 deletions(-)

diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index 577cea9..512f2bb 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -72,12 +72,16 @@
   </ItemGroup>
   <ItemGroup>
     <Compile Include="CPeople.cs" />
+    <Compile Include="Json.cs" />
+    <Compile Include="loginscherm.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
   <ItemGroup>
     <None Include="App.config" />
+    <None Include="Json\Accounts.json" />
     <None Include="packages.config" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+  <ProjectExtensions />
 </Project>
\ No newline at end of file
diff --git a/CPeople.cs b/CPeople.cs
index c2e93e1..2fcc472 100644
--- a/CPeople.cs
+++ b/CPeople.cs
@@ -68,8 +68,8 @@ namespace Bi_Os_Coop
                 }
             }
             /// <summary>
-            ///     Makes a new Person using a function and adding it to the object, 
-            ///     so it will put the json good  
+            ///     Makes a new Person using a function and adding it to the object,
+            ///     so it will put the json good
             /// </summary>
             /// <param name="id"></param>
             /// <param name="name"></param>
@@ -94,7 +94,7 @@ namespace Bi_Os_Coop
                 }
             }
             /// <summary>
-            /// Will return This object 
+            /// Will return This object
             /// </summary>
             /// <returns></returns>
             public string ToJson()
@@ -103,7 +103,6 @@ namespace Bi_Os_Coop
             }
             public People FromJson(string json)
             {
-
                 return JsonSerializer.Deserialize<People>(json);
             }
         }
diff --git a/Json.cs b/Json.cs
new file mode 100644
index 0000000..3cf6639
--- /dev/null
+++ b/Json.cs
@@ -0,0 +1,65 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+using System.IO;
+
+namespace Bi_Os_Coop
+{
+    class Json
+    {
+        /*
+         * How to use Json class
+         * for reading and writing you only need the name of the file in Json folder
+         * for example Accounts
+         * to read the json from this file simply use
+         * string jsonTestText = Json.ReadJson("Accounts");
+         * then you can manipulate the data you want from it
+         * test = test.FromJson(jsonTestText);
+         * test.addPersonByFunction(1, "hugo", "mijnfakeEmail@test.com", "H3nk123", 20);
+         * string back2Json = test.ToJson(); //so we return this class to json
+         * Json.WriteJson("Accounts", back2Json); // to send it back to the Accounts tab
+         * Well done you're all set.
+         */
+        /// <summary>
+        /// Reads all text from file
+        /// </summary>
+        /// <param name="filename"></param>
+        /// <returns></returns>
+        public static string ReadJson(string filename)
+        {
+            try
+            {
+                string path = File.ReadAllText($"../../Json/{filename}.json");
+                return path;
+            }
+            catch (FileNotFoundException ex)
+            {
+                Console.WriteLine(ex.Message);
+                throw new IdiotException();
+            }
+        }
+        /// <summary>
+        /// Writes the string text to a JSON file
+        /// BEWARE: IRREVERSABLE
+        /// </summary>
+        /// <param name="filename"></param>
+        /// <param name="content"></param>
+        public static void WriteJson(string filename, string content)
+        {
+            File.WriteAllText($"../../Json/{filename}.json", content);
+        }
+    }
+    [Serializable]
+    public class IdiotException : Exception
+    {
+        public IdiotException() { }
+        public IdiotException(string message) : base(message) { }
+        public IdiotException(string message, Exception inner) : base(message, inner) { }
+        protected IdiotException(
+          System.Runtime.Serialization.SerializationInfo info,
+          System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
+    }
+}
diff --git a/Json/Accounts.json b/Json/Accounts.json
new file mode 100644
index 0000000..fa94cbb
--- /dev/null
+++ b/Json/Accounts.json
@@ -0,0 +1 @@
+{"peopleList":[{"id":1,"name":"hugo","email":"mijnfakeEmail@test.com","password":"H3nk123","age":20},{"id":2,"name":"Lilo","email":"Lilo@stitch.com2","password":"m@tress","age":19}]}
\ No newline at end of file
diff --git a/Program.cs b/Program.cs
index 796fe74..e4d1d77 100644
--- a/Program.cs
+++ b/Program.cs
@@ -13,7 +13,8 @@ namespace Bi_Os_Coop
     {
         static void Main(string[] args)
         {
-            loginscherm.login();
+
+            //loginscherm.login();
             /*
             newEntry("A1", ConsoleColor.Red, ConsoleColor.Black);
             newEntry("B1", ConsoleColor.Red, ConsoleColor.Black);
@@ -21,7 +22,8 @@ namespace Bi_Os_Coop
             newEntry("D1", ConsoleColor.Red, ConsoleColor.Black);
             string read = Console.ReadLine();
             */
-            CPeople.Poggers();
+
+            //CPeople.Poggers();
 
 #if (DEBUG)
             Console.ReadKey();

commit 82bf4ee65d0271eb1b7c5c57d73bbb4b8c6542f4
gpg: Signature made Sun Mar 21 16:02:29 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: 89c28bc 5bef689
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Sun Mar 21 16:02:29 2021 +0100

    Merge pull request #7 from HugoVG/LoginScherm
    
    loginscherm (niet gelinkt)

commit 89c28bca97dafe6a4cb304b247142dbdc616c33b
gpg: Signature made Thu Mar 18 18:01:03 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu Mar 18 18:01:03 2021 +0100

    Update README.md
---
 README.md | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 352252c..b1fa0c9 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,10 @@
 # Bi-Os-Coop
-
+!<img src="https://cdn.worldvectorlogo.com/logos/c--4.svg" width="100" height="100">!
+Sprint 1
+- [ ] Diffrent roles
+- [ ] 
+- [ ] Main Menu
+- [ ] Admin Menu
+- [ ] Register Page
+- [ ] Age Verification
 Bi-Os-Coop

commit 9985cca8acd1037a9af141c1b3366fb4fba3bf6c
gpg: Signature made Thu Mar 18 15:31:43 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Merge: c9c8a56 7d90a9f
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu Mar 18 15:31:43 2021 +0100

    Merge pull request #6 from HugoVG/PersonClass
    
    CPeople class

commit 7d90a9f348728589c0f617fe9a14e6fec1724638
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Thu Mar 18 15:29:53 2021 +0100

    +Added System.Text.Json to the Project
    +Added Class People
    +Added Debug flag
---
 App.config        |  10 ++++-
 Bi-Os-Coop.csproj |  30 +++++++++++++++
 CPeople.cs        | 111 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Program.cs        |  13 +++++--
 packages.config   |  12 ++++++
 5 files changed, 171 insertions(+), 5 deletions(-)

diff --git a/App.config b/App.config
index 56efbc7..775e457 100644
--- a/App.config
+++ b/App.config
@@ -1,6 +1,14 @@
-﻿<?xml version="1.0" encoding="utf-8" ?>
+﻿<?xml version="1.0" encoding="utf-8"?>
 <configuration>
     <startup> 
         <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
     </startup>
+  <runtime>
+    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
+      <dependentAssembly>
+        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
+        <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
+      </dependentAssembly>
+    </assemblyBinding>
+  </runtime>
 </configuration>
\ No newline at end of file
diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
index aaf6f85..577cea9 100644
--- a/Bi-Os-Coop.csproj
+++ b/Bi-Os-Coop.csproj
@@ -33,8 +33,36 @@
     <WarningLevel>4</WarningLevel>
   </PropertyGroup>
   <ItemGroup>
+    <Reference Include="Microsoft.Bcl.AsyncInterfaces, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
+      <HintPath>packages\Microsoft.Bcl.AsyncInterfaces.5.0.0\lib\net461\Microsoft.Bcl.AsyncInterfaces.dll</HintPath>
+    </Reference>
     <Reference Include="System" />
+    <Reference Include="System.Buffers, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
+      <HintPath>packages\System.Buffers.4.5.1\lib\net461\System.Buffers.dll</HintPath>
+    </Reference>
     <Reference Include="System.Core" />
+    <Reference Include="System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
+      <HintPath>packages\System.Memory.4.5.4\lib\net461\System.Memory.dll</HintPath>
+    </Reference>
+    <Reference Include="System.Numerics" />
+    <Reference Include="System.Numerics.Vectors, Version=4.1.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
+      <HintPath>packages\System.Numerics.Vectors.4.5.0\lib\net46\System.Numerics.Vectors.dll</HintPath>
+    </Reference>
+    <Reference Include="System.Runtime.CompilerServices.Unsafe, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
+      <HintPath>packages\System.Runtime.CompilerServices.Unsafe.5.0.0\lib\net45\System.Runtime.CompilerServices.Unsafe.dll</HintPath>
+    </Reference>
+    <Reference Include="System.Text.Encodings.Web, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
+      <HintPath>packages\System.Text.Encodings.Web.5.0.0\lib\net461\System.Text.Encodings.Web.dll</HintPath>
+    </Reference>
+    <Reference Include="System.Text.Json, Version=5.0.0.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
+      <HintPath>packages\System.Text.Json.5.0.1\lib\net461\System.Text.Json.dll</HintPath>
+    </Reference>
+    <Reference Include="System.Threading.Tasks.Extensions, Version=4.2.0.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
+      <HintPath>packages\System.Threading.Tasks.Extensions.4.5.4\lib\net461\System.Threading.Tasks.Extensions.dll</HintPath>
+    </Reference>
+    <Reference Include="System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
+      <HintPath>packages\System.ValueTuple.4.5.0\lib\net47\System.ValueTuple.dll</HintPath>
+    </Reference>
     <Reference Include="System.Xml.Linq" />
     <Reference Include="System.Data.DataSetExtensions" />
     <Reference Include="Microsoft.CSharp" />
@@ -43,11 +71,13 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="CPeople.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
   <ItemGroup>
     <None Include="App.config" />
+    <None Include="packages.config" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/CPeople.cs b/CPeople.cs
new file mode 100644
index 0000000..c2e93e1
--- /dev/null
+++ b/CPeople.cs
@@ -0,0 +1,111 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Text.Json;
+
+namespace Bi_Os_Coop
+{
+    class CPeople
+    {
+        public static void Poggers()
+        {
+            People people = new People();
+            people.addPersonByFunction(1, "Henk", "henk@henkino.com", "H3nko", 0);
+
+            people.writePeople();
+            Console.WriteLine(people.ToJson());
+            People newPeople = people.FromJson(people.ToJson());
+
+            newPeople.writePeople();
+            people = people.FromJson(people.ToJson());
+
+        }
+        /// <summary>
+        /// Person class
+        /// Fields:
+        ///     id, name?, email?, password?, age
+        /// </summary>
+        public class Person
+        {
+            public int id { get; set; }
+            public string name { get; set; }
+            public string email { get; set; }
+            public string password { get; set; }
+            public int age { get; set; }
+            //If you gonna edit this EDIT ALL
+            public void setPerson(int id, string name, string email, string password, int age)
+            {
+                this.id = id;
+                this.name = name;
+                this.email = email;
+                this.password = password;
+                this.age = age;
+            }
+        }
+        /// <summary>
+        /// People class for JSON
+        /// </summary>
+        public class People
+        {
+            public List<Person> peopleList { get; set; }
+            /// <summary>
+            /// adds an Person class Object to the peopleList
+            /// </summary>
+            /// <param name="personToAdd"></param>
+            public void AddContent(Person personToAdd)
+            {
+                if (peopleList == null)
+                {
+                    List<Person> newPerson = new List<Person>();
+                    newPerson.Add(personToAdd);
+                    peopleList = newPerson;
+                }
+                else
+                {
+                    peopleList.Add(personToAdd);
+                }
+            }
+            /// <summary>
+            ///     Makes a new Person using a function and adding it to the object, 
+            ///     so it will put the json good  
+            /// </summary>
+            /// <param name="id"></param>
+            /// <param name="name"></param>
+            /// <param name="email"></param>
+            /// <param name="password"></param>
+            /// <param name="age"></param>
+            public void addPersonByFunction(int id, string name, string email, string password, int age)
+            {
+                Person temp = new Person();
+                temp.setPerson(id, name, email, password, age);
+                AddContent(temp);
+            }
+            public void writePeople()
+            {
+                foreach (Person person in this.peopleList)
+                {
+                    Console.Write($"id:{person.id} \t");
+                    Console.Write($"name:{person.name} \t");
+                    Console.Write($"email:{person.email} \t");
+                    Console.Write($"password:{person.password} \t");
+                    Console.Write($"age:{person.age} \n");
+                }
+            }
+            /// <summary>
+            /// Will return This object 
+            /// </summary>
+            /// <returns></returns>
+            public string ToJson()
+            {
+                return JsonSerializer.Serialize(this);
+            }
+            public People FromJson(string json)
+            {
+
+                return JsonSerializer.Deserialize<People>(json);
+            }
+        }
+    }
+}
diff --git a/Program.cs b/Program.cs
index 38be3c1..fd4b9ac 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,4 +1,6 @@
-﻿using System;
+﻿#define DEBUG
+//#undef DEBUG
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
@@ -11,15 +13,18 @@ namespace Bi_Os_Coop
     {
         static void Main(string[] args)
         {
+            /*
             newEntry("A1", ConsoleColor.Red, ConsoleColor.Black);
             newEntry("B1", ConsoleColor.Red, ConsoleColor.Black);
             newEntry("C1", ConsoleColor.Red, ConsoleColor.Black);
             newEntry("D1", ConsoleColor.Red, ConsoleColor.Black);
             string read = Console.ReadLine();
+            */
+            CPeople.Poggers();
 
-
-
-            
+#if (DEBUG)
+            Console.ReadKey();
+#endif
         }
         /// <summary>
         /// Will write a new text to the console making the Main take up less space
diff --git a/packages.config b/packages.config
new file mode 100644
index 0000000..564a252
--- /dev/null
+++ b/packages.config
@@ -0,0 +1,12 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
+  <package id="Microsoft.Bcl.AsyncInterfaces" version="5.0.0" targetFramework="net472" />
+  <package id="System.Buffers" version="4.5.1" targetFramework="net472" />
+  <package id="System.Memory" version="4.5.4" targetFramework="net472" />
+  <package id="System.Numerics.Vectors" version="4.5.0" targetFramework="net472" />
+  <package id="System.Runtime.CompilerServices.Unsafe" version="5.0.0" targetFramework="net472" />
+  <package id="System.Text.Encodings.Web" version="5.0.0" targetFramework="net472" />
+  <package id="System.Text.Json" version="5.0.1" targetFramework="net472" />
+  <package id="System.Threading.Tasks.Extensions" version="4.5.4" targetFramework="net472" />
+  <package id="System.ValueTuple" version="4.5.0" targetFramework="net472" />
+</packages>
\ No newline at end of file

commit 46c47748700a43ad9631845d34a2cea59df64b8b
Merge: 9750c74 9561b6c
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 9 11:20:38 2021 +0100

    Merge branch 'master' of https://github.com/HugoVG/Bi-Os-Coop

commit 9750c7424c9d78064f63f7d62d045e2569f0a6d4
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 9 11:20:21 2021 +0100

    Revert "//Hogo"
    
    This reverts commit 4d57890600c11643d21abfa28f0ab41895a25c94.
---
 Program.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Program.cs b/Program.cs
index f3fd75a..f383a87 100644
--- a/Program.cs
+++ b/Program.cs
@@ -18,7 +18,7 @@ namespace Bi_Os_Coop
 
 
 
-            //Hogo
+            
         }
         /// <summary>
         /// Will write a new text to the console making the Main take up less space

commit 4d57890600c11643d21abfa28f0ab41895a25c94
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 9 11:19:46 2021 +0100

    //Hogo
---
 Program.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Program.cs b/Program.cs
index f383a87..f3fd75a 100644
--- a/Program.cs
+++ b/Program.cs
@@ -18,7 +18,7 @@ namespace Bi_Os_Coop
 
 
 
-            
+            //Hogo
         }
         /// <summary>
         /// Will write a new text to the console making the Main take up less space

commit e0b0f1819855ab4ada81a24234de6f89d10d4e4d
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Mar 9 11:09:45 2021 +0100

    TEST
---
 Program.cs | 38 ++++++++++++++++++++++----------------
 1 file changed, 22 insertions(+), 16 deletions(-)

diff --git a/Program.cs b/Program.cs
index a4ead04..f383a87 100644
--- a/Program.cs
+++ b/Program.cs
@@ -10,24 +10,30 @@ namespace Bi_Os_Coop
     {
         static void Main(string[] args)
         {
-            Console.BackgroundColor = ConsoleColor.Red;
-            Console.Write("A1");
-            Console.BackgroundColor = ConsoleColor.Black;
-            Console.Write(" ");
-            Console.BackgroundColor = ConsoleColor.White;
-            Console.Write("B1");
-            Console.BackgroundColor = ConsoleColor.Black;
-            Console.Write(" ");
-            Console.BackgroundColor = ConsoleColor.White;
-            Console.Write("C1");
+            newEntry("A1", ConsoleColor.Red, ConsoleColor.Black);
+            newEntry("B1", ConsoleColor.Red, ConsoleColor.Black);
+            newEntry("C1", ConsoleColor.Red, ConsoleColor.Black);
+            newEntry("D1", ConsoleColor.Red, ConsoleColor.Black);
+            string read = Console.ReadLine();
+
+
+
+            
+        }
+        /// <summary>
+        /// Will write a new text to the console making the Main take up less space
+        /// </summary>
+        /// <param name="text">Required Paramater: Text that will be displayed to screen</param>
+        /// <param name="colorfg">Foreground Color</param>
+        /// <param name="colorbg">Background Color</param>
+        static void newEntry(string text, ConsoleColor colorfg = ConsoleColor.White, ConsoleColor colorbg = ConsoleColor.Black)
+        {
+            Console.BackgroundColor = colorbg;
+            Console.ForegroundColor = colorfg;
+            Console.Write(text);
             Console.BackgroundColor = ConsoleColor.Black;
             Console.Write(" ");
-            Console.BackgroundColor = ConsoleColor.White;
-            Console.Write("D1");
-            Console.BackgroundColor = ConsoleColor.Black;
-            Console.ReadLine();
-            //this is my commment
-            
+
         }
     }
 }

commit 0b90e52129ed89747ef313a5803a1cc08ed69475
Merge: 6fcaf7a ab72faa
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Feb 16 14:12:24 2021 +0100

    Merge branch 'master' of https://github.com/HugoVG/Bi-Os-Coop

commit 6fcaf7ae229304c614bbeb0a634affb699c10c7a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Feb 16 14:12:09 2021 +0100

    comm
---
 Program.cs | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Program.cs b/Program.cs
index 3b7650b..a4ead04 100644
--- a/Program.cs
+++ b/Program.cs
@@ -26,6 +26,8 @@ namespace Bi_Os_Coop
             Console.Write("D1");
             Console.BackgroundColor = ConsoleColor.Black;
             Console.ReadLine();
+            //this is my commment
+            
         }
     }
 }

commit ab72faa8be436971bb6d470076728d1d5bd738e6
gpg: Signature made Tue Feb 16 14:10:21 2021    
gpg:                using RSA key 4AEE18F83AFDEB23
gpg: Can't check signature: No public key
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Feb 16 14:10:21 2021 +0100

    Create README.md
---
 README.md | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..352252c
--- /dev/null
+++ b/README.md
@@ -0,0 +1,3 @@
+# Bi-Os-Coop
+
+Bi-Os-Coop

commit 95b166d57d18b01c258f4389bb217222e84bde3a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Feb 16 14:08:47 2021 +0100

    added colors
---
 Program.cs | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/Program.cs b/Program.cs
index 00d66ad..3b7650b 100644
--- a/Program.cs
+++ b/Program.cs
@@ -10,6 +10,22 @@ namespace Bi_Os_Coop
     {
         static void Main(string[] args)
         {
+            Console.BackgroundColor = ConsoleColor.Red;
+            Console.Write("A1");
+            Console.BackgroundColor = ConsoleColor.Black;
+            Console.Write(" ");
+            Console.BackgroundColor = ConsoleColor.White;
+            Console.Write("B1");
+            Console.BackgroundColor = ConsoleColor.Black;
+            Console.Write(" ");
+            Console.BackgroundColor = ConsoleColor.White;
+            Console.Write("C1");
+            Console.BackgroundColor = ConsoleColor.Black;
+            Console.Write(" ");
+            Console.BackgroundColor = ConsoleColor.White;
+            Console.Write("D1");
+            Console.BackgroundColor = ConsoleColor.Black;
+            Console.ReadLine();
         }
     }
 }

commit fb08dbb5b7e71435118378ab992c2ec3e92b468a
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Feb 16 12:32:56 2021 +0100

    Add project files.
---
 App.config                 |  6 ++++++
 Bi-Os-Coop.csproj          | 53 ++++++++++++++++++++++++++++++++++++++++++++++
 Bi-Os-Coop.sln             | 25 ++++++++++++++++++++++
 Program.cs                 | 15 +++++++++++++
 Properties/AssemblyInfo.cs | 36 +++++++++++++++++++++++++++++++
 5 files changed, 135 insertions(+)

diff --git a/App.config b/App.config
new file mode 100644
index 0000000..56efbc7
--- /dev/null
+++ b/App.config
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
+    </startup>
+</configuration>
\ No newline at end of file
diff --git a/Bi-Os-Coop.csproj b/Bi-Os-Coop.csproj
new file mode 100644
index 0000000..aaf6f85
--- /dev/null
+++ b/Bi-Os-Coop.csproj
@@ -0,0 +1,53 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{817449BE-5140-4D69-8EE0-5BD9EF65B05F}</ProjectGuid>
+    <OutputType>Exe</OutputType>
+    <RootNamespace>Bi_Os_Coop</RootNamespace>
+    <AssemblyName>Bi-Os-Coop</AssemblyName>
+    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Program.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="App.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/Bi-Os-Coop.sln b/Bi-Os-Coop.sln
new file mode 100644
index 0000000..7860626
--- /dev/null
+++ b/Bi-Os-Coop.sln
@@ -0,0 +1,25 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 16
+VisualStudioVersion = 16.0.30804.86
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Bi-Os-Coop", "Bi-Os-Coop.csproj", "{817449BE-5140-4D69-8EE0-5BD9EF65B05F}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{817449BE-5140-4D69-8EE0-5BD9EF65B05F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{817449BE-5140-4D69-8EE0-5BD9EF65B05F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{817449BE-5140-4D69-8EE0-5BD9EF65B05F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{817449BE-5140-4D69-8EE0-5BD9EF65B05F}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {75915558-ACF9-4F5D-9F6B-0914F8533874}
+	EndGlobalSection
+EndGlobal
diff --git a/Program.cs b/Program.cs
new file mode 100644
index 0000000..00d66ad
--- /dev/null
+++ b/Program.cs
@@ -0,0 +1,15 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Bi_Os_Coop
+{
+    class Program
+    {
+        static void Main(string[] args)
+        {
+        }
+    }
+}
diff --git a/Properties/AssemblyInfo.cs b/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..52865da
--- /dev/null
+++ b/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("Bi-Os-Coop")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("Bi-Os-Coop")]
+[assembly: AssemblyCopyright("Copyright ©  2021")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("817449be-5140-4d69-8ee0-5bd9ef65b05f")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]

commit a7217b2f1f64a0bf9c593d0eea5d572880794ad9
Author: HugoVG <64896329+HugoVG@users.noreply.github.com>
Date:   Tue Feb 16 12:32:54 2021 +0100

    Add .gitignore and .gitattributes.
---
 .gitattributes |  63 +++++++++++
 .gitignore     | 340 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 403 insertions(+)

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..1ff0c42
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,63 @@
+###############################################################################
+# Set default behavior to automatically normalize line endings.
+###############################################################################
+* text=auto
+
+###############################################################################
+# Set default behavior for command prompt diff.
+#
+# This is need for earlier builds of msysgit that does not have it on by
+# default for csharp files.
+# Note: This is only used by command line
+###############################################################################
+#*.cs     diff=csharp
+
+###############################################################################
+# Set the merge driver for project and solution files
+#
+# Merging from the command prompt will add diff markers to the files if there
+# are conflicts (Merging from VS is not affected by the settings below, in VS
+# the diff markers are never inserted). Diff markers may cause the following 
+# file extensions to fail to load in VS. An alternative would be to treat
+# these files as binary and thus will always conflict and require user
+# intervention with every merge. To do so, just uncomment the entries below
+###############################################################################
+#*.sln       merge=binary
+#*.csproj    merge=binary
+#*.vbproj    merge=binary
+#*.vcxproj   merge=binary
+#*.vcproj    merge=binary
+#*.dbproj    merge=binary
+#*.fsproj    merge=binary
+#*.lsproj    merge=binary
+#*.wixproj   merge=binary
+#*.modelproj merge=binary
+#*.sqlproj   merge=binary
+#*.wwaproj   merge=binary
+
+###############################################################################
+# behavior for image files
+#
+# image files are treated as binary by default.
+###############################################################################
+#*.jpg   binary
+#*.png   binary
+#*.gif   binary
+
+###############################################################################
+# diff behavior for common document formats
+# 
+# Convert binary document formats to text before diffing them. This feature
+# is only available from the command line. Turn it on by uncommenting the 
+# entries below.
+###############################################################################
+#*.doc   diff=astextplain
+#*.DOC   diff=astextplain
+#*.docx  diff=astextplain
+#*.DOCX  diff=astextplain
+#*.dot   diff=astextplain
+#*.DOT   diff=astextplain
+#*.pdf   diff=astextplain
+#*.PDF   diff=astextplain
+#*.rtf   diff=astextplain
+#*.RTF   diff=astextplain
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..4ce6fdd
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,340 @@
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+##
+## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
+
+# User-specific files
+*.rsuser
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# User-specific files (MonoDevelop/Xamarin Studio)
+*.userprefs
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+[Aa][Rr][Mm]/
+[Aa][Rr][Mm]64/
+bld/
+[Bb]in/
+[Oo]bj/
+[Ll]og/
+
+# Visual Studio 2015/2017 cache/options directory
+.vs/
+# Uncomment if you have tasks that create the project's static files in wwwroot
+#wwwroot/
+
+# Visual Studio 2017 auto generated files
+Generated\ Files/
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+# NUNIT
+*.VisualState.xml
+TestResult.xml
+
+# Build Results of an ATL Project
+[Dd]ebugPS/
+[Rr]eleasePS/
+dlldata.c
+
+# Benchmark Results
+BenchmarkDotNet.Artifacts/
+
+# .NET Core
+project.lock.json
+project.fragment.lock.json
+artifacts/
+
+# StyleCop
+StyleCopReport.xml
+
+# Files built by Visual Studio
+*_i.c
+*_p.c
+*_h.h
+*.ilk
+*.meta
+*.obj
+*.iobj
+*.pch
+*.pdb
+*.ipdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.tmp_proj
+*_wpftmp.csproj
+*.log
+*.vspscc
+*.vssscc
+.builds
+*.pidb
+*.svclog
+*.scc
+
+# Chutzpah Test files
+_Chutzpah*
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opendb
+*.opensdf
+*.sdf
+*.cachefile
+*.VC.db
+*.VC.VC.opendb
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+*.sap
+
+# Visual Studio Trace Files
+*.e2e
+
+# TFS 2012 Local Workspace
+$tf/
+
+# Guidance Automation Toolkit
+*.gpState
+
+# ReSharper is a .NET coding add-in
+_ReSharper*/
+*.[Rr]e[Ss]harper
+*.DotSettings.user
+
+# JustCode is a .NET coding add-in
+.JustCode
+
+# TeamCity is a build add-in
+_TeamCity*
+
+# DotCover is a Code Coverage Tool
+*.dotCover
+
+# AxoCover is a Code Coverage Tool
+.axoCover/*
+!.axoCover/settings.json
+
+# Visual Studio code coverage results
+*.coverage
+*.coveragexml
+
+# NCrunch
+_NCrunch_*
+.*crunch*.local.xml
+nCrunchTemp_*
+
+# MightyMoose
+*.mm.*
+AutoTest.Net/
+
+# Web workbench (sass)
+.sass-cache/
+
+# Installshield output folder
+[Ee]xpress/
+
+# DocProject is a documentation generator add-in
+DocProject/buildhelp/
+DocProject/Help/*.HxT
+DocProject/Help/*.HxC
+DocProject/Help/*.hhc
+DocProject/Help/*.hhk
+DocProject/Help/*.hhp
+DocProject/Help/Html2
+DocProject/Help/html
+
+# Click-Once directory
+publish/
+
+# Publish Web Output
+*.[Pp]ublish.xml
+*.azurePubxml
+# Note: Comment the next line if you want to checkin your web deploy settings,
+# but database connection strings (with potential passwords) will be unencrypted
+*.pubxml
+*.publishproj
+
+# Microsoft Azure Web App publish settings. Comment the next line if you want to
+# checkin your Azure Web App publish settings, but sensitive information contained
+# in these scripts will be unencrypted
+PublishScripts/
+
+# NuGet Packages
+*.nupkg
+# The packages folder can be ignored because of Package Restore
+**/[Pp]ackages/*
+# except build/, which is used as an MSBuild target.
+!**/[Pp]ackages/build/
+# Uncomment if necessary however generally it will be regenerated when needed
+#!**/[Pp]ackages/repositories.config
+# NuGet v3's project.json files produces more ignorable files
+*.nuget.props
+*.nuget.targets
+
+# Microsoft Azure Build Output
+csx/
+*.build.csdef
+
+# Microsoft Azure Emulator
+ecf/
+rcf/
+
+# Windows Store app package directories and files
+AppPackages/
+BundleArtifacts/
+Package.StoreAssociation.xml
+_pkginfo.txt
+*.appx
+
+# Visual Studio cache files
+# files ending in .cache can be ignored
+*.[Cc]ache
+# but keep track of directories ending in .cache
+!?*.[Cc]ache/
+
+# Others
+ClientBin/
+~$*
+*~
+*.dbmdl
+*.dbproj.schemaview
+*.jfm
+*.pfx
+*.publishsettings
+orleans.codegen.cs
+
+# Including strong name files can present a security risk
+# (https://github.com/github/gitignore/pull/2483#issue-259490424)
+#*.snk
+
+# Since there are multiple workflows, uncomment next line to ignore bower_components
+# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
+#bower_components/
+
+# RIA/Silverlight projects
+Generated_Code/
+
+# Backup & report files from converting an old project file
+# to a newer Visual Studio version. Backup files are not needed,
+# because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+UpgradeLog*.htm
+ServiceFabricBackup/
+*.rptproj.bak
+
+# SQL Server files
+*.mdf
+*.ldf
+*.ndf
+
+# Business Intelligence projects
+*.rdl.data
+*.bim.layout
+*.bim_*.settings
+*.rptproj.rsuser
+*- Backup*.rdl
+
+# Microsoft Fakes
+FakesAssemblies/
+
+# GhostDoc plugin setting file
+*.GhostDoc.xml
+
+# Node.js Tools for Visual Studio
+.ntvs_analysis.dat
+node_modules/
+
+# Visual Studio 6 build log
+*.plg
+
+# Visual Studio 6 workspace options file
+*.opt
+
+# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
+*.vbw
+
+# Visual Studio LightSwitch build output
+**/*.HTMLClient/GeneratedArtifacts
+**/*.DesktopClient/GeneratedArtifacts
+**/*.DesktopClient/ModelManifest.xml
+**/*.Server/GeneratedArtifacts
+**/*.Server/ModelManifest.xml
+_Pvt_Extensions
+
+# Paket dependency manager
+.paket/paket.exe
+paket-files/
+
+# FAKE - F# Make
+.fake/
+
+# JetBrains Rider
+.idea/
+*.sln.iml
+
+# CodeRush personal settings
+.cr/personal
+
+# Python Tools for Visual Studio (PTVS)
+__pycache__/
+*.pyc
+
+# Cake - Uncomment if you are using it
+# tools/**
+# !tools/packages.config
+
+# Tabs Studio
+*.tss
+
+# Telerik's JustMock configuration file
+*.jmconfig
+
+# BizTalk build output
+*.btp.cs
+*.btm.cs
+*.odx.cs
+*.xsd.cs
+
+# OpenCover UI analysis results
+OpenCover/
+
+# Azure Stream Analytics local run output
+ASALocalRun/
+
+# MSBuild Binary and Structured Log
+*.binlog
+
+# NVidia Nsight GPU debugger configuration file
+*.nvuser
+
+# MFractors (Xamarin productivity tool) working folder
+.mfractor/
+
+# Local History for Visual Studio
+.localhistory/
+
+# BeatPulse healthcheck temp database
+healthchecksdb
\ No newline at end of file
